
combined.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d250  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000150c  0800d410  0800d410  0001d410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e91c  0800e91c  00020224  2**0
                  CONTENTS
  4 .ARM          00000008  0800e91c  0800e91c  0001e91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e924  0800e924  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e924  0800e924  0001e924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e928  0800e928  0001e928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800e92c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000990  20000224  0800eb50  00020224  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bb4  0800eb50  00020bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001979e  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ff9  00000000  00000000  000399f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  0003c9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001450  00000000  00000000  0003df80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c51c  00000000  00000000  0003f3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aa58  00000000  00000000  0006b8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d6ff  00000000  00000000  00086344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00193a43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ecc  00000000  00000000  00193a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000224 	.word	0x20000224
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800d3f8 	.word	0x0800d3f8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000228 	.word	0x20000228
 80001fc:	0800d3f8 	.word	0x0800d3f8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <hx711_init>:

#include <HX711.h>
#include "stdio.h"

//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	80fb      	strh	r3, [r7, #6]
  // Setup the pin connections with the STM Board
  hx711->clk_gpio = clk_gpio;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	88fa      	ldrh	r2, [r7, #6]
 8000f96:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000fa2:	815a      	strh	r2, [r3, #10]

  GPIO_InitTypeDef  gpio = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	68b8      	ldr	r0, [r7, #8]
 8000fcc:	f004 fa6e 	bl	80054ac <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 8000fdc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000fde:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	6838      	ldr	r0, [r7, #0]
 8000fe8:	f004 fa60 	bl	80054ac <HAL_GPIO_Init>

}
 8000fec:	bf00      	nop
 8000fee:	3728      	adds	r7, #40	; 0x28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <set_scale>:

//#############################################################################################
void set_scale(hx711_t *hx711, float Ascale, float Bscale){
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001000:	edc7 0a01 	vstr	s1, [r7, #4]
  // Set the scale. To calibrate the cell, run the program with a scale of 1, call the tare function and then the get_units function.
  // Divide the obtained weight by the real weight. The result is the parameter to pass to scale
	hx711->Ascale = Ascale;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	611a      	str	r2, [r3, #16]
	hx711->Bscale = Bscale;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	61da      	str	r2, [r3, #28]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <set_offset>:
		}
	hx711->Bgain = 2;
}

//#############################################################################################
void set_offset(hx711_t *hx711, long offset, uint8_t channel){
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	4613      	mov	r3, r2
 8001028:	71fb      	strb	r3, [r7, #7]
	if(channel == CHANNEL_A) hx711->Aoffset = offset;
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d103      	bne.n	8001038 <set_offset+0x1c>
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	60da      	str	r2, [r3, #12]
	else hx711->Boffset = offset;
}
 8001036:	e002      	b.n	800103e <set_offset+0x22>
	else hx711->Boffset = offset;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	619a      	str	r2, [r3, #24]
}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <shiftIn>:

//############################################################################################
uint8_t shiftIn(hx711_t *hx711, uint8_t bitOrder) {
 800104a:	b580      	push	{r7, lr}
 800104c:	b084      	sub	sp, #16
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	460b      	mov	r3, r1
 8001054:	70fb      	strb	r3, [r7, #3]
    uint8_t value = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	73fb      	strb	r3, [r7, #15]
    uint8_t i;

    for(i = 0; i < 8; ++i) {
 800105a:	2300      	movs	r3, #0
 800105c:	73bb      	strb	r3, [r7, #14]
 800105e:	e03e      	b.n	80010de <shiftIn+0x94>
    	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6818      	ldr	r0, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	891b      	ldrh	r3, [r3, #8]
 8001068:	2201      	movs	r2, #1
 800106a:	4619      	mov	r1, r3
 800106c:	f004 fbc8 	bl	8005800 <HAL_GPIO_WritePin>
        if(bitOrder == 0)
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d113      	bne.n	800109e <shiftIn+0x54>
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << i;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	895b      	ldrh	r3, [r3, #10]
 800107e:	4619      	mov	r1, r3
 8001080:	4610      	mov	r0, r2
 8001082:	f004 fba5 	bl	80057d0 <HAL_GPIO_ReadPin>
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	7bbb      	ldrb	r3, [r7, #14]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	b25a      	sxtb	r2, r3
 8001092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001096:	4313      	orrs	r3, r2
 8001098:	b25b      	sxtb	r3, r3
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	e014      	b.n	80010c8 <shiftIn+0x7e>
        else
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << (7 - i);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	895b      	ldrh	r3, [r3, #10]
 80010a6:	4619      	mov	r1, r3
 80010a8:	4610      	mov	r0, r2
 80010aa:	f004 fb91 	bl	80057d0 <HAL_GPIO_ReadPin>
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	7bbb      	ldrb	r3, [r7, #14]
 80010b4:	f1c3 0307 	rsb	r3, r3, #7
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	b25a      	sxtb	r2, r3
 80010be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b25b      	sxtb	r3, r3
 80010c6:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	891b      	ldrh	r3, [r3, #8]
 80010d0:	2200      	movs	r2, #0
 80010d2:	4619      	mov	r1, r3
 80010d4:	f004 fb94 	bl	8005800 <HAL_GPIO_WritePin>
    for(i = 0; i < 8; ++i) {
 80010d8:	7bbb      	ldrb	r3, [r7, #14]
 80010da:	3301      	adds	r3, #1
 80010dc:	73bb      	strb	r3, [r7, #14]
 80010de:	7bbb      	ldrb	r3, [r7, #14]
 80010e0:	2b07      	cmp	r3, #7
 80010e2:	d9bd      	bls.n	8001060 <shiftIn+0x16>
    }
    return value;
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <is_ready>:

//############################################################################################
bool is_ready(hx711_t *hx711) {
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_RESET){
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	895b      	ldrh	r3, [r3, #10]
 80010fe:	4619      	mov	r1, r3
 8001100:	4610      	mov	r0, r2
 8001102:	f004 fb65 	bl	80057d0 <HAL_GPIO_ReadPin>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <is_ready+0x22>
		return 1;
 800110c:	2301      	movs	r3, #1
 800110e:	e000      	b.n	8001112 <is_ready+0x24>
	}
	return 0;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <wait_ready>:

//############################################################################################
void wait_ready(hx711_t *hx711) {
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
	// Wait for the chip to become ready.
	while (!is_ready(hx711)) {
 8001122:	e002      	b.n	800112a <wait_ready+0x10>
		HAL_Delayy(0);
 8001124:	2000      	movs	r0, #0
 8001126:	f000 f80e 	bl	8001146 <HAL_Delayy>
	while (!is_ready(hx711)) {
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffdf 	bl	80010ee <is_ready>
 8001130:	4603      	mov	r3, r0
 8001132:	f083 0301 	eor.w	r3, r3, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1f3      	bne.n	8001124 <wait_ready+0xa>
	}
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_Delayy>:

void HAL_Delayy(uint32_t Delay)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
//  }
//
//  while ((HAL_GetTick() - tickstart) < wait)
//  {
//  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <read>:

//############################################################################################
long read(hx711_t *hx711, uint8_t channel){
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
	wait_ready(hx711);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ffd6 	bl	800111a <wait_ready>
	unsigned long value = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
	uint8_t data[3] = { 0 };
 8001172:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <read+0x98>)
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	81bb      	strh	r3, [r7, #12]
 8001178:	2300      	movs	r3, #0
 800117a:	73bb      	strb	r3, [r7, #14]
	uint8_t filler = 0x00;
 800117c:	2300      	movs	r3, #0
 800117e:	75fb      	strb	r3, [r7, #23]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop

	noInterrupts();

	data[2] = shiftIn(hx711, 1);
 8001184:	2101      	movs	r1, #1
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ff5f 	bl	800104a <shiftIn>
 800118c:	4603      	mov	r3, r0
 800118e:	73bb      	strb	r3, [r7, #14]
	data[1] = shiftIn(hx711, 1);
 8001190:	2101      	movs	r1, #1
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ff59 	bl	800104a <shiftIn>
 8001198:	4603      	mov	r3, r0
 800119a:	737b      	strb	r3, [r7, #13]
	data[0] = shiftIn(hx711, 1);
 800119c:	2101      	movs	r1, #1
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ff53 	bl	800104a <shiftIn>
 80011a4:	4603      	mov	r3, r0
 80011a6:	733b      	strb	r3, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80011a8:	b662      	cpsie	i
}
 80011aa:	bf00      	nop
//	}

	interrupts();

	// Replicate the most significant bit to pad out a 32-bit signed integer
	if (data[2] & 0x80) {
 80011ac:	7bbb      	ldrb	r3, [r7, #14]
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	da02      	bge.n	80011ba <read+0x5e>
		filler = 0xFF;
 80011b4:	23ff      	movs	r3, #255	; 0xff
 80011b6:	75fb      	strb	r3, [r7, #23]
 80011b8:	e001      	b.n	80011be <read+0x62>
	} else {
		filler = 0x00;
 80011ba:	2300      	movs	r3, #0
 80011bc:	75fb      	strb	r3, [r7, #23]
	}

	// Construct a 32-bit signed integer
	value = ( (unsigned long)(filler) << 24
 80011be:	7dfb      	ldrb	r3, [r7, #23]
 80011c0:	061a      	lsls	r2, r3, #24
			| (unsigned long)(data[2]) << 16
 80011c2:	7bbb      	ldrb	r3, [r7, #14]
 80011c4:	041b      	lsls	r3, r3, #16
 80011c6:	431a      	orrs	r2, r3
			| (unsigned long)(data[1]) << 8
 80011c8:	7b7b      	ldrb	r3, [r7, #13]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	4313      	orrs	r3, r2
			| (unsigned long)(data[0]) );
 80011ce:	7b3a      	ldrb	r2, [r7, #12]
	value = ( (unsigned long)(filler) << 24
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]

	return (value == -1)? read(hx711, channel) : (long)(value);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011da:	d106      	bne.n	80011ea <read+0x8e>
 80011dc:	78fb      	ldrb	r3, [r7, #3]
 80011de:	4619      	mov	r1, r3
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ffbb 	bl	800115c <read>
 80011e6:	4603      	mov	r3, r0
 80011e8:	e000      	b.n	80011ec <read+0x90>
 80011ea:	693b      	ldr	r3, [r7, #16]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	0800d410 	.word	0x0800d410

080011f8 <read_average>:

//############################################################################################
long read_average(hx711_t *hx711, int8_t times, uint8_t channel) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	70fb      	strb	r3, [r7, #3]
 8001204:	4613      	mov	r3, r2
 8001206:	70bb      	strb	r3, [r7, #2]
	long sum = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
	for (int8_t i = 0; i < times; i++) {
 800120c:	2300      	movs	r3, #0
 800120e:	72fb      	strb	r3, [r7, #11]
 8001210:	e011      	b.n	8001236 <read_average+0x3e>
		sum += read(hx711, channel);
 8001212:	78bb      	ldrb	r3, [r7, #2]
 8001214:	4619      	mov	r1, r3
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ffa0 	bl	800115c <read>
 800121c:	4602      	mov	r2, r0
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4413      	add	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]
		HAL_Delayy(0);
 8001224:	2000      	movs	r0, #0
 8001226:	f7ff ff8e 	bl	8001146 <HAL_Delayy>
	for (int8_t i = 0; i < times; i++) {
 800122a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	3301      	adds	r3, #1
 8001232:	b2db      	uxtb	r3, r3
 8001234:	72fb      	strb	r3, [r7, #11]
 8001236:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800123a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800123e:	429a      	cmp	r2, r3
 8001240:	dbe7      	blt.n	8001212 <read_average+0x1a>
	}
	return sum / times;
 8001242:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	fb92 f3f3 	sdiv	r3, r2, r3
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <get_value>:

//############################################################################################
double get_value(hx711_t *hx711, int8_t times, uint8_t channel) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	70fb      	strb	r3, [r7, #3]
 8001260:	4613      	mov	r3, r2
 8001262:	70bb      	strb	r3, [r7, #2]
	long offset = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
	if(channel == CHANNEL_A) offset = hx711->Aoffset;
 8001268:	78bb      	ldrb	r3, [r7, #2]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d103      	bne.n	8001276 <get_value+0x22>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	e002      	b.n	800127c <get_value+0x28>
	else offset = hx711->Boffset;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	60fb      	str	r3, [r7, #12]
	return read_average(hx711, times, channel) - offset;
 800127c:	78ba      	ldrb	r2, [r7, #2]
 800127e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001282:	4619      	mov	r1, r3
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ffb7 	bl	80011f8 <read_average>
 800128a:	4602      	mov	r2, r0
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f95f 	bl	8000554 <__aeabi_i2d>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	ec43 2b17 	vmov	d7, r2, r3
}
 800129e:	eeb0 0a47 	vmov.f32	s0, s14
 80012a2:	eef0 0a67 	vmov.f32	s1, s15
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <tare>:

//############################################################################################
void tare(hx711_t *hx711, uint8_t times, uint8_t channel) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	70fb      	strb	r3, [r7, #3]
 80012b8:	4613      	mov	r3, r2
 80012ba:	70bb      	strb	r3, [r7, #2]
	long r = read(hx711, channel); // Change channel
 80012bc:	78bb      	ldrb	r3, [r7, #2]
 80012be:	4619      	mov	r1, r3
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ff4b 	bl	800115c <read>
 80012c6:	6178      	str	r0, [r7, #20]
	printf("read %ld", r);
 80012c8:	6979      	ldr	r1, [r7, #20]
 80012ca:	4810      	ldr	r0, [pc, #64]	; (800130c <tare+0x60>)
 80012cc:	f009 fdb8 	bl	800ae40 <iprintf>
	double sum = read_average(hx711, times, channel);
 80012d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012d4:	78ba      	ldrb	r2, [r7, #2]
 80012d6:	4619      	mov	r1, r3
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff ff8d 	bl	80011f8 <read_average>
 80012de:	4603      	mov	r3, r0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f937 	bl	8000554 <__aeabi_i2d>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
	set_offset(hx711, sum, channel);
 80012ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012f2:	f7ff fc49 	bl	8000b88 <__aeabi_d2iz>
 80012f6:	4601      	mov	r1, r0
 80012f8:	78bb      	ldrb	r3, [r7, #2]
 80012fa:	461a      	mov	r2, r3
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff fe8d 	bl	800101c <set_offset>
}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	0800d414 	.word	0x0800d414

08001310 <get_weight>:
	tare(hx711, times, CHANNEL_A);
	tare(hx711, times, CHANNEL_B);
}

//############################################################################################
float get_weight(hx711_t *hx711, int8_t times, uint8_t channel) {
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	70fb      	strb	r3, [r7, #3]
 800131c:	4613      	mov	r3, r2
 800131e:	70bb      	strb	r3, [r7, #2]
  // Read load cell
	read(hx711, channel);
 8001320:	78bb      	ldrb	r3, [r7, #2]
 8001322:	4619      	mov	r1, r3
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff19 	bl	800115c <read>
	float scale = 0;
 800132a:	f04f 0300 	mov.w	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
	if(channel == CHANNEL_A) scale = hx711->Ascale;
 8001330:	78bb      	ldrb	r3, [r7, #2]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d103      	bne.n	800133e <get_weight+0x2e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	e002      	b.n	8001344 <get_weight+0x34>
	else scale = hx711->Bscale;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	60fb      	str	r3, [r7, #12]
	return get_value(hx711, times, channel) / scale;
 8001344:	78ba      	ldrb	r2, [r7, #2]
 8001346:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800134a:	4619      	mov	r1, r3
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff81 	bl	8001254 <get_value>
 8001352:	ec55 4b10 	vmov	r4, r5, d0
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f7ff f90e 	bl	8000578 <__aeabi_f2d>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4620      	mov	r0, r4
 8001362:	4629      	mov	r1, r5
 8001364:	f7ff fa8a 	bl	800087c <__aeabi_ddiv>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fc32 	bl	8000bd8 <__aeabi_d2f>
 8001374:	4603      	mov	r3, r0
 8001376:	ee07 3a90 	vmov	s15, r3
}
 800137a:	eeb0 0a67 	vmov.f32	s0, s15
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bdb0      	pop	{r4, r5, r7, pc}
 8001384:	0000      	movs	r0, r0
	...

08001388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001388:	b5b0      	push	{r4, r5, r7, lr}
 800138a:	b09a      	sub	sp, #104	; 0x68
 800138c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint32_t * tim4_ccr2 = (uint32_t *)(TIM4_ADDR + TIM_CCR2_OFFSET);
 800138e:	4ba7      	ldr	r3, [pc, #668]	; (800162c <main+0x2a4>)
 8001390:	653b      	str	r3, [r7, #80]	; 0x50

	for (int i = 0; i < 32; i++) {
 8001392:	2300      	movs	r3, #0
 8001394:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001396:	e007      	b.n	80013a8 <main+0x20>
		line[i] = 0x20;  // Assign space character to each element
 8001398:	4aa5      	ldr	r2, [pc, #660]	; (8001630 <main+0x2a8>)
 800139a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800139c:	4413      	add	r3, r2
 800139e:	2220      	movs	r2, #32
 80013a0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 32; i++) {
 80013a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013a4:	3301      	adds	r3, #1
 80013a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80013a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013aa:	2b1f      	cmp	r3, #31
 80013ac:	ddf4      	ble.n	8001398 <main+0x10>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ae:	f003 fc60 	bl	8004c72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b2:	f001 fd1d 	bl	8002df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b6:	f001 ff17 	bl	80031e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80013ba:	f001 feeb 	bl	8003194 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80013be:	f001 fdd9 	bl	8002f74 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 80013c2:	f001 fd5b 	bl	8002e7c <MX_I2C1_Init>
  MX_TIM4_Init();
 80013c6:	f001 fe6d 	bl	80030a4 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80013ca:	f001 fe1f 	bl	800300c <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80013ce:	f001 fd93 	bl	8002ef8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart2, buffer, 32);
 80013d2:	2220      	movs	r2, #32
 80013d4:	4997      	ldr	r1, [pc, #604]	; (8001634 <main+0x2ac>)
 80013d6:	4898      	ldr	r0, [pc, #608]	; (8001638 <main+0x2b0>)
 80013d8:	f007 ffa6 	bl	8009328 <HAL_UART_Receive_DMA>

	HAL_TIM_Base_Start_IT(&htim5);
 80013dc:	4897      	ldr	r0, [pc, #604]	; (800163c <main+0x2b4>)
 80013de:	f006 fe4d 	bl	800807c <HAL_TIM_Base_Start_IT>
	hx711_init(&food, GPIOC, GPIO_PIN_1, GPIOC, GPIO_PIN_0); // clk: c1 data: c0
 80013e2:	2301      	movs	r3, #1
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	4b96      	ldr	r3, [pc, #600]	; (8001640 <main+0x2b8>)
 80013e8:	2202      	movs	r2, #2
 80013ea:	4995      	ldr	r1, [pc, #596]	; (8001640 <main+0x2b8>)
 80013ec:	4895      	ldr	r0, [pc, #596]	; (8001644 <main+0x2bc>)
 80013ee:	f7ff fdc5 	bl	8000f7c <hx711_init>
	hx711_init(&water, GPIOG, GPIO_PIN_1, GPIOG, GPIO_PIN_0); // clk: g1 data: g0
 80013f2:	2301      	movs	r3, #1
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	4b94      	ldr	r3, [pc, #592]	; (8001648 <main+0x2c0>)
 80013f8:	2202      	movs	r2, #2
 80013fa:	4993      	ldr	r1, [pc, #588]	; (8001648 <main+0x2c0>)
 80013fc:	4893      	ldr	r0, [pc, #588]	; (800164c <main+0x2c4>)
 80013fe:	f7ff fdbd 	bl	8000f7c <hx711_init>
	hx711_init(&pet, GPIOC, GPIO_PIN_5, GPIOC, GPIO_PIN_4); // clk: c5 data: c4
 8001402:	2310      	movs	r3, #16
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	4b8e      	ldr	r3, [pc, #568]	; (8001640 <main+0x2b8>)
 8001408:	2220      	movs	r2, #32
 800140a:	498d      	ldr	r1, [pc, #564]	; (8001640 <main+0x2b8>)
 800140c:	4890      	ldr	r0, [pc, #576]	; (8001650 <main+0x2c8>)
 800140e:	f7ff fdb5 	bl	8000f7c <hx711_init>
	set_scale(&food, 1, 1);
 8001412:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001416:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800141a:	488a      	ldr	r0, [pc, #552]	; (8001644 <main+0x2bc>)
 800141c:	f7ff fdea 	bl	8000ff4 <set_scale>
	food.Aoffset = 16190;
 8001420:	4b88      	ldr	r3, [pc, #544]	; (8001644 <main+0x2bc>)
 8001422:	f643 723e 	movw	r2, #16190	; 0x3f3e
 8001426:	60da      	str	r2, [r3, #12]
	food.Ascale = -722.879456;
 8001428:	4b86      	ldr	r3, [pc, #536]	; (8001644 <main+0x2bc>)
 800142a:	4a8a      	ldr	r2, [pc, #552]	; (8001654 <main+0x2cc>)
 800142c:	611a      	str	r2, [r3, #16]
	set_scale(&water, 1, 1);
 800142e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001432:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001436:	4885      	ldr	r0, [pc, #532]	; (800164c <main+0x2c4>)
 8001438:	f7ff fddc 	bl	8000ff4 <set_scale>
	water.Aoffset = 43813;
 800143c:	4b83      	ldr	r3, [pc, #524]	; (800164c <main+0x2c4>)
 800143e:	f64a 3225 	movw	r2, #43813	; 0xab25
 8001442:	60da      	str	r2, [r3, #12]
	water.Ascale = -741.790161;
 8001444:	4b81      	ldr	r3, [pc, #516]	; (800164c <main+0x2c4>)
 8001446:	4a84      	ldr	r2, [pc, #528]	; (8001658 <main+0x2d0>)
 8001448:	611a      	str	r2, [r3, #16]
	set_scale(&pet, 1, 1);
 800144a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800144e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001452:	487f      	ldr	r0, [pc, #508]	; (8001650 <main+0x2c8>)
 8001454:	f7ff fdce 	bl	8000ff4 <set_scale>
	pet.Aoffset = 274649;
 8001458:	4b7d      	ldr	r3, [pc, #500]	; (8001650 <main+0x2c8>)
 800145a:	4a80      	ldr	r2, [pc, #512]	; (800165c <main+0x2d4>)
 800145c:	60da      	str	r2, [r3, #12]
	pet.Ascale = -53.3035698;
 800145e:	4b7c      	ldr	r3, [pc, #496]	; (8001650 <main+0x2c8>)
 8001460:	4a7f      	ldr	r2, [pc, #508]	; (8001660 <main+0x2d8>)
 8001462:	611a      	str	r2, [r3, #16]

	// initial interrupt
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8001464:	2201      	movs	r2, #1
 8001466:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800146a:	487e      	ldr	r0, [pc, #504]	; (8001664 <main+0x2dc>)
 800146c:	f004 f9c8 	bl	8005800 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8001470:	2201      	movs	r2, #1
 8001472:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001476:	487b      	ldr	r0, [pc, #492]	; (8001664 <main+0x2dc>)
 8001478:	f004 f9c2 	bl	8005800 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 800147c:	2201      	movs	r2, #1
 800147e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001482:	4878      	ldr	r0, [pc, #480]	; (8001664 <main+0x2dc>)
 8001484:	f004 f9bc 	bl	8005800 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 8001488:	2201      	movs	r2, #1
 800148a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800148e:	4875      	ldr	r0, [pc, #468]	; (8001664 <main+0x2dc>)
 8001490:	f004 f9b6 	bl	8005800 <HAL_GPIO_WritePin>

	// display
	char output;
	char buf[20];
	ssd1306_Init();
 8001494:	f002 fe4c 	bl	8004130 <ssd1306_Init>
	ssd1306_SetCursor(2,2);
 8001498:	2102      	movs	r1, #2
 800149a:	2002      	movs	r0, #2
 800149c:	f003 f800 	bl	80044a0 <ssd1306_SetCursor>
	output = ssd1306_WriteString(" Initializing... ", Font_7x10, White);
 80014a0:	4a71      	ldr	r2, [pc, #452]	; (8001668 <main+0x2e0>)
 80014a2:	2301      	movs	r3, #1
 80014a4:	ca06      	ldmia	r2, {r1, r2}
 80014a6:	4871      	ldr	r0, [pc, #452]	; (800166c <main+0x2e4>)
 80014a8:	f002 ffd4 	bl	8004454 <ssd1306_WriteString>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	ssd1306_UpdateScreen();
 80014b2:	f002 fecb 	bl	800424c <ssd1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	ssd1306_Init();
 80014b6:	f002 fe3b 	bl	8004130 <ssd1306_Init>
	dirty = 1;
 80014ba:	4b6d      	ldr	r3, [pc, #436]	; (8001670 <main+0x2e8>)
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80014c0:	2104      	movs	r1, #4
 80014c2:	486c      	ldr	r0, [pc, #432]	; (8001674 <main+0x2ec>)
 80014c4:	f006 feac 	bl	8008220 <HAL_TIM_PWM_Start>


	while (1)
	{
		if (petWarning)
 80014c8:	4b6b      	ldr	r3, [pc, #428]	; (8001678 <main+0x2f0>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 80eb 	beq.w	80016a8 <main+0x320>
		{
			uint8_t y = 28;
 80014d2:	231c      	movs	r3, #28
 80014d4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			if(dirty)
 80014d8:	4b65      	ldr	r3, [pc, #404]	; (8001670 <main+0x2e8>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d004      	beq.n	80014ea <main+0x162>
			{
				ssd1306_Init();
 80014e0:	f002 fe26 	bl	8004130 <ssd1306_Init>
				dirty = 0;
 80014e4:	4b62      	ldr	r3, [pc, #392]	; (8001670 <main+0x2e8>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
			}
			ssd1306_SetCursor(2,2);
 80014ea:	2102      	movs	r1, #2
 80014ec:	2002      	movs	r0, #2
 80014ee:	f002 ffd7 	bl	80044a0 <ssd1306_SetCursor>
			if (petWarning == 1) ssd1306_WriteString("   SUGGESTION   ", Font_7x10, White);
 80014f2:	4b61      	ldr	r3, [pc, #388]	; (8001678 <main+0x2f0>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d106      	bne.n	8001508 <main+0x180>
 80014fa:	4a5b      	ldr	r2, [pc, #364]	; (8001668 <main+0x2e0>)
 80014fc:	2301      	movs	r3, #1
 80014fe:	ca06      	ldmia	r2, {r1, r2}
 8001500:	485e      	ldr	r0, [pc, #376]	; (800167c <main+0x2f4>)
 8001502:	f002 ffa7 	bl	8004454 <ssd1306_WriteString>
 8001506:	e005      	b.n	8001514 <main+0x18c>
			else ssd1306_WriteString("  !!!WARNING!!!   ", Font_7x10, White);
 8001508:	4a57      	ldr	r2, [pc, #348]	; (8001668 <main+0x2e0>)
 800150a:	2301      	movs	r3, #1
 800150c:	ca06      	ldmia	r2, {r1, r2}
 800150e:	485c      	ldr	r0, [pc, #368]	; (8001680 <main+0x2f8>)
 8001510:	f002 ffa0 	bl	8004454 <ssd1306_WriteString>
			ssd1306_SetCursor(2,16);
 8001514:	2110      	movs	r1, #16
 8001516:	2002      	movs	r0, #2
 8001518:	f002 ffc2 	bl	80044a0 <ssd1306_SetCursor>
			ssd1306_WriteString("Yesterday your pet", Font_7x10, White);
 800151c:	4a52      	ldr	r2, [pc, #328]	; (8001668 <main+0x2e0>)
 800151e:	2301      	movs	r3, #1
 8001520:	ca06      	ldmia	r2, {r1, r2}
 8001522:	4858      	ldr	r0, [pc, #352]	; (8001684 <main+0x2fc>)
 8001524:	f002 ff96 	bl	8004454 <ssd1306_WriteString>
			if (warningInfo[0] == 1)
 8001528:	4b57      	ldr	r3, [pc, #348]	; (8001688 <main+0x300>)
 800152a:	f993 3000 	ldrsb.w	r3, [r3]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d111      	bne.n	8001556 <main+0x1ce>
			{
				ssd1306_SetCursor(2,y);
 8001532:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001536:	4619      	mov	r1, r3
 8001538:	2002      	movs	r0, #2
 800153a:	f002 ffb1 	bl	80044a0 <ssd1306_SetCursor>
				ssd1306_WriteString("Ate too much!", Font_7x10, White);
 800153e:	4a4a      	ldr	r2, [pc, #296]	; (8001668 <main+0x2e0>)
 8001540:	2301      	movs	r3, #1
 8001542:	ca06      	ldmia	r2, {r1, r2}
 8001544:	4851      	ldr	r0, [pc, #324]	; (800168c <main+0x304>)
 8001546:	f002 ff85 	bl	8004454 <ssd1306_WriteString>
				y += 12;
 800154a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800154e:	330c      	adds	r3, #12
 8001550:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8001554:	e016      	b.n	8001584 <main+0x1fc>
			}
			else if (warningInfo[0] == -1)
 8001556:	4b4c      	ldr	r3, [pc, #304]	; (8001688 <main+0x300>)
 8001558:	f993 3000 	ldrsb.w	r3, [r3]
 800155c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001560:	d110      	bne.n	8001584 <main+0x1fc>
			{
				ssd1306_SetCursor(2,y);
 8001562:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001566:	4619      	mov	r1, r3
 8001568:	2002      	movs	r0, #2
 800156a:	f002 ff99 	bl	80044a0 <ssd1306_SetCursor>
				ssd1306_WriteString("Ate too little!", Font_7x10, White);
 800156e:	4a3e      	ldr	r2, [pc, #248]	; (8001668 <main+0x2e0>)
 8001570:	2301      	movs	r3, #1
 8001572:	ca06      	ldmia	r2, {r1, r2}
 8001574:	4846      	ldr	r0, [pc, #280]	; (8001690 <main+0x308>)
 8001576:	f002 ff6d 	bl	8004454 <ssd1306_WriteString>
				y += 12;
 800157a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800157e:	330c      	adds	r3, #12
 8001580:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			}
			warningInfo[0] = 0;
 8001584:	4b40      	ldr	r3, [pc, #256]	; (8001688 <main+0x300>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
			if (warningInfo[1] == 1)
 800158a:	4b3f      	ldr	r3, [pc, #252]	; (8001688 <main+0x300>)
 800158c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d111      	bne.n	80015b8 <main+0x230>
			{
				ssd1306_SetCursor(2,y);
 8001594:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001598:	4619      	mov	r1, r3
 800159a:	2002      	movs	r0, #2
 800159c:	f002 ff80 	bl	80044a0 <ssd1306_SetCursor>
				ssd1306_WriteString("Drank too much!", Font_7x10, White);
 80015a0:	4a31      	ldr	r2, [pc, #196]	; (8001668 <main+0x2e0>)
 80015a2:	2301      	movs	r3, #1
 80015a4:	ca06      	ldmia	r2, {r1, r2}
 80015a6:	483b      	ldr	r0, [pc, #236]	; (8001694 <main+0x30c>)
 80015a8:	f002 ff54 	bl	8004454 <ssd1306_WriteString>
				y += 12;
 80015ac:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80015b0:	330c      	adds	r3, #12
 80015b2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80015b6:	e016      	b.n	80015e6 <main+0x25e>
			}
			else if (warningInfo[1] == -1)
 80015b8:	4b33      	ldr	r3, [pc, #204]	; (8001688 <main+0x300>)
 80015ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80015be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c2:	d110      	bne.n	80015e6 <main+0x25e>
			{
				ssd1306_SetCursor(2,y);
 80015c4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80015c8:	4619      	mov	r1, r3
 80015ca:	2002      	movs	r0, #2
 80015cc:	f002 ff68 	bl	80044a0 <ssd1306_SetCursor>
				ssd1306_WriteString("Drank too little!", Font_7x10, White);
 80015d0:	4a25      	ldr	r2, [pc, #148]	; (8001668 <main+0x2e0>)
 80015d2:	2301      	movs	r3, #1
 80015d4:	ca06      	ldmia	r2, {r1, r2}
 80015d6:	4830      	ldr	r0, [pc, #192]	; (8001698 <main+0x310>)
 80015d8:	f002 ff3c 	bl	8004454 <ssd1306_WriteString>
				y += 12;
 80015dc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80015e0:	330c      	adds	r3, #12
 80015e2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			}
			ssd1306_SetCursor(2,52);
 80015e6:	2134      	movs	r1, #52	; 0x34
 80015e8:	2002      	movs	r0, #2
 80015ea:	f002 ff59 	bl	80044a0 <ssd1306_SetCursor>
			ssd1306_WriteString("ENTER-Continue", Font_7x10, White);
 80015ee:	4a1e      	ldr	r2, [pc, #120]	; (8001668 <main+0x2e0>)
 80015f0:	2301      	movs	r3, #1
 80015f2:	ca06      	ldmia	r2, {r1, r2}
 80015f4:	4829      	ldr	r0, [pc, #164]	; (800169c <main+0x314>)
 80015f6:	f002 ff2d 	bl	8004454 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80015fa:	f002 fe27 	bl	800424c <ssd1306_UpdateScreen>
			warningInfo[1] = 0;
 80015fe:	4b22      	ldr	r3, [pc, #136]	; (8001688 <main+0x300>)
 8001600:	2200      	movs	r2, #0
 8001602:	705a      	strb	r2, [r3, #1]
			if (is_press && keyPressed == 35)
 8001604:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <main+0x318>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	f43f af5d 	beq.w	80014c8 <main+0x140>
 800160e:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <main+0x31c>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b23      	cmp	r3, #35	; 0x23
 8001614:	f47f af58 	bne.w	80014c8 <main+0x140>
			{
				petWarning = 0;
 8001618:	4b17      	ldr	r3, [pc, #92]	; (8001678 <main+0x2f0>)
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
				is_press = 0;
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <main+0x318>)
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
				dirty = 1;
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <main+0x2e8>)
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
 800162a:	e74d      	b.n	80014c8 <main+0x140>
 800162c:	40000838 	.word	0x40000838
 8001630:	20000700 	.word	0x20000700
 8001634:	20000774 	.word	0x20000774
 8001638:	200003e4 	.word	0x200003e4
 800163c:	20000728 	.word	0x20000728
 8001640:	48000800 	.word	0x48000800
 8001644:	20000240 	.word	0x20000240
 8001648:	48001800 	.word	0x48001800
 800164c:	20000288 	.word	0x20000288
 8001650:	20000264 	.word	0x20000264
 8001654:	c434b849 	.word	0xc434b849
 8001658:	c4397292 	.word	0xc4397292
 800165c:	000430d9 	.word	0x000430d9
 8001660:	c25536db 	.word	0xc25536db
 8001664:	48001000 	.word	0x48001000
 8001668:	20000040 	.word	0x20000040
 800166c:	0800d420 	.word	0x0800d420
 8001670:	200006fb 	.word	0x200006fb
 8001674:	200004d4 	.word	0x200004d4
 8001678:	20000720 	.word	0x20000720
 800167c:	0800d434 	.word	0x0800d434
 8001680:	0800d448 	.word	0x0800d448
 8001684:	0800d45c 	.word	0x0800d45c
 8001688:	20000724 	.word	0x20000724
 800168c:	0800d470 	.word	0x0800d470
 8001690:	0800d480 	.word	0x0800d480
 8001694:	0800d490 	.word	0x0800d490
 8001698:	0800d4a0 	.word	0x0800d4a0
 800169c:	0800d4b4 	.word	0x0800d4b4
 80016a0:	200006f9 	.word	0x200006f9
 80016a4:	200006f8 	.word	0x200006f8
			}
		}
		else if (foodFresh < 0 || waterFresh < 0)
 80016a8:	4b8d      	ldr	r3, [pc, #564]	; (80018e0 <main+0x558>)
 80016aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	f7ff fa29 	bl	8000b0c <__aeabi_dcmplt>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10c      	bne.n	80016da <main+0x352>
 80016c0:	4b88      	ldr	r3, [pc, #544]	; (80018e4 <main+0x55c>)
 80016c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	f7ff fa1d 	bl	8000b0c <__aeabi_dcmplt>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 8085 	beq.w	80017e4 <main+0x45c>
		{
			if (dirty)
 80016da:	4b83      	ldr	r3, [pc, #524]	; (80018e8 <main+0x560>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d004      	beq.n	80016ec <main+0x364>
			{
				ssd1306_Init();
 80016e2:	f002 fd25 	bl	8004130 <ssd1306_Init>
				dirty = 0;
 80016e6:	4b80      	ldr	r3, [pc, #512]	; (80018e8 <main+0x560>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
			}
			uint8_t y = 16;
 80016ec:	2310      	movs	r3, #16
 80016ee:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
			if (foodFresh < 0)
 80016f2:	4b7b      	ldr	r3, [pc, #492]	; (80018e0 <main+0x558>)
 80016f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	f7ff fa04 	bl	8000b0c <__aeabi_dcmplt>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d010      	beq.n	800172c <main+0x3a4>
			{
				ssd1306_SetCursor(2,y);
 800170a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800170e:	4619      	mov	r1, r3
 8001710:	2002      	movs	r0, #2
 8001712:	f002 fec5 	bl	80044a0 <ssd1306_SetCursor>
				ssd1306_WriteString("Food not fresh!", Font_7x10, White);
 8001716:	4a75      	ldr	r2, [pc, #468]	; (80018ec <main+0x564>)
 8001718:	2301      	movs	r3, #1
 800171a:	ca06      	ldmia	r2, {r1, r2}
 800171c:	4874      	ldr	r0, [pc, #464]	; (80018f0 <main+0x568>)
 800171e:	f002 fe99 	bl	8004454 <ssd1306_WriteString>
				y += 12;
 8001722:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001726:	330c      	adds	r3, #12
 8001728:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
			}
			if (waterFresh < 0)
 800172c:	4b6d      	ldr	r3, [pc, #436]	; (80018e4 <main+0x55c>)
 800172e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	f7ff f9e7 	bl	8000b0c <__aeabi_dcmplt>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d010      	beq.n	8001766 <main+0x3de>
			{
				ssd1306_SetCursor(2,y);
 8001744:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001748:	4619      	mov	r1, r3
 800174a:	2002      	movs	r0, #2
 800174c:	f002 fea8 	bl	80044a0 <ssd1306_SetCursor>
				ssd1306_WriteString("Water not fresh!", Font_7x10, White);
 8001750:	4a66      	ldr	r2, [pc, #408]	; (80018ec <main+0x564>)
 8001752:	2301      	movs	r3, #1
 8001754:	ca06      	ldmia	r2, {r1, r2}
 8001756:	4867      	ldr	r0, [pc, #412]	; (80018f4 <main+0x56c>)
 8001758:	f002 fe7c 	bl	8004454 <ssd1306_WriteString>
				y += 12;
 800175c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001760:	330c      	adds	r3, #12
 8001762:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
			}
			ssd1306_SetCursor(2,52);
 8001766:	2134      	movs	r1, #52	; 0x34
 8001768:	2002      	movs	r0, #2
 800176a:	f002 fe99 	bl	80044a0 <ssd1306_SetCursor>
			ssd1306_WriteString("ENTER-Continue", Font_7x10, White);
 800176e:	4a5f      	ldr	r2, [pc, #380]	; (80018ec <main+0x564>)
 8001770:	2301      	movs	r3, #1
 8001772:	ca06      	ldmia	r2, {r1, r2}
 8001774:	4860      	ldr	r0, [pc, #384]	; (80018f8 <main+0x570>)
 8001776:	f002 fe6d 	bl	8004454 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 800177a:	f002 fd67 	bl	800424c <ssd1306_UpdateScreen>
			if (is_press && keyPressed == 35)
 800177e:	4b5f      	ldr	r3, [pc, #380]	; (80018fc <main+0x574>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	f001 830d 	beq.w	8002da2 <main+0x1a1a>
 8001788:	4b5d      	ldr	r3, [pc, #372]	; (8001900 <main+0x578>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b23      	cmp	r3, #35	; 0x23
 800178e:	f041 8308 	bne.w	8002da2 <main+0x1a1a>
			{
				if (foodFresh < 0)foodFresh = 100;
 8001792:	4b53      	ldr	r3, [pc, #332]	; (80018e0 <main+0x558>)
 8001794:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	f7ff f9b4 	bl	8000b0c <__aeabi_dcmplt>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d005      	beq.n	80017b6 <main+0x42e>
 80017aa:	494d      	ldr	r1, [pc, #308]	; (80018e0 <main+0x558>)
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	4b54      	ldr	r3, [pc, #336]	; (8001904 <main+0x57c>)
 80017b2:	e9c1 2300 	strd	r2, r3, [r1]
				if (waterFresh < 0)waterFresh = 100;
 80017b6:	4b4b      	ldr	r3, [pc, #300]	; (80018e4 <main+0x55c>)
 80017b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	f7ff f9a2 	bl	8000b0c <__aeabi_dcmplt>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d005      	beq.n	80017da <main+0x452>
 80017ce:	4945      	ldr	r1, [pc, #276]	; (80018e4 <main+0x55c>)
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	4b4b      	ldr	r3, [pc, #300]	; (8001904 <main+0x57c>)
 80017d6:	e9c1 2300 	strd	r2, r3, [r1]
				is_press = 0;
 80017da:	4b48      	ldr	r3, [pc, #288]	; (80018fc <main+0x574>)
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
		{
 80017e0:	f001 badf 	b.w	8002da2 <main+0x1a1a>
			}
		}
		else
		{
			if (is_press)
 80017e4:	4b45      	ldr	r3, [pc, #276]	; (80018fc <main+0x574>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 813e 	beq.w	8001a6a <main+0x6e2>
			{
				if (status == 0 && !dirty)
 80017ee:	4b46      	ldr	r3, [pc, #280]	; (8001908 <main+0x580>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d112      	bne.n	800181c <main+0x494>
 80017f6:	4b3c      	ldr	r3, [pc, #240]	; (80018e8 <main+0x560>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10e      	bne.n	800181c <main+0x494>
				{
					if (keyPressed == 35)
 80017fe:	4b40      	ldr	r3, [pc, #256]	; (8001900 <main+0x578>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b23      	cmp	r3, #35	; 0x23
 8001804:	d10a      	bne.n	800181c <main+0x494>
					{
						page = (page + 1) % PAGENUM;
 8001806:	4b41      	ldr	r3, [pc, #260]	; (800190c <main+0x584>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	3301      	adds	r3, #1
 800180c:	2b00      	cmp	r3, #0
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	bfb8      	it	lt
 8001814:	425b      	neglt	r3, r3
 8001816:	b2da      	uxtb	r2, r3
 8001818:	4b3c      	ldr	r3, [pc, #240]	; (800190c <main+0x584>)
 800181a:	701a      	strb	r2, [r3, #0]
					}
				}
				if (status == 4 && !dirty)
 800181c:	4b3a      	ldr	r3, [pc, #232]	; (8001908 <main+0x580>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b04      	cmp	r3, #4
 8001822:	d116      	bne.n	8001852 <main+0x4ca>
 8001824:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <main+0x560>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d112      	bne.n	8001852 <main+0x4ca>
				{
					if (keyPressed == 35)
 800182c:	4b34      	ldr	r3, [pc, #208]	; (8001900 <main+0x578>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b23      	cmp	r3, #35	; 0x23
 8001832:	d10e      	bne.n	8001852 <main+0x4ca>
					{
						disPage = (disPage + 1) % 3;
 8001834:	4b36      	ldr	r3, [pc, #216]	; (8001910 <main+0x588>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	4b36      	ldr	r3, [pc, #216]	; (8001914 <main+0x58c>)
 800183c:	fb83 3102 	smull	r3, r1, r3, r2
 8001840:	17d3      	asrs	r3, r2, #31
 8001842:	1ac9      	subs	r1, r1, r3
 8001844:	460b      	mov	r3, r1
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	440b      	add	r3, r1
 800184a:	1ad1      	subs	r1, r2, r3
 800184c:	b2ca      	uxtb	r2, r1
 800184e:	4b30      	ldr	r3, [pc, #192]	; (8001910 <main+0x588>)
 8001850:	701a      	strb	r2, [r3, #0]
					}
				}
				if (status == 5 && !dirty)
 8001852:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <main+0x580>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b05      	cmp	r3, #5
 8001858:	d123      	bne.n	80018a2 <main+0x51a>
 800185a:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <main+0x560>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d11f      	bne.n	80018a2 <main+0x51a>
				{
					if (keyPressed == 49) // 1: food
 8001862:	4b27      	ldr	r3, [pc, #156]	; (8001900 <main+0x578>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b31      	cmp	r3, #49	; 0x31
 8001868:	d106      	bne.n	8001878 <main+0x4f0>
					{
						calibrate(&food);
 800186a:	482b      	ldr	r0, [pc, #172]	; (8001918 <main+0x590>)
 800186c:	f001 ffd4 	bl	8003818 <calibrate>
						status = 0;
 8001870:	4b25      	ldr	r3, [pc, #148]	; (8001908 <main+0x580>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
 8001876:	e014      	b.n	80018a2 <main+0x51a>
					}
					else if (keyPressed == 50) //2: water
 8001878:	4b21      	ldr	r3, [pc, #132]	; (8001900 <main+0x578>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b32      	cmp	r3, #50	; 0x32
 800187e:	d106      	bne.n	800188e <main+0x506>
					{
						calibrate(&water);
 8001880:	4826      	ldr	r0, [pc, #152]	; (800191c <main+0x594>)
 8001882:	f001 ffc9 	bl	8003818 <calibrate>
						status = 0;
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <main+0x580>)
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
 800188c:	e009      	b.n	80018a2 <main+0x51a>
					}
					else if (keyPressed == 51) //3. pet
 800188e:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <main+0x578>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b33      	cmp	r3, #51	; 0x33
 8001894:	d105      	bne.n	80018a2 <main+0x51a>
					{
						calibrate(&pet);
 8001896:	4822      	ldr	r0, [pc, #136]	; (8001920 <main+0x598>)
 8001898:	f001 ffbe 	bl	8003818 <calibrate>
						status = 0;
 800189c:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <main+0x580>)
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
					}
				}
				if (status == 6 && !dirty)
 80018a2:	4b19      	ldr	r3, [pc, #100]	; (8001908 <main+0x580>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d156      	bne.n	8001958 <main+0x5d0>
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <main+0x560>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d152      	bne.n	8001958 <main+0x5d0>
				{
					if (keyPressed == 35)
 80018b2:	4b13      	ldr	r3, [pc, #76]	; (8001900 <main+0x578>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b23      	cmp	r3, #35	; 0x23
 80018b8:	d138      	bne.n	800192c <main+0x5a4>
					{
						hisPage = (hisPage + 1) % HISTORY;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <main+0x59c>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	4b19      	ldr	r3, [pc, #100]	; (8001928 <main+0x5a0>)
 80018c2:	fb83 1302 	smull	r1, r3, r3, r2
 80018c6:	10d9      	asrs	r1, r3, #3
 80018c8:	17d3      	asrs	r3, r2, #31
 80018ca:	1ac9      	subs	r1, r1, r3
 80018cc:	460b      	mov	r3, r1
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	1ad1      	subs	r1, r2, r3
 80018d6:	b2ca      	uxtb	r2, r1
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <main+0x59c>)
 80018da:	701a      	strb	r2, [r3, #0]
 80018dc:	e03c      	b.n	8001958 <main+0x5d0>
 80018de:	bf00      	nop
 80018e0:	20000008 	.word	0x20000008
 80018e4:	20000010 	.word	0x20000010
 80018e8:	200006fb 	.word	0x200006fb
 80018ec:	20000040 	.word	0x20000040
 80018f0:	0800d4c4 	.word	0x0800d4c4
 80018f4:	0800d4d4 	.word	0x0800d4d4
 80018f8:	0800d4b4 	.word	0x0800d4b4
 80018fc:	200006f9 	.word	0x200006f9
 8001900:	200006f8 	.word	0x200006f8
 8001904:	40590000 	.word	0x40590000
 8001908:	200006fa 	.word	0x200006fa
 800190c:	200006fc 	.word	0x200006fc
 8001910:	200006fd 	.word	0x200006fd
 8001914:	55555556 	.word	0x55555556
 8001918:	20000240 	.word	0x20000240
 800191c:	20000288 	.word	0x20000288
 8001920:	20000264 	.word	0x20000264
 8001924:	200006fe 	.word	0x200006fe
 8001928:	66666667 	.word	0x66666667
					}
					else if (keyPressed == 42)
 800192c:	4bb9      	ldr	r3, [pc, #740]	; (8001c14 <main+0x88c>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b2a      	cmp	r3, #42	; 0x2a
 8001932:	d111      	bne.n	8001958 <main+0x5d0>
					{
						hisPage = (hisPage + HISTORY - 1) % HISTORY;
 8001934:	4bb8      	ldr	r3, [pc, #736]	; (8001c18 <main+0x890>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	f103 0213 	add.w	r2, r3, #19
 800193c:	4bb7      	ldr	r3, [pc, #732]	; (8001c1c <main+0x894>)
 800193e:	fb83 1302 	smull	r1, r3, r3, r2
 8001942:	10d9      	asrs	r1, r3, #3
 8001944:	17d3      	asrs	r3, r2, #31
 8001946:	1ac9      	subs	r1, r1, r3
 8001948:	460b      	mov	r3, r1
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	1ad1      	subs	r1, r2, r3
 8001952:	b2ca      	uxtb	r2, r1
 8001954:	4bb0      	ldr	r3, [pc, #704]	; (8001c18 <main+0x890>)
 8001956:	701a      	strb	r2, [r3, #0]
					}
				}
				switch (keyPressed)
 8001958:	4bae      	ldr	r3, [pc, #696]	; (8001c14 <main+0x88c>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	3b23      	subs	r3, #35	; 0x23
 800195e:	2b21      	cmp	r3, #33	; 0x21
 8001960:	d87a      	bhi.n	8001a58 <main+0x6d0>
 8001962:	a201      	add	r2, pc, #4	; (adr r2, 8001968 <main+0x5e0>)
 8001964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001968:	08001a59 	.word	0x08001a59
 800196c:	08001a59 	.word	0x08001a59
 8001970:	08001a59 	.word	0x08001a59
 8001974:	08001a59 	.word	0x08001a59
 8001978:	08001a59 	.word	0x08001a59
 800197c:	08001a59 	.word	0x08001a59
 8001980:	08001a59 	.word	0x08001a59
 8001984:	08001a59 	.word	0x08001a59
 8001988:	08001a59 	.word	0x08001a59
 800198c:	08001a59 	.word	0x08001a59
 8001990:	08001a59 	.word	0x08001a59
 8001994:	08001a59 	.word	0x08001a59
 8001998:	08001a59 	.word	0x08001a59
 800199c:	08001a59 	.word	0x08001a59
 80019a0:	08001a1b 	.word	0x08001a1b
 80019a4:	08001a23 	.word	0x08001a23
 80019a8:	08001a2b 	.word	0x08001a2b
 80019ac:	08001a33 	.word	0x08001a33
 80019b0:	08001a3b 	.word	0x08001a3b
 80019b4:	08001a43 	.word	0x08001a43
 80019b8:	08001a51 	.word	0x08001a51
 80019bc:	08001a59 	.word	0x08001a59
 80019c0:	08001a59 	.word	0x08001a59
 80019c4:	08001a59 	.word	0x08001a59
 80019c8:	08001a59 	.word	0x08001a59
 80019cc:	08001a59 	.word	0x08001a59
 80019d0:	08001a59 	.word	0x08001a59
 80019d4:	08001a59 	.word	0x08001a59
 80019d8:	08001a59 	.word	0x08001a59
 80019dc:	08001a59 	.word	0x08001a59
 80019e0:	08001a59 	.word	0x08001a59
 80019e4:	080019f1 	.word	0x080019f1
 80019e8:	08001a09 	.word	0x08001a09
 80019ec:	08001a13 	.word	0x08001a13
				{
				case 65: // A
					break;
				case 66: // B
					HAL_UART_Transmit(&huart2, ask_for_warning, 32, 500);
 80019f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019f4:	2220      	movs	r2, #32
 80019f6:	498a      	ldr	r1, [pc, #552]	; (8001c20 <main+0x898>)
 80019f8:	488a      	ldr	r0, [pc, #552]	; (8001c24 <main+0x89c>)
 80019fa:	f007 fbfd 	bl	80091f8 <HAL_UART_Transmit>
					HAL_Delay(15000);
 80019fe:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001a02:	f003 f9ab 	bl	8004d5c <HAL_Delay>
					break;
 8001a06:	e027      	b.n	8001a58 <main+0x6d0>
				case 67: // C
					//				HAL_UART_Transmit(&huart2, line, 32, 500);
					//				HAL_UART_Transmit(&huart2, data, 32, 500);

					HAL_Delay(2000);
 8001a08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a0c:	f003 f9a6 	bl	8004d5c <HAL_Delay>
					//				ret = HAL_I2C_Slave_Receive(&hi2c2, buffer, 32, 400);
					break;
 8001a10:	e022      	b.n	8001a58 <main+0x6d0>
				case 68: // D
					status = 0;
 8001a12:	4b85      	ldr	r3, [pc, #532]	; (8001c28 <main+0x8a0>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
					break;
 8001a18:	e01e      	b.n	8001a58 <main+0x6d0>
				case 48: // 0

					break;
				case 49: // 1
					status = 1;
 8001a1a:	4b83      	ldr	r3, [pc, #524]	; (8001c28 <main+0x8a0>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
					break;
 8001a20:	e01a      	b.n	8001a58 <main+0x6d0>
				case 50: // 2
					status = 2;
 8001a22:	4b81      	ldr	r3, [pc, #516]	; (8001c28 <main+0x8a0>)
 8001a24:	2202      	movs	r2, #2
 8001a26:	701a      	strb	r2, [r3, #0]
					break;
 8001a28:	e016      	b.n	8001a58 <main+0x6d0>
				case 51: // 3
					status = 3;
 8001a2a:	4b7f      	ldr	r3, [pc, #508]	; (8001c28 <main+0x8a0>)
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	701a      	strb	r2, [r3, #0]
					break;
 8001a30:	e012      	b.n	8001a58 <main+0x6d0>
				case 52: // 4
					status = 4;
 8001a32:	4b7d      	ldr	r3, [pc, #500]	; (8001c28 <main+0x8a0>)
 8001a34:	2204      	movs	r2, #4
 8001a36:	701a      	strb	r2, [r3, #0]
					break;
 8001a38:	e00e      	b.n	8001a58 <main+0x6d0>
				case 53: // 5
					status = 5;
 8001a3a:	4b7b      	ldr	r3, [pc, #492]	; (8001c28 <main+0x8a0>)
 8001a3c:	2205      	movs	r2, #5
 8001a3e:	701a      	strb	r2, [r3, #0]
					break;
 8001a40:	e00a      	b.n	8001a58 <main+0x6d0>
				case 54: // 6
					status = 6;
 8001a42:	4b79      	ldr	r3, [pc, #484]	; (8001c28 <main+0x8a0>)
 8001a44:	2206      	movs	r2, #6
 8001a46:	701a      	strb	r2, [r3, #0]
					hisPage = 0;
 8001a48:	4b73      	ldr	r3, [pc, #460]	; (8001c18 <main+0x890>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
					break;
 8001a4e:	e003      	b.n	8001a58 <main+0x6d0>
				case 55: // 7
					status = 7;
 8001a50:	4b75      	ldr	r3, [pc, #468]	; (8001c28 <main+0x8a0>)
 8001a52:	2207      	movs	r2, #7
 8001a54:	701a      	strb	r2, [r3, #0]
					break;
 8001a56:	bf00      	nop
					break;
				case 35: // #

					break;
				}
				dirty = 1;
 8001a58:	4b74      	ldr	r3, [pc, #464]	; (8001c2c <main+0x8a4>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]
				is_press = 0;
 8001a5e:	4b74      	ldr	r3, [pc, #464]	; (8001c30 <main+0x8a8>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
				keyPressed = 0;
 8001a64:	4b6b      	ldr	r3, [pc, #428]	; (8001c14 <main+0x88c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
			}

			if (status == 0) {
 8001a6a:	4b6f      	ldr	r3, [pc, #444]	; (8001c28 <main+0x8a0>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f040 8097 	bne.w	8001ba2 <main+0x81a>
				display_menu();
 8001a74:	f001 fe48 	bl	8003708 <display_menu>
				pet_weight[2] = pet_weight[1];
 8001a78:	4b6e      	ldr	r3, [pc, #440]	; (8001c34 <main+0x8ac>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	4a6d      	ldr	r2, [pc, #436]	; (8001c34 <main+0x8ac>)
 8001a7e:	6093      	str	r3, [r2, #8]
				pet_weight[1] = pet_weight[0];
 8001a80:	4b6c      	ldr	r3, [pc, #432]	; (8001c34 <main+0x8ac>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a6b      	ldr	r2, [pc, #428]	; (8001c34 <main+0x8ac>)
 8001a86:	6053      	str	r3, [r2, #4]
				pet_weight[0] = get_weight(&pet, 10, CHANNEL_A); //get weight
 8001a88:	2200      	movs	r2, #0
 8001a8a:	210a      	movs	r1, #10
 8001a8c:	486a      	ldr	r0, [pc, #424]	; (8001c38 <main+0x8b0>)
 8001a8e:	f7ff fc3f 	bl	8001310 <get_weight>
 8001a92:	eef0 7a40 	vmov.f32	s15, s0
 8001a96:	4b67      	ldr	r3, [pc, #412]	; (8001c34 <main+0x8ac>)
 8001a98:	edc3 7a00 	vstr	s15, [r3]
				float average = (pet_weight[2] + pet_weight[1] + pet_weight[0]) / 3.0;
 8001a9c:	4b65      	ldr	r3, [pc, #404]	; (8001c34 <main+0x8ac>)
 8001a9e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001aa2:	4b64      	ldr	r3, [pc, #400]	; (8001c34 <main+0x8ac>)
 8001aa4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001aa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aac:	4b61      	ldr	r3, [pc, #388]	; (8001c34 <main+0x8ac>)
 8001aae:	edd3 7a00 	vldr	s15, [r3]
 8001ab2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ab6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001aba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001abe:	edc7 7a05 	vstr	s15, [r7, #20]
				if (((abs(pet_weight[2] - average)+abs(pet_weight[1] - average)+abs(pet_weight[0] - average)) < (average / 10.0)) && average > 50)
 8001ac2:	4b5c      	ldr	r3, [pc, #368]	; (8001c34 <main+0x8ac>)
 8001ac4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ac8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001acc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ad0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ad4:	ee17 3a90 	vmov	r3, s15
 8001ad8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001adc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001ae0:	4b54      	ldr	r3, [pc, #336]	; (8001c34 <main+0x8ac>)
 8001ae2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ae6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001aea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001af2:	ee17 3a90 	vmov	r3, s15
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	bfb8      	it	lt
 8001afa:	425b      	neglt	r3, r3
 8001afc:	441a      	add	r2, r3
 8001afe:	4b4d      	ldr	r3, [pc, #308]	; (8001c34 <main+0x8ac>)
 8001b00:	ed93 7a00 	vldr	s14, [r3]
 8001b04:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b10:	ee17 3a90 	vmov	r3, s15
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	bfb8      	it	lt
 8001b18:	425b      	neglt	r3, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fd19 	bl	8000554 <__aeabi_i2d>
 8001b22:	4604      	mov	r4, r0
 8001b24:	460d      	mov	r5, r1
 8001b26:	6978      	ldr	r0, [r7, #20]
 8001b28:	f7fe fd26 	bl	8000578 <__aeabi_f2d>
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	4b42      	ldr	r3, [pc, #264]	; (8001c3c <main+0x8b4>)
 8001b32:	f7fe fea3 	bl	800087c <__aeabi_ddiv>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	4629      	mov	r1, r5
 8001b3e:	f7fe ffe5 	bl	8000b0c <__aeabi_dcmplt>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f001 812d 	beq.w	8002da4 <main+0x1a1c>
 8001b4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b4e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001c40 <main+0x8b8>
 8001b52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5a:	f341 8123 	ble.w	8002da4 <main+0x1a1c>
					petweight = floor(pet_weight[1]*10)/10.0;
 8001b5e:	4b35      	ldr	r3, [pc, #212]	; (8001c34 <main+0x8ac>)
 8001b60:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b64:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b6c:	ee17 0a90 	vmov	r0, s15
 8001b70:	f7fe fd02 	bl	8000578 <__aeabi_f2d>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	ec43 2b10 	vmov	d0, r2, r3
 8001b7c:	f00b fbbc 	bl	800d2f8 <floor>
 8001b80:	ec51 0b10 	vmov	r0, r1, d0
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	4b2c      	ldr	r3, [pc, #176]	; (8001c3c <main+0x8b4>)
 8001b8a:	f7fe fe77 	bl	800087c <__aeabi_ddiv>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	f7ff f81f 	bl	8000bd8 <__aeabi_d2f>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4a29      	ldr	r2, [pc, #164]	; (8001c44 <main+0x8bc>)
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	e492      	b.n	80014c8 <main+0x140>
			}

			else if (status == 5) {
 8001ba2:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <main+0x8a0>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b05      	cmp	r3, #5
 8001ba8:	d158      	bne.n	8001c5c <main+0x8d4>
				if (dirty)
 8001baa:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <main+0x8a4>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f43f ac8a 	beq.w	80014c8 <main+0x140>
				{
					ssd1306_Init();
 8001bb4:	f002 fabc 	bl	8004130 <ssd1306_Init>
					ssd1306_SetCursor(0,2);
 8001bb8:	2102      	movs	r1, #2
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f002 fc70 	bl	80044a0 <ssd1306_SetCursor>
					ssd1306_WriteString("    Calibration    ", Font_7x10, White);
 8001bc0:	4a21      	ldr	r2, [pc, #132]	; (8001c48 <main+0x8c0>)
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	ca06      	ldmia	r2, {r1, r2}
 8001bc6:	4821      	ldr	r0, [pc, #132]	; (8001c4c <main+0x8c4>)
 8001bc8:	f002 fc44 	bl	8004454 <ssd1306_WriteString>
					ssd1306_SetCursor(2,16);
 8001bcc:	2110      	movs	r1, #16
 8001bce:	2002      	movs	r0, #2
 8001bd0:	f002 fc66 	bl	80044a0 <ssd1306_SetCursor>
					ssd1306_WriteString("1-Food Load Cell", Font_7x10, White);
 8001bd4:	4a1c      	ldr	r2, [pc, #112]	; (8001c48 <main+0x8c0>)
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	ca06      	ldmia	r2, {r1, r2}
 8001bda:	481d      	ldr	r0, [pc, #116]	; (8001c50 <main+0x8c8>)
 8001bdc:	f002 fc3a 	bl	8004454 <ssd1306_WriteString>
					ssd1306_SetCursor(2,28);
 8001be0:	211c      	movs	r1, #28
 8001be2:	2002      	movs	r0, #2
 8001be4:	f002 fc5c 	bl	80044a0 <ssd1306_SetCursor>
					ssd1306_WriteString("2-Water Load Cell", Font_7x10, White);
 8001be8:	4a17      	ldr	r2, [pc, #92]	; (8001c48 <main+0x8c0>)
 8001bea:	2301      	movs	r3, #1
 8001bec:	ca06      	ldmia	r2, {r1, r2}
 8001bee:	4819      	ldr	r0, [pc, #100]	; (8001c54 <main+0x8cc>)
 8001bf0:	f002 fc30 	bl	8004454 <ssd1306_WriteString>
					ssd1306_SetCursor(2,40);
 8001bf4:	2128      	movs	r1, #40	; 0x28
 8001bf6:	2002      	movs	r0, #2
 8001bf8:	f002 fc52 	bl	80044a0 <ssd1306_SetCursor>
					ssd1306_WriteString("3-Pet Load Cell", Font_7x10, White);
 8001bfc:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <main+0x8c0>)
 8001bfe:	2301      	movs	r3, #1
 8001c00:	ca06      	ldmia	r2, {r1, r2}
 8001c02:	4815      	ldr	r0, [pc, #84]	; (8001c58 <main+0x8d0>)
 8001c04:	f002 fc26 	bl	8004454 <ssd1306_WriteString>

					ssd1306_UpdateScreen();
 8001c08:	f002 fb20 	bl	800424c <ssd1306_UpdateScreen>
					dirty = 0;
 8001c0c:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <main+0x8a4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
 8001c12:	e459      	b.n	80014c8 <main+0x140>
 8001c14:	200006f8 	.word	0x200006f8
 8001c18:	200006fe 	.word	0x200006fe
 8001c1c:	66666667 	.word	0x66666667
 8001c20:	20000018 	.word	0x20000018
 8001c24:	200003e4 	.word	0x200003e4
 8001c28:	200006fa 	.word	0x200006fa
 8001c2c:	200006fb 	.word	0x200006fb
 8001c30:	200006f9 	.word	0x200006f9
 8001c34:	20000534 	.word	0x20000534
 8001c38:	20000264 	.word	0x20000264
 8001c3c:	40240000 	.word	0x40240000
 8001c40:	42480000 	.word	0x42480000
 8001c44:	20000540 	.word	0x20000540
 8001c48:	20000040 	.word	0x20000040
 8001c4c:	0800d4e8 	.word	0x0800d4e8
 8001c50:	0800d4fc 	.word	0x0800d4fc
 8001c54:	0800d510 	.word	0x0800d510
 8001c58:	0800d524 	.word	0x0800d524
				}
			}

			else if (status == 4) {
 8001c5c:	4bcb      	ldr	r3, [pc, #812]	; (8001f8c <main+0xc04>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	f040 832c 	bne.w	80022be <main+0xf36>
				if (dirty)
 8001c66:	4bca      	ldr	r3, [pc, #808]	; (8001f90 <main+0xc08>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d013      	beq.n	8001c96 <main+0x90e>
				{
					ssd1306_Init();
 8001c6e:	f002 fa5f 	bl	8004130 <ssd1306_Init>
					ssd1306_SetCursor(2,2);
 8001c72:	2102      	movs	r1, #2
 8001c74:	2002      	movs	r0, #2
 8001c76:	f002 fc13 	bl	80044a0 <ssd1306_SetCursor>
					output = ssd1306_WriteString("PET FEEDER STATUS ", Font_7x10, White);
 8001c7a:	4ac6      	ldr	r2, [pc, #792]	; (8001f94 <main+0xc0c>)
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	ca06      	ldmia	r2, {r1, r2}
 8001c80:	48c5      	ldr	r0, [pc, #788]	; (8001f98 <main+0xc10>)
 8001c82:	f002 fbe7 	bl	8004454 <ssd1306_WriteString>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					ssd1306_UpdateScreen();
 8001c8c:	f002 fade 	bl	800424c <ssd1306_UpdateScreen>
					dirty = 0;
 8001c90:	4bbf      	ldr	r3, [pc, #764]	; (8001f90 <main+0xc08>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]
				}


				pet_weight[2] = pet_weight[1];
 8001c96:	4bc1      	ldr	r3, [pc, #772]	; (8001f9c <main+0xc14>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	4ac0      	ldr	r2, [pc, #768]	; (8001f9c <main+0xc14>)
 8001c9c:	6093      	str	r3, [r2, #8]
				pet_weight[1] = pet_weight[0];
 8001c9e:	4bbf      	ldr	r3, [pc, #764]	; (8001f9c <main+0xc14>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4abe      	ldr	r2, [pc, #760]	; (8001f9c <main+0xc14>)
 8001ca4:	6053      	str	r3, [r2, #4]
				pet_weight[0] = get_weight(&pet, 10, CHANNEL_A); //get weight
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	210a      	movs	r1, #10
 8001caa:	48bd      	ldr	r0, [pc, #756]	; (8001fa0 <main+0xc18>)
 8001cac:	f7ff fb30 	bl	8001310 <get_weight>
 8001cb0:	eef0 7a40 	vmov.f32	s15, s0
 8001cb4:	4bb9      	ldr	r3, [pc, #740]	; (8001f9c <main+0xc14>)
 8001cb6:	edc3 7a00 	vstr	s15, [r3]
				float average = (pet_weight[2] + pet_weight[1] + pet_weight[0]) / 3.0;
 8001cba:	4bb8      	ldr	r3, [pc, #736]	; (8001f9c <main+0xc14>)
 8001cbc:	ed93 7a02 	vldr	s14, [r3, #8]
 8001cc0:	4bb6      	ldr	r3, [pc, #728]	; (8001f9c <main+0xc14>)
 8001cc2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cca:	4bb4      	ldr	r3, [pc, #720]	; (8001f9c <main+0xc14>)
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
 8001cd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cd4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001cd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cdc:	edc7 7a08 	vstr	s15, [r7, #32]
				if (((abs(pet_weight[2] - average)+abs(pet_weight[1] - average)+abs(pet_weight[0] - average)) < (average / 10.0)) && average > 50)
 8001ce0:	4bae      	ldr	r3, [pc, #696]	; (8001f9c <main+0xc14>)
 8001ce2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ce6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cf2:	ee17 3a90 	vmov	r3, s15
 8001cf6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001cfa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001cfe:	4ba7      	ldr	r3, [pc, #668]	; (8001f9c <main+0xc14>)
 8001d00:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d04:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d10:	ee17 3a90 	vmov	r3, s15
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	bfb8      	it	lt
 8001d18:	425b      	neglt	r3, r3
 8001d1a:	441a      	add	r2, r3
 8001d1c:	4b9f      	ldr	r3, [pc, #636]	; (8001f9c <main+0xc14>)
 8001d1e:	ed93 7a00 	vldr	s14, [r3]
 8001d22:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d2e:	ee17 3a90 	vmov	r3, s15
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	bfb8      	it	lt
 8001d36:	425b      	neglt	r3, r3
 8001d38:	4413      	add	r3, r2
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fc0a 	bl	8000554 <__aeabi_i2d>
 8001d40:	4604      	mov	r4, r0
 8001d42:	460d      	mov	r5, r1
 8001d44:	6a38      	ldr	r0, [r7, #32]
 8001d46:	f7fe fc17 	bl	8000578 <__aeabi_f2d>
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	4b95      	ldr	r3, [pc, #596]	; (8001fa4 <main+0xc1c>)
 8001d50:	f7fe fd94 	bl	800087c <__aeabi_ddiv>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4620      	mov	r0, r4
 8001d5a:	4629      	mov	r1, r5
 8001d5c:	f7fe fed6 	bl	8000b0c <__aeabi_dcmplt>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d029      	beq.n	8001dba <main+0xa32>
 8001d66:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d6a:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8001fa8 <main+0xc20>
 8001d6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d76:	dd20      	ble.n	8001dba <main+0xa32>
					petweight = floor(pet_weight[1]*10)/10.0;
 8001d78:	4b88      	ldr	r3, [pc, #544]	; (8001f9c <main+0xc14>)
 8001d7a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d7e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d86:	ee17 0a90 	vmov	r0, s15
 8001d8a:	f7fe fbf5 	bl	8000578 <__aeabi_f2d>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	ec43 2b10 	vmov	d0, r2, r3
 8001d96:	f00b faaf 	bl	800d2f8 <floor>
 8001d9a:	ec51 0b10 	vmov	r0, r1, d0
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	4b80      	ldr	r3, [pc, #512]	; (8001fa4 <main+0xc1c>)
 8001da4:	f7fe fd6a 	bl	800087c <__aeabi_ddiv>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	f7fe ff12 	bl	8000bd8 <__aeabi_d2f>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4a7d      	ldr	r2, [pc, #500]	; (8001fac <main+0xc24>)
 8001db8:	6013      	str	r3, [r2, #0]



				if (disPage == 0)
 8001dba:	4b7d      	ldr	r3, [pc, #500]	; (8001fb0 <main+0xc28>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f040 8108 	bne.w	8001fd4 <main+0xc4c>
				{
					float food_weight = floor(get_weight(&food, 10, CHANNEL_A) * 10) / 10.0; //get weight
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	210a      	movs	r1, #10
 8001dc8:	487a      	ldr	r0, [pc, #488]	; (8001fb4 <main+0xc2c>)
 8001dca:	f7ff faa1 	bl	8001310 <get_weight>
 8001dce:	eef0 7a40 	vmov.f32	s15, s0
 8001dd2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dda:	ee17 0a90 	vmov	r0, s15
 8001dde:	f7fe fbcb 	bl	8000578 <__aeabi_f2d>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	ec43 2b10 	vmov	d0, r2, r3
 8001dea:	f00b fa85 	bl	800d2f8 <floor>
 8001dee:	ec51 0b10 	vmov	r0, r1, d0
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	4b6b      	ldr	r3, [pc, #428]	; (8001fa4 <main+0xc1c>)
 8001df8:	f7fe fd40 	bl	800087c <__aeabi_ddiv>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	f7fe fee8 	bl	8000bd8 <__aeabi_d2f>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	61fb      	str	r3, [r7, #28]
					float water_weight = floor(get_weight(&water, 10, CHANNEL_A) * 10) / 10.0; //get weight
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	210a      	movs	r1, #10
 8001e10:	4869      	ldr	r0, [pc, #420]	; (8001fb8 <main+0xc30>)
 8001e12:	f7ff fa7d 	bl	8001310 <get_weight>
 8001e16:	eef0 7a40 	vmov.f32	s15, s0
 8001e1a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e22:	ee17 0a90 	vmov	r0, s15
 8001e26:	f7fe fba7 	bl	8000578 <__aeabi_f2d>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	ec43 2b10 	vmov	d0, r2, r3
 8001e32:	f00b fa61 	bl	800d2f8 <floor>
 8001e36:	ec51 0b10 	vmov	r0, r1, d0
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	4b59      	ldr	r3, [pc, #356]	; (8001fa4 <main+0xc1c>)
 8001e40:	f7fe fd1c 	bl	800087c <__aeabi_ddiv>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f7fe fec4 	bl	8000bd8 <__aeabi_d2f>
 8001e50:	4603      	mov	r3, r0
 8001e52:	61bb      	str	r3, [r7, #24]
					gcvt(food_weight, 6, buf);
 8001e54:	69f8      	ldr	r0, [r7, #28]
 8001e56:	f7fe fb8f 	bl	8000578 <__aeabi_f2d>
 8001e5a:	4604      	mov	r4, r0
 8001e5c:	460d      	mov	r5, r1
 8001e5e:	463b      	mov	r3, r7
 8001e60:	4619      	mov	r1, r3
 8001e62:	2006      	movs	r0, #6
 8001e64:	ec45 4b10 	vmov	d0, r4, r5
 8001e68:	f008 fb02 	bl	800a470 <gcvt>
					ssd1306_SetCursor(2,16);
 8001e6c:	2110      	movs	r1, #16
 8001e6e:	2002      	movs	r0, #2
 8001e70:	f002 fb16 	bl	80044a0 <ssd1306_SetCursor>
					output = ssd1306_WriteString("Food: ", Font_7x10, White);
 8001e74:	4a47      	ldr	r2, [pc, #284]	; (8001f94 <main+0xc0c>)
 8001e76:	2301      	movs	r3, #1
 8001e78:	ca06      	ldmia	r2, {r1, r2}
 8001e7a:	4850      	ldr	r0, [pc, #320]	; (8001fbc <main+0xc34>)
 8001e7c:	f002 faea 	bl	8004454 <ssd1306_WriteString>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					output = ssd1306_WriteString(buf, Font_7x10, White);
 8001e86:	4a43      	ldr	r2, [pc, #268]	; (8001f94 <main+0xc0c>)
 8001e88:	4638      	mov	r0, r7
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	ca06      	ldmia	r2, {r1, r2}
 8001e8e:	f002 fae1 	bl	8004454 <ssd1306_WriteString>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					output = ssd1306_WriteString(" g            ", Font_7x10, White);
 8001e98:	4a3e      	ldr	r2, [pc, #248]	; (8001f94 <main+0xc0c>)
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	ca06      	ldmia	r2, {r1, r2}
 8001e9e:	4848      	ldr	r0, [pc, #288]	; (8001fc0 <main+0xc38>)
 8001ea0:	f002 fad8 	bl	8004454 <ssd1306_WriteString>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					gcvt(water_weight, 6, buf);
 8001eaa:	69b8      	ldr	r0, [r7, #24]
 8001eac:	f7fe fb64 	bl	8000578 <__aeabi_f2d>
 8001eb0:	4604      	mov	r4, r0
 8001eb2:	460d      	mov	r5, r1
 8001eb4:	463b      	mov	r3, r7
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	2006      	movs	r0, #6
 8001eba:	ec45 4b10 	vmov	d0, r4, r5
 8001ebe:	f008 fad7 	bl	800a470 <gcvt>
					ssd1306_SetCursor(2,28);
 8001ec2:	211c      	movs	r1, #28
 8001ec4:	2002      	movs	r0, #2
 8001ec6:	f002 faeb 	bl	80044a0 <ssd1306_SetCursor>
					output = ssd1306_WriteString("Water: ", Font_7x10, White);
 8001eca:	4a32      	ldr	r2, [pc, #200]	; (8001f94 <main+0xc0c>)
 8001ecc:	2301      	movs	r3, #1
 8001ece:	ca06      	ldmia	r2, {r1, r2}
 8001ed0:	483c      	ldr	r0, [pc, #240]	; (8001fc4 <main+0xc3c>)
 8001ed2:	f002 fabf 	bl	8004454 <ssd1306_WriteString>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					output = ssd1306_WriteString(buf, Font_7x10, White);
 8001edc:	4a2d      	ldr	r2, [pc, #180]	; (8001f94 <main+0xc0c>)
 8001ede:	4638      	mov	r0, r7
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	ca06      	ldmia	r2, {r1, r2}
 8001ee4:	f002 fab6 	bl	8004454 <ssd1306_WriteString>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					output = ssd1306_WriteString(" g            ", Font_7x10, White);
 8001eee:	4a29      	ldr	r2, [pc, #164]	; (8001f94 <main+0xc0c>)
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	ca06      	ldmia	r2, {r1, r2}
 8001ef4:	4832      	ldr	r0, [pc, #200]	; (8001fc0 <main+0xc38>)
 8001ef6:	f002 faad 	bl	8004454 <ssd1306_WriteString>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					gcvt(petweight, 6, buf);
 8001f00:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <main+0xc24>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe fb37 	bl	8000578 <__aeabi_f2d>
 8001f0a:	4604      	mov	r4, r0
 8001f0c:	460d      	mov	r5, r1
 8001f0e:	463b      	mov	r3, r7
 8001f10:	4619      	mov	r1, r3
 8001f12:	2006      	movs	r0, #6
 8001f14:	ec45 4b10 	vmov	d0, r4, r5
 8001f18:	f008 faaa 	bl	800a470 <gcvt>
					ssd1306_SetCursor(2,40);
 8001f1c:	2128      	movs	r1, #40	; 0x28
 8001f1e:	2002      	movs	r0, #2
 8001f20:	f002 fabe 	bl	80044a0 <ssd1306_SetCursor>
					output = ssd1306_WriteString("Pet: ", Font_7x10, White);
 8001f24:	4a1b      	ldr	r2, [pc, #108]	; (8001f94 <main+0xc0c>)
 8001f26:	2301      	movs	r3, #1
 8001f28:	ca06      	ldmia	r2, {r1, r2}
 8001f2a:	4827      	ldr	r0, [pc, #156]	; (8001fc8 <main+0xc40>)
 8001f2c:	f002 fa92 	bl	8004454 <ssd1306_WriteString>
 8001f30:	4603      	mov	r3, r0
 8001f32:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					output = ssd1306_WriteString(buf, Font_7x10, White);
 8001f36:	4a17      	ldr	r2, [pc, #92]	; (8001f94 <main+0xc0c>)
 8001f38:	4638      	mov	r0, r7
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	ca06      	ldmia	r2, {r1, r2}
 8001f3e:	f002 fa89 	bl	8004454 <ssd1306_WriteString>
 8001f42:	4603      	mov	r3, r0
 8001f44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					output = ssd1306_WriteString(" g            ", Font_7x10, White);
 8001f48:	4a12      	ldr	r2, [pc, #72]	; (8001f94 <main+0xc0c>)
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	ca06      	ldmia	r2, {r1, r2}
 8001f4e:	481c      	ldr	r0, [pc, #112]	; (8001fc0 <main+0xc38>)
 8001f50:	f002 fa80 	bl	8004454 <ssd1306_WriteString>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					gcvt(AHT10_Temperature, 3, buf);
 8001f5a:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <main+0xc44>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fb0a 	bl	8000578 <__aeabi_f2d>
 8001f64:	4604      	mov	r4, r0
 8001f66:	460d      	mov	r5, r1
 8001f68:	463b      	mov	r3, r7
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	2003      	movs	r0, #3
 8001f6e:	ec45 4b10 	vmov	d0, r4, r5
 8001f72:	f008 fa7d 	bl	800a470 <gcvt>
					ssd1306_SetCursor(2,52);
 8001f76:	2134      	movs	r1, #52	; 0x34
 8001f78:	2002      	movs	r0, #2
 8001f7a:	f002 fa91 	bl	80044a0 <ssd1306_SetCursor>
					ssd1306_WriteString("ENTER-Next Page", Font_7x10, White);
 8001f7e:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <main+0xc0c>)
 8001f80:	2301      	movs	r3, #1
 8001f82:	ca06      	ldmia	r2, {r1, r2}
 8001f84:	4812      	ldr	r0, [pc, #72]	; (8001fd0 <main+0xc48>)
 8001f86:	f002 fa65 	bl	8004454 <ssd1306_WriteString>
 8001f8a:	e194      	b.n	80022b6 <main+0xf2e>
 8001f8c:	200006fa 	.word	0x200006fa
 8001f90:	200006fb 	.word	0x200006fb
 8001f94:	20000040 	.word	0x20000040
 8001f98:	0800d534 	.word	0x0800d534
 8001f9c:	20000534 	.word	0x20000534
 8001fa0:	20000264 	.word	0x20000264
 8001fa4:	40240000 	.word	0x40240000
 8001fa8:	42480000 	.word	0x42480000
 8001fac:	20000540 	.word	0x20000540
 8001fb0:	200006fd 	.word	0x200006fd
 8001fb4:	20000240 	.word	0x20000240
 8001fb8:	20000288 	.word	0x20000288
 8001fbc:	0800d548 	.word	0x0800d548
 8001fc0:	0800d550 	.word	0x0800d550
 8001fc4:	0800d560 	.word	0x0800d560
 8001fc8:	0800d568 	.word	0x0800d568
 8001fcc:	2000052c 	.word	0x2000052c
 8001fd0:	0800d570 	.word	0x0800d570
				}
				else if (disPage == 1)
 8001fd4:	4bc5      	ldr	r3, [pc, #788]	; (80022ec <main+0xf64>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	f040 8108 	bne.w	80021ee <main+0xe66>
				{
					HAL_I2C_Master_Transmit(&hi2c1, AHT10_Adress, &AHT10_TmpHum_Cmd, 1, 100);
 8001fde:	2364      	movs	r3, #100	; 0x64
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	4ac2      	ldr	r2, [pc, #776]	; (80022f0 <main+0xf68>)
 8001fe6:	2170      	movs	r1, #112	; 0x70
 8001fe8:	48c2      	ldr	r0, [pc, #776]	; (80022f4 <main+0xf6c>)
 8001fea:	f003 fcc9 	bl	8005980 <HAL_I2C_Master_Transmit>
					HAL_Delay(1000);
 8001fee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ff2:	f002 feb3 	bl	8004d5c <HAL_Delay>
					HAL_I2C_Master_Receive(&hi2c1, AHT10_Adress, (uint8_t*)AHT10_RX_Data, 6, 100);
 8001ff6:	2364      	movs	r3, #100	; 0x64
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	2306      	movs	r3, #6
 8001ffc:	4abe      	ldr	r2, [pc, #760]	; (80022f8 <main+0xf70>)
 8001ffe:	2170      	movs	r1, #112	; 0x70
 8002000:	48bc      	ldr	r0, [pc, #752]	; (80022f4 <main+0xf6c>)
 8002002:	f003 fdb1 	bl	8005b68 <HAL_I2C_Master_Receive>
					/* Convert to Temperature in °C */
					AHT10_ADC_Raw = (((uint32_t)AHT10_RX_Data[3] & 15) << 16) | ((uint32_t)AHT10_RX_Data[4] << 8) | AHT10_RX_Data[5];
 8002006:	4bbc      	ldr	r3, [pc, #752]	; (80022f8 <main+0xf70>)
 8002008:	78db      	ldrb	r3, [r3, #3]
 800200a:	041b      	lsls	r3, r3, #16
 800200c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8002010:	4bb9      	ldr	r3, [pc, #740]	; (80022f8 <main+0xf70>)
 8002012:	791b      	ldrb	r3, [r3, #4]
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	4313      	orrs	r3, r2
 8002018:	4ab7      	ldr	r2, [pc, #732]	; (80022f8 <main+0xf70>)
 800201a:	7952      	ldrb	r2, [r2, #5]
 800201c:	4313      	orrs	r3, r2
 800201e:	4ab7      	ldr	r2, [pc, #732]	; (80022fc <main+0xf74>)
 8002020:	6013      	str	r3, [r2, #0]
					AHT10_Temperature = (float)floor(((AHT10_ADC_Raw * 200.00 / 1048576.00) - 50.00) * 10) / 10.0;
 8002022:	4bb6      	ldr	r3, [pc, #728]	; (80022fc <main+0xf74>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fa84 	bl	8000534 <__aeabi_ui2d>
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	4bb3      	ldr	r3, [pc, #716]	; (8002300 <main+0xf78>)
 8002032:	f7fe faf9 	bl	8000628 <__aeabi_dmul>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	4bb0      	ldr	r3, [pc, #704]	; (8002304 <main+0xf7c>)
 8002044:	f7fe fc1a 	bl	800087c <__aeabi_ddiv>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4610      	mov	r0, r2
 800204e:	4619      	mov	r1, r3
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	4bac      	ldr	r3, [pc, #688]	; (8002308 <main+0xf80>)
 8002056:	f7fe f92f 	bl	80002b8 <__aeabi_dsub>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	4610      	mov	r0, r2
 8002060:	4619      	mov	r1, r3
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	4ba9      	ldr	r3, [pc, #676]	; (800230c <main+0xf84>)
 8002068:	f7fe fade 	bl	8000628 <__aeabi_dmul>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	ec43 2b17 	vmov	d7, r2, r3
 8002074:	eeb0 0a47 	vmov.f32	s0, s14
 8002078:	eef0 0a67 	vmov.f32	s1, s15
 800207c:	f00b f93c 	bl	800d2f8 <floor>
 8002080:	ec53 2b10 	vmov	r2, r3, d0
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	f7fe fda6 	bl	8000bd8 <__aeabi_d2f>
 800208c:	ee06 0a90 	vmov	s13, r0
 8002090:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002098:	4b9d      	ldr	r3, [pc, #628]	; (8002310 <main+0xf88>)
 800209a:	edc3 7a00 	vstr	s15, [r3]
					AHT10_ADC_Raw = ((uint32_t)AHT10_RX_Data[1] << 12) | ((uint32_t)AHT10_RX_Data[2] << 4) | (AHT10_RX_Data[3] >> 4);
 800209e:	4b96      	ldr	r3, [pc, #600]	; (80022f8 <main+0xf70>)
 80020a0:	785b      	ldrb	r3, [r3, #1]
 80020a2:	031a      	lsls	r2, r3, #12
 80020a4:	4b94      	ldr	r3, [pc, #592]	; (80022f8 <main+0xf70>)
 80020a6:	789b      	ldrb	r3, [r3, #2]
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	4313      	orrs	r3, r2
 80020ac:	4a92      	ldr	r2, [pc, #584]	; (80022f8 <main+0xf70>)
 80020ae:	78d2      	ldrb	r2, [r2, #3]
 80020b0:	0912      	lsrs	r2, r2, #4
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	4313      	orrs	r3, r2
 80020b6:	4a91      	ldr	r2, [pc, #580]	; (80022fc <main+0xf74>)
 80020b8:	6013      	str	r3, [r2, #0]
					AHT10_Humidity = (float)floor((AHT10_ADC_Raw*100.00/1048576.00) * 10) / 10.0;
 80020ba:	4b90      	ldr	r3, [pc, #576]	; (80022fc <main+0xf74>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fa38 	bl	8000534 <__aeabi_ui2d>
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	4b92      	ldr	r3, [pc, #584]	; (8002314 <main+0xf8c>)
 80020ca:	f7fe faad 	bl	8000628 <__aeabi_dmul>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4610      	mov	r0, r2
 80020d4:	4619      	mov	r1, r3
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	4b8a      	ldr	r3, [pc, #552]	; (8002304 <main+0xf7c>)
 80020dc:	f7fe fbce 	bl	800087c <__aeabi_ddiv>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4610      	mov	r0, r2
 80020e6:	4619      	mov	r1, r3
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	4b87      	ldr	r3, [pc, #540]	; (800230c <main+0xf84>)
 80020ee:	f7fe fa9b 	bl	8000628 <__aeabi_dmul>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	ec43 2b17 	vmov	d7, r2, r3
 80020fa:	eeb0 0a47 	vmov.f32	s0, s14
 80020fe:	eef0 0a67 	vmov.f32	s1, s15
 8002102:	f00b f8f9 	bl	800d2f8 <floor>
 8002106:	ec53 2b10 	vmov	r2, r3, d0
 800210a:	4610      	mov	r0, r2
 800210c:	4619      	mov	r1, r3
 800210e:	f7fe fd63 	bl	8000bd8 <__aeabi_d2f>
 8002112:	ee06 0a90 	vmov	s13, r0
 8002116:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800211a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800211e:	4b7e      	ldr	r3, [pc, #504]	; (8002318 <main+0xf90>)
 8002120:	edc3 7a00 	vstr	s15, [r3]
					gcvt(AHT10_Temperature, 3, buf);
 8002124:	4b7a      	ldr	r3, [pc, #488]	; (8002310 <main+0xf88>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fa25 	bl	8000578 <__aeabi_f2d>
 800212e:	4604      	mov	r4, r0
 8002130:	460d      	mov	r5, r1
 8002132:	463b      	mov	r3, r7
 8002134:	4619      	mov	r1, r3
 8002136:	2003      	movs	r0, #3
 8002138:	ec45 4b10 	vmov	d0, r4, r5
 800213c:	f008 f998 	bl	800a470 <gcvt>
					ssd1306_SetCursor(2,16);
 8002140:	2110      	movs	r1, #16
 8002142:	2002      	movs	r0, #2
 8002144:	f002 f9ac 	bl	80044a0 <ssd1306_SetCursor>
					output = ssd1306_WriteString("Temp: ", Font_7x10, White);
 8002148:	4a74      	ldr	r2, [pc, #464]	; (800231c <main+0xf94>)
 800214a:	2301      	movs	r3, #1
 800214c:	ca06      	ldmia	r2, {r1, r2}
 800214e:	4874      	ldr	r0, [pc, #464]	; (8002320 <main+0xf98>)
 8002150:	f002 f980 	bl	8004454 <ssd1306_WriteString>
 8002154:	4603      	mov	r3, r0
 8002156:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					output = ssd1306_WriteString(buf, Font_7x10, White);
 800215a:	4a70      	ldr	r2, [pc, #448]	; (800231c <main+0xf94>)
 800215c:	4638      	mov	r0, r7
 800215e:	2301      	movs	r3, #1
 8002160:	ca06      	ldmia	r2, {r1, r2}
 8002162:	f002 f977 	bl	8004454 <ssd1306_WriteString>
 8002166:	4603      	mov	r3, r0
 8002168:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					output = ssd1306_WriteString(" C             ", Font_7x10, White);
 800216c:	4a6b      	ldr	r2, [pc, #428]	; (800231c <main+0xf94>)
 800216e:	2301      	movs	r3, #1
 8002170:	ca06      	ldmia	r2, {r1, r2}
 8002172:	486c      	ldr	r0, [pc, #432]	; (8002324 <main+0xf9c>)
 8002174:	f002 f96e 	bl	8004454 <ssd1306_WriteString>
 8002178:	4603      	mov	r3, r0
 800217a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					gcvt(AHT10_Humidity, 3, buf);
 800217e:	4b66      	ldr	r3, [pc, #408]	; (8002318 <main+0xf90>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe f9f8 	bl	8000578 <__aeabi_f2d>
 8002188:	4604      	mov	r4, r0
 800218a:	460d      	mov	r5, r1
 800218c:	463b      	mov	r3, r7
 800218e:	4619      	mov	r1, r3
 8002190:	2003      	movs	r0, #3
 8002192:	ec45 4b10 	vmov	d0, r4, r5
 8002196:	f008 f96b 	bl	800a470 <gcvt>
					ssd1306_SetCursor(2,28);
 800219a:	211c      	movs	r1, #28
 800219c:	2002      	movs	r0, #2
 800219e:	f002 f97f 	bl	80044a0 <ssd1306_SetCursor>
					output = ssd1306_WriteString("Humidity: ", Font_7x10, White);
 80021a2:	4a5e      	ldr	r2, [pc, #376]	; (800231c <main+0xf94>)
 80021a4:	2301      	movs	r3, #1
 80021a6:	ca06      	ldmia	r2, {r1, r2}
 80021a8:	485f      	ldr	r0, [pc, #380]	; (8002328 <main+0xfa0>)
 80021aa:	f002 f953 	bl	8004454 <ssd1306_WriteString>
 80021ae:	4603      	mov	r3, r0
 80021b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					output = ssd1306_WriteString(buf, Font_7x10, White);
 80021b4:	4a59      	ldr	r2, [pc, #356]	; (800231c <main+0xf94>)
 80021b6:	4638      	mov	r0, r7
 80021b8:	2301      	movs	r3, #1
 80021ba:	ca06      	ldmia	r2, {r1, r2}
 80021bc:	f002 f94a 	bl	8004454 <ssd1306_WriteString>
 80021c0:	4603      	mov	r3, r0
 80021c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					output = ssd1306_WriteString(" %            ", Font_7x10, White);
 80021c6:	4a55      	ldr	r2, [pc, #340]	; (800231c <main+0xf94>)
 80021c8:	2301      	movs	r3, #1
 80021ca:	ca06      	ldmia	r2, {r1, r2}
 80021cc:	4857      	ldr	r0, [pc, #348]	; (800232c <main+0xfa4>)
 80021ce:	f002 f941 	bl	8004454 <ssd1306_WriteString>
 80021d2:	4603      	mov	r3, r0
 80021d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					ssd1306_SetCursor(2,52);
 80021d8:	2134      	movs	r1, #52	; 0x34
 80021da:	2002      	movs	r0, #2
 80021dc:	f002 f960 	bl	80044a0 <ssd1306_SetCursor>
					ssd1306_WriteString("ENTER-Next Page", Font_7x10, White);
 80021e0:	4a4e      	ldr	r2, [pc, #312]	; (800231c <main+0xf94>)
 80021e2:	2301      	movs	r3, #1
 80021e4:	ca06      	ldmia	r2, {r1, r2}
 80021e6:	4852      	ldr	r0, [pc, #328]	; (8002330 <main+0xfa8>)
 80021e8:	f002 f934 	bl	8004454 <ssd1306_WriteString>
 80021ec:	e063      	b.n	80022b6 <main+0xf2e>
				}
				else if (disPage == 2)
 80021ee:	4b3f      	ldr	r3, [pc, #252]	; (80022ec <main+0xf64>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d15f      	bne.n	80022b6 <main+0xf2e>
				{
					gcvt(foodFresh, 4, buf);
 80021f6:	4b4f      	ldr	r3, [pc, #316]	; (8002334 <main+0xfac>)
 80021f8:	ed93 7b00 	vldr	d7, [r3]
 80021fc:	463b      	mov	r3, r7
 80021fe:	4619      	mov	r1, r3
 8002200:	2004      	movs	r0, #4
 8002202:	eeb0 0a47 	vmov.f32	s0, s14
 8002206:	eef0 0a67 	vmov.f32	s1, s15
 800220a:	f008 f931 	bl	800a470 <gcvt>
					ssd1306_SetCursor(2,16);
 800220e:	2110      	movs	r1, #16
 8002210:	2002      	movs	r0, #2
 8002212:	f002 f945 	bl	80044a0 <ssd1306_SetCursor>
					output = ssd1306_WriteString("Food Fresh:", Font_6x8, White);
 8002216:	4a48      	ldr	r2, [pc, #288]	; (8002338 <main+0xfb0>)
 8002218:	2301      	movs	r3, #1
 800221a:	ca06      	ldmia	r2, {r1, r2}
 800221c:	4847      	ldr	r0, [pc, #284]	; (800233c <main+0xfb4>)
 800221e:	f002 f919 	bl	8004454 <ssd1306_WriteString>
 8002222:	4603      	mov	r3, r0
 8002224:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					output = ssd1306_WriteString(buf, Font_7x10, White);
 8002228:	4a3c      	ldr	r2, [pc, #240]	; (800231c <main+0xf94>)
 800222a:	4638      	mov	r0, r7
 800222c:	2301      	movs	r3, #1
 800222e:	ca06      	ldmia	r2, {r1, r2}
 8002230:	f002 f910 	bl	8004454 <ssd1306_WriteString>
 8002234:	4603      	mov	r3, r0
 8002236:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					output = ssd1306_WriteString(" %             ", Font_7x10, White);
 800223a:	4a38      	ldr	r2, [pc, #224]	; (800231c <main+0xf94>)
 800223c:	2301      	movs	r3, #1
 800223e:	ca06      	ldmia	r2, {r1, r2}
 8002240:	483f      	ldr	r0, [pc, #252]	; (8002340 <main+0xfb8>)
 8002242:	f002 f907 	bl	8004454 <ssd1306_WriteString>
 8002246:	4603      	mov	r3, r0
 8002248:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					gcvt(waterFresh, 4, buf);
 800224c:	4b3d      	ldr	r3, [pc, #244]	; (8002344 <main+0xfbc>)
 800224e:	ed93 7b00 	vldr	d7, [r3]
 8002252:	463b      	mov	r3, r7
 8002254:	4619      	mov	r1, r3
 8002256:	2004      	movs	r0, #4
 8002258:	eeb0 0a47 	vmov.f32	s0, s14
 800225c:	eef0 0a67 	vmov.f32	s1, s15
 8002260:	f008 f906 	bl	800a470 <gcvt>
					ssd1306_SetCursor(2,28);
 8002264:	211c      	movs	r1, #28
 8002266:	2002      	movs	r0, #2
 8002268:	f002 f91a 	bl	80044a0 <ssd1306_SetCursor>
					output = ssd1306_WriteString("Water Fresh:", Font_6x8, White);
 800226c:	4a32      	ldr	r2, [pc, #200]	; (8002338 <main+0xfb0>)
 800226e:	2301      	movs	r3, #1
 8002270:	ca06      	ldmia	r2, {r1, r2}
 8002272:	4835      	ldr	r0, [pc, #212]	; (8002348 <main+0xfc0>)
 8002274:	f002 f8ee 	bl	8004454 <ssd1306_WriteString>
 8002278:	4603      	mov	r3, r0
 800227a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					output = ssd1306_WriteString(buf, Font_7x10, White);
 800227e:	4a27      	ldr	r2, [pc, #156]	; (800231c <main+0xf94>)
 8002280:	4638      	mov	r0, r7
 8002282:	2301      	movs	r3, #1
 8002284:	ca06      	ldmia	r2, {r1, r2}
 8002286:	f002 f8e5 	bl	8004454 <ssd1306_WriteString>
 800228a:	4603      	mov	r3, r0
 800228c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					output = ssd1306_WriteString(" %            ", Font_7x10, White);
 8002290:	4a22      	ldr	r2, [pc, #136]	; (800231c <main+0xf94>)
 8002292:	2301      	movs	r3, #1
 8002294:	ca06      	ldmia	r2, {r1, r2}
 8002296:	4825      	ldr	r0, [pc, #148]	; (800232c <main+0xfa4>)
 8002298:	f002 f8dc 	bl	8004454 <ssd1306_WriteString>
 800229c:	4603      	mov	r3, r0
 800229e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					ssd1306_SetCursor(2,52);
 80022a2:	2134      	movs	r1, #52	; 0x34
 80022a4:	2002      	movs	r0, #2
 80022a6:	f002 f8fb 	bl	80044a0 <ssd1306_SetCursor>
					ssd1306_WriteString("ENTER-Next Page", Font_7x10, White);
 80022aa:	4a1c      	ldr	r2, [pc, #112]	; (800231c <main+0xf94>)
 80022ac:	2301      	movs	r3, #1
 80022ae:	ca06      	ldmia	r2, {r1, r2}
 80022b0:	481f      	ldr	r0, [pc, #124]	; (8002330 <main+0xfa8>)
 80022b2:	f002 f8cf 	bl	8004454 <ssd1306_WriteString>
				}
				ssd1306_UpdateScreen();
 80022b6:	f001 ffc9 	bl	800424c <ssd1306_UpdateScreen>
 80022ba:	f7ff b905 	b.w	80014c8 <main+0x140>
			}

			else if (status == 1) {
 80022be:	4b23      	ldr	r3, [pc, #140]	; (800234c <main+0xfc4>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d107      	bne.n	80022d6 <main+0xf4e>
				release_food(tim4_ccr2);
 80022c6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80022c8:	f001 fbfa 	bl	8003ac0 <release_food>
				status = 0;
 80022cc:	4b1f      	ldr	r3, [pc, #124]	; (800234c <main+0xfc4>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
 80022d2:	f7ff b8f9 	b.w	80014c8 <main+0x140>
			}

			else if (status == 2) {
 80022d6:	4b1d      	ldr	r3, [pc, #116]	; (800234c <main+0xfc4>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d138      	bne.n	8002350 <main+0xfc8>
				release_water();
 80022de:	f001 fc99 	bl	8003c14 <release_water>
				status = 0;
 80022e2:	4b1a      	ldr	r3, [pc, #104]	; (800234c <main+0xfc4>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
 80022e8:	f7ff b8ee 	b.w	80014c8 <main+0x140>
 80022ec:	200006fd 	.word	0x200006fd
 80022f0:	20000000 	.word	0x20000000
 80022f4:	200002ac 	.word	0x200002ac
 80022f8:	20000520 	.word	0x20000520
 80022fc:	20000528 	.word	0x20000528
 8002300:	40690000 	.word	0x40690000
 8002304:	41300000 	.word	0x41300000
 8002308:	40490000 	.word	0x40490000
 800230c:	40240000 	.word	0x40240000
 8002310:	2000052c 	.word	0x2000052c
 8002314:	40590000 	.word	0x40590000
 8002318:	20000530 	.word	0x20000530
 800231c:	20000040 	.word	0x20000040
 8002320:	0800d580 	.word	0x0800d580
 8002324:	0800d588 	.word	0x0800d588
 8002328:	0800d598 	.word	0x0800d598
 800232c:	0800d5a4 	.word	0x0800d5a4
 8002330:	0800d570 	.word	0x0800d570
 8002334:	20000008 	.word	0x20000008
 8002338:	20000038 	.word	0x20000038
 800233c:	0800d5b4 	.word	0x0800d5b4
 8002340:	0800d5c0 	.word	0x0800d5c0
 8002344:	20000010 	.word	0x20000010
 8002348:	0800d5d0 	.word	0x0800d5d0
 800234c:	200006fa 	.word	0x200006fa
			}

			else if (status == 3){
 8002350:	4b76      	ldr	r3, [pc, #472]	; (800252c <main+0x11a4>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b03      	cmp	r3, #3
 8002356:	f040 8101 	bne.w	800255c <main+0x11d4>
				if(dirty)
 800235a:	4b75      	ldr	r3, [pc, #468]	; (8002530 <main+0x11a8>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d004      	beq.n	800236c <main+0xfe4>
				{
					ssd1306_Init();
 8002362:	f001 fee5 	bl	8004130 <ssd1306_Init>
					dirty = 0;
 8002366:	4b72      	ldr	r3, [pc, #456]	; (8002530 <main+0x11a8>)
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
				}
				float food_weight0 = floor(get_weight(&food, 10, CHANNEL_A) * 10) / 10.0;
 800236c:	2200      	movs	r2, #0
 800236e:	210a      	movs	r1, #10
 8002370:	4870      	ldr	r0, [pc, #448]	; (8002534 <main+0x11ac>)
 8002372:	f7fe ffcd 	bl	8001310 <get_weight>
 8002376:	eef0 7a40 	vmov.f32	s15, s0
 800237a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800237e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002382:	ee17 0a90 	vmov	r0, s15
 8002386:	f7fe f8f7 	bl	8000578 <__aeabi_f2d>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	ec43 2b10 	vmov	d0, r2, r3
 8002392:	f00a ffb1 	bl	800d2f8 <floor>
 8002396:	ec51 0b10 	vmov	r0, r1, d0
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	4b66      	ldr	r3, [pc, #408]	; (8002538 <main+0x11b0>)
 80023a0:	f7fe fa6c 	bl	800087c <__aeabi_ddiv>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	f7fe fc14 	bl	8000bd8 <__aeabi_d2f>
 80023b0:	4603      	mov	r3, r0
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
				float water_weight0 = floor(get_weight(&water, 10, CHANNEL_A) * 10) / 10.0;
 80023b4:	2200      	movs	r2, #0
 80023b6:	210a      	movs	r1, #10
 80023b8:	4860      	ldr	r0, [pc, #384]	; (800253c <main+0x11b4>)
 80023ba:	f7fe ffa9 	bl	8001310 <get_weight>
 80023be:	eef0 7a40 	vmov.f32	s15, s0
 80023c2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80023c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ca:	ee17 0a90 	vmov	r0, s15
 80023ce:	f7fe f8d3 	bl	8000578 <__aeabi_f2d>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	ec43 2b10 	vmov	d0, r2, r3
 80023da:	f00a ff8d 	bl	800d2f8 <floor>
 80023de:	ec51 0b10 	vmov	r0, r1, d0
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	4b54      	ldr	r3, [pc, #336]	; (8002538 <main+0x11b0>)
 80023e8:	f7fe fa48 	bl	800087c <__aeabi_ddiv>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4610      	mov	r0, r2
 80023f2:	4619      	mov	r1, r3
 80023f4:	f7fe fbf0 	bl	8000bd8 <__aeabi_d2f>
 80023f8:	4603      	mov	r3, r0
 80023fa:	62fb      	str	r3, [r7, #44]	; 0x2c
				ssd1306_SetCursor(2,16);
 80023fc:	2110      	movs	r1, #16
 80023fe:	2002      	movs	r0, #2
 8002400:	f002 f84e 	bl	80044a0 <ssd1306_SetCursor>
				ssd1306_WriteString("ADD FOOD & WATER", Font_7x10, White);
 8002404:	4a4e      	ldr	r2, [pc, #312]	; (8002540 <main+0x11b8>)
 8002406:	2301      	movs	r3, #1
 8002408:	ca06      	ldmia	r2, {r1, r2}
 800240a:	484e      	ldr	r0, [pc, #312]	; (8002544 <main+0x11bc>)
 800240c:	f002 f822 	bl	8004454 <ssd1306_WriteString>
				ssd1306_SetCursor(2,28);
 8002410:	211c      	movs	r1, #28
 8002412:	2002      	movs	r0, #2
 8002414:	f002 f844 	bl	80044a0 <ssd1306_SetCursor>
				ssd1306_WriteString("THEN PRESS ENTER", Font_7x10, White);
 8002418:	4a49      	ldr	r2, [pc, #292]	; (8002540 <main+0x11b8>)
 800241a:	2301      	movs	r3, #1
 800241c:	ca06      	ldmia	r2, {r1, r2}
 800241e:	484a      	ldr	r0, [pc, #296]	; (8002548 <main+0x11c0>)
 8002420:	f002 f818 	bl	8004454 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8002424:	f001 ff12 	bl	800424c <ssd1306_UpdateScreen>
				dirty = 1;
 8002428:	4b41      	ldr	r3, [pc, #260]	; (8002530 <main+0x11a8>)
 800242a:	2201      	movs	r2, #1
 800242c:	701a      	strb	r2, [r3, #0]
				while(1)
				{
					if (is_press && keyPressed == 35)
 800242e:	4b47      	ldr	r3, [pc, #284]	; (800254c <main+0x11c4>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d06c      	beq.n	8002510 <main+0x1188>
 8002436:	4b46      	ldr	r3, [pc, #280]	; (8002550 <main+0x11c8>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b23      	cmp	r3, #35	; 0x23
 800243c:	d168      	bne.n	8002510 <main+0x1188>
					{
						float food_weight1 = floor(get_weight(&food, 10, CHANNEL_A) * 10) / 10.0;
 800243e:	2200      	movs	r2, #0
 8002440:	210a      	movs	r1, #10
 8002442:	483c      	ldr	r0, [pc, #240]	; (8002534 <main+0x11ac>)
 8002444:	f7fe ff64 	bl	8001310 <get_weight>
 8002448:	eef0 7a40 	vmov.f32	s15, s0
 800244c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002454:	ee17 0a90 	vmov	r0, s15
 8002458:	f7fe f88e 	bl	8000578 <__aeabi_f2d>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	ec43 2b10 	vmov	d0, r2, r3
 8002464:	f00a ff48 	bl	800d2f8 <floor>
 8002468:	ec51 0b10 	vmov	r0, r1, d0
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	4b31      	ldr	r3, [pc, #196]	; (8002538 <main+0x11b0>)
 8002472:	f7fe fa03 	bl	800087c <__aeabi_ddiv>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4610      	mov	r0, r2
 800247c:	4619      	mov	r1, r3
 800247e:	f7fe fbab 	bl	8000bd8 <__aeabi_d2f>
 8002482:	4603      	mov	r3, r0
 8002484:	62bb      	str	r3, [r7, #40]	; 0x28
						float water_weight1 = floor(get_weight(&water, 10, CHANNEL_A) * 10) / 10.0;
 8002486:	2200      	movs	r2, #0
 8002488:	210a      	movs	r1, #10
 800248a:	482c      	ldr	r0, [pc, #176]	; (800253c <main+0x11b4>)
 800248c:	f7fe ff40 	bl	8001310 <get_weight>
 8002490:	eef0 7a40 	vmov.f32	s15, s0
 8002494:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800249c:	ee17 0a90 	vmov	r0, s15
 80024a0:	f7fe f86a 	bl	8000578 <__aeabi_f2d>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	ec43 2b10 	vmov	d0, r2, r3
 80024ac:	f00a ff24 	bl	800d2f8 <floor>
 80024b0:	ec51 0b10 	vmov	r0, r1, d0
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	4b1f      	ldr	r3, [pc, #124]	; (8002538 <main+0x11b0>)
 80024ba:	f7fe f9df 	bl	800087c <__aeabi_ddiv>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4610      	mov	r0, r2
 80024c4:	4619      	mov	r1, r3
 80024c6:	f7fe fb87 	bl	8000bd8 <__aeabi_d2f>
 80024ca:	4603      	mov	r3, r0
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
						consumed_food = consumed_food + food_weight1 - food_weight0;
 80024ce:	4b21      	ldr	r3, [pc, #132]	; (8002554 <main+0x11cc>)
 80024d0:	ed93 7a00 	vldr	s14, [r3]
 80024d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80024d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024dc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80024e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024e4:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <main+0x11cc>)
 80024e6:	edc3 7a00 	vstr	s15, [r3]
						consumed_water = consumed_water + water_weight1 - water_weight0;
 80024ea:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <main+0x11d0>)
 80024ec:	ed93 7a00 	vldr	s14, [r3]
 80024f0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80024f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024f8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80024fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002500:	4b15      	ldr	r3, [pc, #84]	; (8002558 <main+0x11d0>)
 8002502:	edc3 7a00 	vstr	s15, [r3]
						status = 0;
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <main+0x11a4>)
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
						break;
 800250c:	f000 bc4a 	b.w	8002da4 <main+0x1a1c>
					}
					else if (is_press && keyPressed == 68)
 8002510:	4b0e      	ldr	r3, [pc, #56]	; (800254c <main+0x11c4>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d08a      	beq.n	800242e <main+0x10a6>
 8002518:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <main+0x11c8>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b44      	cmp	r3, #68	; 0x44
 800251e:	d186      	bne.n	800242e <main+0x10a6>
					{
						status = 0;
 8002520:	4b02      	ldr	r3, [pc, #8]	; (800252c <main+0x11a4>)
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
						break;
 8002526:	f000 bc3d 	b.w	8002da4 <main+0x1a1c>
 800252a:	bf00      	nop
 800252c:	200006fa 	.word	0x200006fa
 8002530:	200006fb 	.word	0x200006fb
 8002534:	20000240 	.word	0x20000240
 8002538:	40240000 	.word	0x40240000
 800253c:	20000288 	.word	0x20000288
 8002540:	20000040 	.word	0x20000040
 8002544:	0800d5e0 	.word	0x0800d5e0
 8002548:	0800d5f4 	.word	0x0800d5f4
 800254c:	200006f9 	.word	0x200006f9
 8002550:	200006f8 	.word	0x200006f8
 8002554:	20000544 	.word	0x20000544
 8002558:	20000548 	.word	0x20000548
					}
				}
			}

			else if (status == 6)
 800255c:	4b87      	ldr	r3, [pc, #540]	; (800277c <main+0x13f4>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b06      	cmp	r3, #6
 8002562:	f040 8102 	bne.w	800276a <main+0x13e2>
			{
				if(dirty)
 8002566:	4b86      	ldr	r3, [pc, #536]	; (8002780 <main+0x13f8>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d004      	beq.n	8002578 <main+0x11f0>
				{
					ssd1306_Init();
 800256e:	f001 fddf 	bl	8004130 <ssd1306_Init>
					dirty = 0;
 8002572:	4b83      	ldr	r3, [pc, #524]	; (8002780 <main+0x13f8>)
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
				}
				gcvt(history_food[hisPage], 6, buf);
 8002578:	4b82      	ldr	r3, [pc, #520]	; (8002784 <main+0x13fc>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	4a82      	ldr	r2, [pc, #520]	; (8002788 <main+0x1400>)
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7fd fff7 	bl	8000578 <__aeabi_f2d>
 800258a:	4604      	mov	r4, r0
 800258c:	460d      	mov	r5, r1
 800258e:	463b      	mov	r3, r7
 8002590:	4619      	mov	r1, r3
 8002592:	2006      	movs	r0, #6
 8002594:	ec45 4b10 	vmov	d0, r4, r5
 8002598:	f007 ff6a 	bl	800a470 <gcvt>
				ssd1306_SetCursor(2,2);
 800259c:	2102      	movs	r1, #2
 800259e:	2002      	movs	r0, #2
 80025a0:	f001 ff7e 	bl	80044a0 <ssd1306_SetCursor>
				output = ssd1306_WriteString("food: ", Font_7x10, White);
 80025a4:	4a79      	ldr	r2, [pc, #484]	; (800278c <main+0x1404>)
 80025a6:	2301      	movs	r3, #1
 80025a8:	ca06      	ldmia	r2, {r1, r2}
 80025aa:	4879      	ldr	r0, [pc, #484]	; (8002790 <main+0x1408>)
 80025ac:	f001 ff52 	bl	8004454 <ssd1306_WriteString>
 80025b0:	4603      	mov	r3, r0
 80025b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				output = ssd1306_WriteString(buf, Font_7x10, White);
 80025b6:	4a75      	ldr	r2, [pc, #468]	; (800278c <main+0x1404>)
 80025b8:	4638      	mov	r0, r7
 80025ba:	2301      	movs	r3, #1
 80025bc:	ca06      	ldmia	r2, {r1, r2}
 80025be:	f001 ff49 	bl	8004454 <ssd1306_WriteString>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				output = ssd1306_WriteString(" g            ", Font_7x10, White);
 80025c8:	4a70      	ldr	r2, [pc, #448]	; (800278c <main+0x1404>)
 80025ca:	2301      	movs	r3, #1
 80025cc:	ca06      	ldmia	r2, {r1, r2}
 80025ce:	4871      	ldr	r0, [pc, #452]	; (8002794 <main+0x140c>)
 80025d0:	f001 ff40 	bl	8004454 <ssd1306_WriteString>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				gcvt(history_water[hisPage], 6, buf);
 80025da:	4b6a      	ldr	r3, [pc, #424]	; (8002784 <main+0x13fc>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	4a6e      	ldr	r2, [pc, #440]	; (8002798 <main+0x1410>)
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd ffc6 	bl	8000578 <__aeabi_f2d>
 80025ec:	4604      	mov	r4, r0
 80025ee:	460d      	mov	r5, r1
 80025f0:	463b      	mov	r3, r7
 80025f2:	4619      	mov	r1, r3
 80025f4:	2006      	movs	r0, #6
 80025f6:	ec45 4b10 	vmov	d0, r4, r5
 80025fa:	f007 ff39 	bl	800a470 <gcvt>
				ssd1306_SetCursor(2,16);
 80025fe:	2110      	movs	r1, #16
 8002600:	2002      	movs	r0, #2
 8002602:	f001 ff4d 	bl	80044a0 <ssd1306_SetCursor>
				output = ssd1306_WriteString("water: ", Font_7x10, White);
 8002606:	4a61      	ldr	r2, [pc, #388]	; (800278c <main+0x1404>)
 8002608:	2301      	movs	r3, #1
 800260a:	ca06      	ldmia	r2, {r1, r2}
 800260c:	4863      	ldr	r0, [pc, #396]	; (800279c <main+0x1414>)
 800260e:	f001 ff21 	bl	8004454 <ssd1306_WriteString>
 8002612:	4603      	mov	r3, r0
 8002614:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				output = ssd1306_WriteString(buf, Font_7x10, White);
 8002618:	4a5c      	ldr	r2, [pc, #368]	; (800278c <main+0x1404>)
 800261a:	4638      	mov	r0, r7
 800261c:	2301      	movs	r3, #1
 800261e:	ca06      	ldmia	r2, {r1, r2}
 8002620:	f001 ff18 	bl	8004454 <ssd1306_WriteString>
 8002624:	4603      	mov	r3, r0
 8002626:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				output = ssd1306_WriteString(" g            ", Font_7x10, White);
 800262a:	4a58      	ldr	r2, [pc, #352]	; (800278c <main+0x1404>)
 800262c:	2301      	movs	r3, #1
 800262e:	ca06      	ldmia	r2, {r1, r2}
 8002630:	4858      	ldr	r0, [pc, #352]	; (8002794 <main+0x140c>)
 8002632:	f001 ff0f 	bl	8004454 <ssd1306_WriteString>
 8002636:	4603      	mov	r3, r0
 8002638:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				gcvt(history_pet[hisPage], 6, buf);
 800263c:	4b51      	ldr	r3, [pc, #324]	; (8002784 <main+0x13fc>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	4a57      	ldr	r2, [pc, #348]	; (80027a0 <main+0x1418>)
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7fd ff95 	bl	8000578 <__aeabi_f2d>
 800264e:	4604      	mov	r4, r0
 8002650:	460d      	mov	r5, r1
 8002652:	463b      	mov	r3, r7
 8002654:	4619      	mov	r1, r3
 8002656:	2006      	movs	r0, #6
 8002658:	ec45 4b10 	vmov	d0, r4, r5
 800265c:	f007 ff08 	bl	800a470 <gcvt>
				ssd1306_SetCursor(2,28);
 8002660:	211c      	movs	r1, #28
 8002662:	2002      	movs	r0, #2
 8002664:	f001 ff1c 	bl	80044a0 <ssd1306_SetCursor>
				output = ssd1306_WriteString("pet: ", Font_7x10, White);
 8002668:	4a48      	ldr	r2, [pc, #288]	; (800278c <main+0x1404>)
 800266a:	2301      	movs	r3, #1
 800266c:	ca06      	ldmia	r2, {r1, r2}
 800266e:	484d      	ldr	r0, [pc, #308]	; (80027a4 <main+0x141c>)
 8002670:	f001 fef0 	bl	8004454 <ssd1306_WriteString>
 8002674:	4603      	mov	r3, r0
 8002676:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				output = ssd1306_WriteString(buf, Font_7x10, White);
 800267a:	4a44      	ldr	r2, [pc, #272]	; (800278c <main+0x1404>)
 800267c:	4638      	mov	r0, r7
 800267e:	2301      	movs	r3, #1
 8002680:	ca06      	ldmia	r2, {r1, r2}
 8002682:	f001 fee7 	bl	8004454 <ssd1306_WriteString>
 8002686:	4603      	mov	r3, r0
 8002688:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				output = ssd1306_WriteString(" g            ", Font_7x10, White);
 800268c:	4a3f      	ldr	r2, [pc, #252]	; (800278c <main+0x1404>)
 800268e:	2301      	movs	r3, #1
 8002690:	ca06      	ldmia	r2, {r1, r2}
 8002692:	4840      	ldr	r0, [pc, #256]	; (8002794 <main+0x140c>)
 8002694:	f001 fede 	bl	8004454 <ssd1306_WriteString>
 8002698:	4603      	mov	r3, r0
 800269a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				gcvt(history_temp[hisPage], 3, buf);
 800269e:	4b39      	ldr	r3, [pc, #228]	; (8002784 <main+0x13fc>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	4a41      	ldr	r2, [pc, #260]	; (80027a8 <main+0x1420>)
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fd ff64 	bl	8000578 <__aeabi_f2d>
 80026b0:	4604      	mov	r4, r0
 80026b2:	460d      	mov	r5, r1
 80026b4:	463b      	mov	r3, r7
 80026b6:	4619      	mov	r1, r3
 80026b8:	2003      	movs	r0, #3
 80026ba:	ec45 4b10 	vmov	d0, r4, r5
 80026be:	f007 fed7 	bl	800a470 <gcvt>
				ssd1306_SetCursor(2,40);
 80026c2:	2128      	movs	r1, #40	; 0x28
 80026c4:	2002      	movs	r0, #2
 80026c6:	f001 feeb 	bl	80044a0 <ssd1306_SetCursor>
				output = ssd1306_WriteString("temp: ", Font_7x10, White);
 80026ca:	4a30      	ldr	r2, [pc, #192]	; (800278c <main+0x1404>)
 80026cc:	2301      	movs	r3, #1
 80026ce:	ca06      	ldmia	r2, {r1, r2}
 80026d0:	4836      	ldr	r0, [pc, #216]	; (80027ac <main+0x1424>)
 80026d2:	f001 febf 	bl	8004454 <ssd1306_WriteString>
 80026d6:	4603      	mov	r3, r0
 80026d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				output = ssd1306_WriteString(buf, Font_7x10, White);
 80026dc:	4a2b      	ldr	r2, [pc, #172]	; (800278c <main+0x1404>)
 80026de:	4638      	mov	r0, r7
 80026e0:	2301      	movs	r3, #1
 80026e2:	ca06      	ldmia	r2, {r1, r2}
 80026e4:	f001 feb6 	bl	8004454 <ssd1306_WriteString>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				output = ssd1306_WriteString(" C             ", Font_7x10, White);
 80026ee:	4a27      	ldr	r2, [pc, #156]	; (800278c <main+0x1404>)
 80026f0:	2301      	movs	r3, #1
 80026f2:	ca06      	ldmia	r2, {r1, r2}
 80026f4:	482e      	ldr	r0, [pc, #184]	; (80027b0 <main+0x1428>)
 80026f6:	f001 fead 	bl	8004454 <ssd1306_WriteString>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				gcvt(history_hum[hisPage], 3, buf);
 8002700:	4b20      	ldr	r3, [pc, #128]	; (8002784 <main+0x13fc>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	4a2b      	ldr	r2, [pc, #172]	; (80027b4 <main+0x142c>)
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd ff33 	bl	8000578 <__aeabi_f2d>
 8002712:	4604      	mov	r4, r0
 8002714:	460d      	mov	r5, r1
 8002716:	463b      	mov	r3, r7
 8002718:	4619      	mov	r1, r3
 800271a:	2003      	movs	r0, #3
 800271c:	ec45 4b10 	vmov	d0, r4, r5
 8002720:	f007 fea6 	bl	800a470 <gcvt>
				ssd1306_SetCursor(2,52);
 8002724:	2134      	movs	r1, #52	; 0x34
 8002726:	2002      	movs	r0, #2
 8002728:	f001 feba 	bl	80044a0 <ssd1306_SetCursor>
				output = ssd1306_WriteString("humidity: ", Font_7x10, White);
 800272c:	4a17      	ldr	r2, [pc, #92]	; (800278c <main+0x1404>)
 800272e:	2301      	movs	r3, #1
 8002730:	ca06      	ldmia	r2, {r1, r2}
 8002732:	4821      	ldr	r0, [pc, #132]	; (80027b8 <main+0x1430>)
 8002734:	f001 fe8e 	bl	8004454 <ssd1306_WriteString>
 8002738:	4603      	mov	r3, r0
 800273a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				output = ssd1306_WriteString(buf, Font_7x10, White);
 800273e:	4a13      	ldr	r2, [pc, #76]	; (800278c <main+0x1404>)
 8002740:	4638      	mov	r0, r7
 8002742:	2301      	movs	r3, #1
 8002744:	ca06      	ldmia	r2, {r1, r2}
 8002746:	f001 fe85 	bl	8004454 <ssd1306_WriteString>
 800274a:	4603      	mov	r3, r0
 800274c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				output = ssd1306_WriteString(" %            ", Font_7x10, White);
 8002750:	4a0e      	ldr	r2, [pc, #56]	; (800278c <main+0x1404>)
 8002752:	2301      	movs	r3, #1
 8002754:	ca06      	ldmia	r2, {r1, r2}
 8002756:	4819      	ldr	r0, [pc, #100]	; (80027bc <main+0x1434>)
 8002758:	f001 fe7c 	bl	8004454 <ssd1306_WriteString>
 800275c:	4603      	mov	r3, r0
 800275e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				ssd1306_UpdateScreen();
 8002762:	f001 fd73 	bl	800424c <ssd1306_UpdateScreen>
 8002766:	f7fe beaf 	b.w	80014c8 <main+0x140>
			}
			else if (status == 7) // store the data
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <main+0x13f4>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b07      	cmp	r3, #7
 8002770:	f47e aeaa 	bne.w	80014c8 <main+0x140>
			{
				for (int i= HISTORY - 2; i>=0; i--)
 8002774:	2312      	movs	r3, #18
 8002776:	657b      	str	r3, [r7, #84]	; 0x54
 8002778:	e05c      	b.n	8002834 <main+0x14ac>
 800277a:	bf00      	nop
 800277c:	200006fa 	.word	0x200006fa
 8002780:	200006fb 	.word	0x200006fb
 8002784:	200006fe 	.word	0x200006fe
 8002788:	2000054c 	.word	0x2000054c
 800278c:	20000040 	.word	0x20000040
 8002790:	0800d608 	.word	0x0800d608
 8002794:	0800d550 	.word	0x0800d550
 8002798:	2000059c 	.word	0x2000059c
 800279c:	0800d610 	.word	0x0800d610
 80027a0:	200005ec 	.word	0x200005ec
 80027a4:	0800d618 	.word	0x0800d618
 80027a8:	2000063c 	.word	0x2000063c
 80027ac:	0800d620 	.word	0x0800d620
 80027b0:	0800d588 	.word	0x0800d588
 80027b4:	2000068c 	.word	0x2000068c
 80027b8:	0800d628 	.word	0x0800d628
 80027bc:	0800d5a4 	.word	0x0800d5a4
				{
					history_food[i+1] = history_food[i];
 80027c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c2:	3301      	adds	r3, #1
 80027c4:	49c4      	ldr	r1, [pc, #784]	; (8002ad8 <main+0x1750>)
 80027c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027c8:	0092      	lsls	r2, r2, #2
 80027ca:	440a      	add	r2, r1
 80027cc:	6812      	ldr	r2, [r2, #0]
 80027ce:	49c2      	ldr	r1, [pc, #776]	; (8002ad8 <main+0x1750>)
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	601a      	str	r2, [r3, #0]
					history_water[i+1] = history_water[i];
 80027d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d8:	3301      	adds	r3, #1
 80027da:	49c0      	ldr	r1, [pc, #768]	; (8002adc <main+0x1754>)
 80027dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027de:	0092      	lsls	r2, r2, #2
 80027e0:	440a      	add	r2, r1
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	49bd      	ldr	r1, [pc, #756]	; (8002adc <main+0x1754>)
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	601a      	str	r2, [r3, #0]
					history_pet[i+1] = history_pet[i];
 80027ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ee:	3301      	adds	r3, #1
 80027f0:	49bb      	ldr	r1, [pc, #748]	; (8002ae0 <main+0x1758>)
 80027f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027f4:	0092      	lsls	r2, r2, #2
 80027f6:	440a      	add	r2, r1
 80027f8:	6812      	ldr	r2, [r2, #0]
 80027fa:	49b9      	ldr	r1, [pc, #740]	; (8002ae0 <main+0x1758>)
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	601a      	str	r2, [r3, #0]
					history_temp[i+1] = history_temp[i];
 8002802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002804:	3301      	adds	r3, #1
 8002806:	49b7      	ldr	r1, [pc, #732]	; (8002ae4 <main+0x175c>)
 8002808:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800280a:	0092      	lsls	r2, r2, #2
 800280c:	440a      	add	r2, r1
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	49b4      	ldr	r1, [pc, #720]	; (8002ae4 <main+0x175c>)
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	601a      	str	r2, [r3, #0]
					history_hum[i+1] = 	history_hum[i];
 8002818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800281a:	3301      	adds	r3, #1
 800281c:	49b2      	ldr	r1, [pc, #712]	; (8002ae8 <main+0x1760>)
 800281e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002820:	0092      	lsls	r2, r2, #2
 8002822:	440a      	add	r2, r1
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	49b0      	ldr	r1, [pc, #704]	; (8002ae8 <main+0x1760>)
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	601a      	str	r2, [r3, #0]
				for (int i= HISTORY - 2; i>=0; i--)
 800282e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002830:	3b01      	subs	r3, #1
 8002832:	657b      	str	r3, [r7, #84]	; 0x54
 8002834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002836:	2b00      	cmp	r3, #0
 8002838:	dac2      	bge.n	80027c0 <main+0x1438>
				}
				float food_weight = floor(get_weight(&food, 10, CHANNEL_A) * 10) / 10.0; // weight*10
 800283a:	2200      	movs	r2, #0
 800283c:	210a      	movs	r1, #10
 800283e:	48ab      	ldr	r0, [pc, #684]	; (8002aec <main+0x1764>)
 8002840:	f7fe fd66 	bl	8001310 <get_weight>
 8002844:	eef0 7a40 	vmov.f32	s15, s0
 8002848:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800284c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002850:	ee17 0a90 	vmov	r0, s15
 8002854:	f7fd fe90 	bl	8000578 <__aeabi_f2d>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	ec43 2b10 	vmov	d0, r2, r3
 8002860:	f00a fd4a 	bl	800d2f8 <floor>
 8002864:	ec51 0b10 	vmov	r0, r1, d0
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	4ba0      	ldr	r3, [pc, #640]	; (8002af0 <main+0x1768>)
 800286e:	f7fe f805 	bl	800087c <__aeabi_ddiv>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	f7fe f9ad 	bl	8000bd8 <__aeabi_d2f>
 800287e:	4603      	mov	r3, r0
 8002880:	64bb      	str	r3, [r7, #72]	; 0x48
				float water_weight = floor(get_weight(&water, 10, CHANNEL_A) * 10) / 10.0;
 8002882:	2200      	movs	r2, #0
 8002884:	210a      	movs	r1, #10
 8002886:	489b      	ldr	r0, [pc, #620]	; (8002af4 <main+0x176c>)
 8002888:	f7fe fd42 	bl	8001310 <get_weight>
 800288c:	eef0 7a40 	vmov.f32	s15, s0
 8002890:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002894:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002898:	ee17 0a90 	vmov	r0, s15
 800289c:	f7fd fe6c 	bl	8000578 <__aeabi_f2d>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	ec43 2b10 	vmov	d0, r2, r3
 80028a8:	f00a fd26 	bl	800d2f8 <floor>
 80028ac:	ec51 0b10 	vmov	r0, r1, d0
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	4b8e      	ldr	r3, [pc, #568]	; (8002af0 <main+0x1768>)
 80028b6:	f7fd ffe1 	bl	800087c <__aeabi_ddiv>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4610      	mov	r0, r2
 80028c0:	4619      	mov	r1, r3
 80028c2:	f7fe f989 	bl	8000bd8 <__aeabi_d2f>
 80028c6:	4603      	mov	r3, r0
 80028c8:	647b      	str	r3, [r7, #68]	; 0x44
				HAL_I2C_Master_Receive(&hi2c1, AHT10_Adress, (uint8_t*)AHT10_RX_Data, 6, 100);
 80028ca:	2364      	movs	r3, #100	; 0x64
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	2306      	movs	r3, #6
 80028d0:	4a89      	ldr	r2, [pc, #548]	; (8002af8 <main+0x1770>)
 80028d2:	2170      	movs	r1, #112	; 0x70
 80028d4:	4889      	ldr	r0, [pc, #548]	; (8002afc <main+0x1774>)
 80028d6:	f003 f947 	bl	8005b68 <HAL_I2C_Master_Receive>
				AHT10_ADC_Raw = (((uint32_t)AHT10_RX_Data[3] & 15) << 16) | ((uint32_t)AHT10_RX_Data[4] << 8) | AHT10_RX_Data[5];
 80028da:	4b87      	ldr	r3, [pc, #540]	; (8002af8 <main+0x1770>)
 80028dc:	78db      	ldrb	r3, [r3, #3]
 80028de:	041b      	lsls	r3, r3, #16
 80028e0:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80028e4:	4b84      	ldr	r3, [pc, #528]	; (8002af8 <main+0x1770>)
 80028e6:	791b      	ldrb	r3, [r3, #4]
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	4313      	orrs	r3, r2
 80028ec:	4a82      	ldr	r2, [pc, #520]	; (8002af8 <main+0x1770>)
 80028ee:	7952      	ldrb	r2, [r2, #5]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	4a83      	ldr	r2, [pc, #524]	; (8002b00 <main+0x1778>)
 80028f4:	6013      	str	r3, [r2, #0]
				float AHT10_Temp = floor(((AHT10_ADC_Raw * 200.00 / 1048576.00) - 50.00) * 10) / 10.0;
 80028f6:	4b82      	ldr	r3, [pc, #520]	; (8002b00 <main+0x1778>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fd fe1a 	bl	8000534 <__aeabi_ui2d>
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	4b7f      	ldr	r3, [pc, #508]	; (8002b04 <main+0x177c>)
 8002906:	f7fd fe8f 	bl	8000628 <__aeabi_dmul>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4610      	mov	r0, r2
 8002910:	4619      	mov	r1, r3
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	4b7c      	ldr	r3, [pc, #496]	; (8002b08 <main+0x1780>)
 8002918:	f7fd ffb0 	bl	800087c <__aeabi_ddiv>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4610      	mov	r0, r2
 8002922:	4619      	mov	r1, r3
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	4b78      	ldr	r3, [pc, #480]	; (8002b0c <main+0x1784>)
 800292a:	f7fd fcc5 	bl	80002b8 <__aeabi_dsub>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4610      	mov	r0, r2
 8002934:	4619      	mov	r1, r3
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	4b6d      	ldr	r3, [pc, #436]	; (8002af0 <main+0x1768>)
 800293c:	f7fd fe74 	bl	8000628 <__aeabi_dmul>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	ec43 2b17 	vmov	d7, r2, r3
 8002948:	eeb0 0a47 	vmov.f32	s0, s14
 800294c:	eef0 0a67 	vmov.f32	s1, s15
 8002950:	f00a fcd2 	bl	800d2f8 <floor>
 8002954:	ec51 0b10 	vmov	r0, r1, d0
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	4b64      	ldr	r3, [pc, #400]	; (8002af0 <main+0x1768>)
 800295e:	f7fd ff8d 	bl	800087c <__aeabi_ddiv>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	f7fe f935 	bl	8000bd8 <__aeabi_d2f>
 800296e:	4603      	mov	r3, r0
 8002970:	643b      	str	r3, [r7, #64]	; 0x40
				AHT10_ADC_Raw = ((uint32_t)AHT10_RX_Data[1] << 12) | ((uint32_t)AHT10_RX_Data[2] << 4) | (AHT10_RX_Data[3] >> 4);
 8002972:	4b61      	ldr	r3, [pc, #388]	; (8002af8 <main+0x1770>)
 8002974:	785b      	ldrb	r3, [r3, #1]
 8002976:	031a      	lsls	r2, r3, #12
 8002978:	4b5f      	ldr	r3, [pc, #380]	; (8002af8 <main+0x1770>)
 800297a:	789b      	ldrb	r3, [r3, #2]
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	4313      	orrs	r3, r2
 8002980:	4a5d      	ldr	r2, [pc, #372]	; (8002af8 <main+0x1770>)
 8002982:	78d2      	ldrb	r2, [r2, #3]
 8002984:	0912      	lsrs	r2, r2, #4
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	4313      	orrs	r3, r2
 800298a:	4a5d      	ldr	r2, [pc, #372]	; (8002b00 <main+0x1778>)
 800298c:	6013      	str	r3, [r2, #0]
				float AHT10_Humid = floor((AHT10_ADC_Raw*100.00/1048576.00) * 10) / 10.0;
 800298e:	4b5c      	ldr	r3, [pc, #368]	; (8002b00 <main+0x1778>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fd fdce 	bl	8000534 <__aeabi_ui2d>
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	4b5c      	ldr	r3, [pc, #368]	; (8002b10 <main+0x1788>)
 800299e:	f7fd fe43 	bl	8000628 <__aeabi_dmul>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4610      	mov	r0, r2
 80029a8:	4619      	mov	r1, r3
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	4b56      	ldr	r3, [pc, #344]	; (8002b08 <main+0x1780>)
 80029b0:	f7fd ff64 	bl	800087c <__aeabi_ddiv>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	4b4b      	ldr	r3, [pc, #300]	; (8002af0 <main+0x1768>)
 80029c2:	f7fd fe31 	bl	8000628 <__aeabi_dmul>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	ec43 2b17 	vmov	d7, r2, r3
 80029ce:	eeb0 0a47 	vmov.f32	s0, s14
 80029d2:	eef0 0a67 	vmov.f32	s1, s15
 80029d6:	f00a fc8f 	bl	800d2f8 <floor>
 80029da:	ec51 0b10 	vmov	r0, r1, d0
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	4b43      	ldr	r3, [pc, #268]	; (8002af0 <main+0x1768>)
 80029e4:	f7fd ff4a 	bl	800087c <__aeabi_ddiv>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4610      	mov	r0, r2
 80029ee:	4619      	mov	r1, r3
 80029f0:	f7fe f8f2 	bl	8000bd8 <__aeabi_d2f>
 80029f4:	4603      	mov	r3, r0
 80029f6:	63fb      	str	r3, [r7, #60]	; 0x3c

				//			int petweight0 = floor(petweight * 10);
				//			int consumedfood = floor(consumed_food*10);
				//			int consumedwater = floor(consumed_water*10);
				history_food[0] = consumed_food - food_weight;
 80029f8:	4b46      	ldr	r3, [pc, #280]	; (8002b14 <main+0x178c>)
 80029fa:	ed93 7a00 	vldr	s14, [r3]
 80029fe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002a02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a06:	4b34      	ldr	r3, [pc, #208]	; (8002ad8 <main+0x1750>)
 8002a08:	edc3 7a00 	vstr	s15, [r3]
				history_water[0] = consumed_water - water_weight;
 8002a0c:	4b42      	ldr	r3, [pc, #264]	; (8002b18 <main+0x1790>)
 8002a0e:	ed93 7a00 	vldr	s14, [r3]
 8002a12:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a1a:	4b30      	ldr	r3, [pc, #192]	; (8002adc <main+0x1754>)
 8002a1c:	edc3 7a00 	vstr	s15, [r3]
				history_pet[0] = petweight;
 8002a20:	4b3e      	ldr	r3, [pc, #248]	; (8002b1c <main+0x1794>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a2e      	ldr	r2, [pc, #184]	; (8002ae0 <main+0x1758>)
 8002a26:	6013      	str	r3, [r2, #0]
				history_temp[0] = AHT10_Temp;
 8002a28:	4a2e      	ldr	r2, [pc, #184]	; (8002ae4 <main+0x175c>)
 8002a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a2c:	6013      	str	r3, [r2, #0]
				history_hum[0] = 	AHT10_Humid;
 8002a2e:	4a2e      	ldr	r2, [pc, #184]	; (8002ae8 <main+0x1760>)
 8002a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a32:	6013      	str	r3, [r2, #0]
				consumed_food = food_weight;
 8002a34:	4a37      	ldr	r2, [pc, #220]	; (8002b14 <main+0x178c>)
 8002a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a38:	6013      	str	r3, [r2, #0]
				consumed_water = water_weight;
 8002a3a:	4a37      	ldr	r2, [pc, #220]	; (8002b18 <main+0x1790>)
 8002a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a3e:	6013      	str	r3, [r2, #0]
				float foodRatio = (history_food[1] + history_food[2] + history_food[3] + history_food[4] + 0.1)/history_food[0];
 8002a40:	4b25      	ldr	r3, [pc, #148]	; (8002ad8 <main+0x1750>)
 8002a42:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a46:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <main+0x1750>)
 8002a48:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a50:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <main+0x1750>)
 8002a52:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a5a:	4b1f      	ldr	r3, [pc, #124]	; (8002ad8 <main+0x1750>)
 8002a5c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a64:	ee17 0a90 	vmov	r0, s15
 8002a68:	f7fd fd86 	bl	8000578 <__aeabi_f2d>
 8002a6c:	a318      	add	r3, pc, #96	; (adr r3, 8002ad0 <main+0x1748>)
 8002a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a72:	f7fd fc23 	bl	80002bc <__adddf3>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4614      	mov	r4, r2
 8002a7c:	461d      	mov	r5, r3
 8002a7e:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <main+0x1750>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fd fd78 	bl	8000578 <__aeabi_f2d>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	4629      	mov	r1, r5
 8002a90:	f7fd fef4 	bl	800087c <__aeabi_ddiv>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4610      	mov	r0, r2
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f7fe f89c 	bl	8000bd8 <__aeabi_d2f>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	63bb      	str	r3, [r7, #56]	; 0x38
				float waterRatio = (history_water[1] + history_water[2] + history_water[3] + history_water[4] + 0.1)/history_water[0];
 8002aa4:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <main+0x1754>)
 8002aa6:	ed93 7a01 	vldr	s14, [r3, #4]
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <main+0x1754>)
 8002aac:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ab0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ab4:	4b09      	ldr	r3, [pc, #36]	; (8002adc <main+0x1754>)
 8002ab6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002aba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002abe:	4b07      	ldr	r3, [pc, #28]	; (8002adc <main+0x1754>)
 8002ac0:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ac8:	ee17 0a90 	vmov	r0, s15
 8002acc:	e028      	b.n	8002b20 <main+0x1798>
 8002ace:	bf00      	nop
 8002ad0:	9999999a 	.word	0x9999999a
 8002ad4:	3fb99999 	.word	0x3fb99999
 8002ad8:	2000054c 	.word	0x2000054c
 8002adc:	2000059c 	.word	0x2000059c
 8002ae0:	200005ec 	.word	0x200005ec
 8002ae4:	2000063c 	.word	0x2000063c
 8002ae8:	2000068c 	.word	0x2000068c
 8002aec:	20000240 	.word	0x20000240
 8002af0:	40240000 	.word	0x40240000
 8002af4:	20000288 	.word	0x20000288
 8002af8:	20000520 	.word	0x20000520
 8002afc:	200002ac 	.word	0x200002ac
 8002b00:	20000528 	.word	0x20000528
 8002b04:	40690000 	.word	0x40690000
 8002b08:	41300000 	.word	0x41300000
 8002b0c:	40490000 	.word	0x40490000
 8002b10:	40590000 	.word	0x40590000
 8002b14:	20000544 	.word	0x20000544
 8002b18:	20000548 	.word	0x20000548
 8002b1c:	20000540 	.word	0x20000540
 8002b20:	f7fd fd2a 	bl	8000578 <__aeabi_f2d>
 8002b24:	a3b0      	add	r3, pc, #704	; (adr r3, 8002de8 <main+0x1a60>)
 8002b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2a:	f7fd fbc7 	bl	80002bc <__adddf3>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4614      	mov	r4, r2
 8002b34:	461d      	mov	r5, r3
 8002b36:	4ba2      	ldr	r3, [pc, #648]	; (8002dc0 <main+0x1a38>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fd fd1c 	bl	8000578 <__aeabi_f2d>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4620      	mov	r0, r4
 8002b46:	4629      	mov	r1, r5
 8002b48:	f7fd fe98 	bl	800087c <__aeabi_ddiv>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4610      	mov	r0, r2
 8002b52:	4619      	mov	r1, r3
 8002b54:	f7fe f840 	bl	8000bd8 <__aeabi_d2f>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	637b      	str	r3, [r7, #52]	; 0x34
				if (foodRatio > 1.4*4) {warningInfo[0] = -1; ++petWarning;}
 8002b5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002b5e:	f7fd fd0b 	bl	8000578 <__aeabi_f2d>
 8002b62:	a391      	add	r3, pc, #580	; (adr r3, 8002da8 <main+0x1a20>)
 8002b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b68:	f7fd ffee 	bl	8000b48 <__aeabi_dcmpgt>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d008      	beq.n	8002b84 <main+0x17fc>
 8002b72:	4b94      	ldr	r3, [pc, #592]	; (8002dc4 <main+0x1a3c>)
 8002b74:	22ff      	movs	r2, #255	; 0xff
 8002b76:	701a      	strb	r2, [r3, #0]
 8002b78:	4b93      	ldr	r3, [pc, #588]	; (8002dc8 <main+0x1a40>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	4b91      	ldr	r3, [pc, #580]	; (8002dc8 <main+0x1a40>)
 8002b82:	701a      	strb	r2, [r3, #0]
				if (foodRatio > 2*4) {warningInfo[0] = -1; petWarning+=10;}
 8002b84:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002b88:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b94:	dd08      	ble.n	8002ba8 <main+0x1820>
 8002b96:	4b8b      	ldr	r3, [pc, #556]	; (8002dc4 <main+0x1a3c>)
 8002b98:	22ff      	movs	r2, #255	; 0xff
 8002b9a:	701a      	strb	r2, [r3, #0]
 8002b9c:	4b8a      	ldr	r3, [pc, #552]	; (8002dc8 <main+0x1a40>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	330a      	adds	r3, #10
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	4b88      	ldr	r3, [pc, #544]	; (8002dc8 <main+0x1a40>)
 8002ba6:	701a      	strb	r2, [r3, #0]
				if (foodRatio < 0.7*4) {warningInfo[0] = 1; ++petWarning;}
 8002ba8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002baa:	f7fd fce5 	bl	8000578 <__aeabi_f2d>
 8002bae:	a380      	add	r3, pc, #512	; (adr r3, 8002db0 <main+0x1a28>)
 8002bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb4:	f7fd ffaa 	bl	8000b0c <__aeabi_dcmplt>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d008      	beq.n	8002bd0 <main+0x1848>
 8002bbe:	4b81      	ldr	r3, [pc, #516]	; (8002dc4 <main+0x1a3c>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	701a      	strb	r2, [r3, #0]
 8002bc4:	4b80      	ldr	r3, [pc, #512]	; (8002dc8 <main+0x1a40>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	4b7e      	ldr	r3, [pc, #504]	; (8002dc8 <main+0x1a40>)
 8002bce:	701a      	strb	r2, [r3, #0]
				if (foodRatio < 0.5*4) {warningInfo[0] = 1; petWarning+=10;}
 8002bd0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002bd4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be0:	d508      	bpl.n	8002bf4 <main+0x186c>
 8002be2:	4b78      	ldr	r3, [pc, #480]	; (8002dc4 <main+0x1a3c>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	701a      	strb	r2, [r3, #0]
 8002be8:	4b77      	ldr	r3, [pc, #476]	; (8002dc8 <main+0x1a40>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	330a      	adds	r3, #10
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	4b75      	ldr	r3, [pc, #468]	; (8002dc8 <main+0x1a40>)
 8002bf2:	701a      	strb	r2, [r3, #0]
				if (waterRatio > 1.4*4) {warningInfo[1] = -1; ++petWarning;}
 8002bf4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002bf6:	f7fd fcbf 	bl	8000578 <__aeabi_f2d>
 8002bfa:	a36b      	add	r3, pc, #428	; (adr r3, 8002da8 <main+0x1a20>)
 8002bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c00:	f7fd ffa2 	bl	8000b48 <__aeabi_dcmpgt>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d008      	beq.n	8002c1c <main+0x1894>
 8002c0a:	4b6e      	ldr	r3, [pc, #440]	; (8002dc4 <main+0x1a3c>)
 8002c0c:	22ff      	movs	r2, #255	; 0xff
 8002c0e:	705a      	strb	r2, [r3, #1]
 8002c10:	4b6d      	ldr	r3, [pc, #436]	; (8002dc8 <main+0x1a40>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	3301      	adds	r3, #1
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	4b6b      	ldr	r3, [pc, #428]	; (8002dc8 <main+0x1a40>)
 8002c1a:	701a      	strb	r2, [r3, #0]
				if (waterRatio > 2*4) {warningInfo[1] = -1; petWarning+=10;}
 8002c1c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002c20:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002c24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2c:	dd08      	ble.n	8002c40 <main+0x18b8>
 8002c2e:	4b65      	ldr	r3, [pc, #404]	; (8002dc4 <main+0x1a3c>)
 8002c30:	22ff      	movs	r2, #255	; 0xff
 8002c32:	705a      	strb	r2, [r3, #1]
 8002c34:	4b64      	ldr	r3, [pc, #400]	; (8002dc8 <main+0x1a40>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	330a      	adds	r3, #10
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	4b62      	ldr	r3, [pc, #392]	; (8002dc8 <main+0x1a40>)
 8002c3e:	701a      	strb	r2, [r3, #0]
				if (waterRatio < 0.7*4) {warningInfo[1] = 1; ++petWarning;}
 8002c40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c42:	f7fd fc99 	bl	8000578 <__aeabi_f2d>
 8002c46:	a35a      	add	r3, pc, #360	; (adr r3, 8002db0 <main+0x1a28>)
 8002c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4c:	f7fd ff5e 	bl	8000b0c <__aeabi_dcmplt>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d008      	beq.n	8002c68 <main+0x18e0>
 8002c56:	4b5b      	ldr	r3, [pc, #364]	; (8002dc4 <main+0x1a3c>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	705a      	strb	r2, [r3, #1]
 8002c5c:	4b5a      	ldr	r3, [pc, #360]	; (8002dc8 <main+0x1a40>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	3301      	adds	r3, #1
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	4b58      	ldr	r3, [pc, #352]	; (8002dc8 <main+0x1a40>)
 8002c66:	701a      	strb	r2, [r3, #0]
				if (waterRatio < 0.5*4) {warningInfo[1] = 1; petWarning+=10;}
 8002c68:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002c6c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c78:	d508      	bpl.n	8002c8c <main+0x1904>
 8002c7a:	4b52      	ldr	r3, [pc, #328]	; (8002dc4 <main+0x1a3c>)
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	705a      	strb	r2, [r3, #1]
 8002c80:	4b51      	ldr	r3, [pc, #324]	; (8002dc8 <main+0x1a40>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	330a      	adds	r3, #10
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	4b4f      	ldr	r3, [pc, #316]	; (8002dc8 <main+0x1a40>)
 8002c8a:	701a      	strb	r2, [r3, #0]
				waterFresh = floor((waterFresh - ((AHT10_Temp + 40)*(AHT10_Temp + 40)/60.0))*10) / 10.0;
 8002c8c:	4b4f      	ldr	r3, [pc, #316]	; (8002dcc <main+0x1a44>)
 8002c8e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002c92:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002c96:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002dd0 <main+0x1a48>
 8002c9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002c9e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002ca2:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8002dd0 <main+0x1a48>
 8002ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cae:	ee17 0a90 	vmov	r0, s15
 8002cb2:	f7fd fc61 	bl	8000578 <__aeabi_f2d>
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	4b46      	ldr	r3, [pc, #280]	; (8002dd4 <main+0x1a4c>)
 8002cbc:	f7fd fdde 	bl	800087c <__aeabi_ddiv>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	4629      	mov	r1, r5
 8002cc8:	f7fd faf6 	bl	80002b8 <__aeabi_dsub>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	4b3f      	ldr	r3, [pc, #252]	; (8002dd8 <main+0x1a50>)
 8002cda:	f7fd fca5 	bl	8000628 <__aeabi_dmul>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	ec43 2b17 	vmov	d7, r2, r3
 8002ce6:	eeb0 0a47 	vmov.f32	s0, s14
 8002cea:	eef0 0a67 	vmov.f32	s1, s15
 8002cee:	f00a fb03 	bl	800d2f8 <floor>
 8002cf2:	ec51 0b10 	vmov	r0, r1, d0
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	4b37      	ldr	r3, [pc, #220]	; (8002dd8 <main+0x1a50>)
 8002cfc:	f7fd fdbe 	bl	800087c <__aeabi_ddiv>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4931      	ldr	r1, [pc, #196]	; (8002dcc <main+0x1a44>)
 8002d06:	e9c1 2300 	strd	r2, r3, [r1]
				foodFresh = floor((foodFresh - ((AHT10_Temp + 40)*(AHT10_Temp + 40)*(AHT10_Humid + 50) / 20000.0))*10)/10.0;
 8002d0a:	4b34      	ldr	r3, [pc, #208]	; (8002ddc <main+0x1a54>)
 8002d0c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002d10:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002d14:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002dd0 <main+0x1a48>
 8002d18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002d1c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002d20:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002dd0 <main+0x1a48>
 8002d24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d2c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002d30:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002de0 <main+0x1a58>
 8002d34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d3c:	ee17 0a90 	vmov	r0, s15
 8002d40:	f7fd fc1a 	bl	8000578 <__aeabi_f2d>
 8002d44:	a31c      	add	r3, pc, #112	; (adr r3, 8002db8 <main+0x1a30>)
 8002d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4a:	f7fd fd97 	bl	800087c <__aeabi_ddiv>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4620      	mov	r0, r4
 8002d54:	4629      	mov	r1, r5
 8002d56:	f7fd faaf 	bl	80002b8 <__aeabi_dsub>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4610      	mov	r0, r2
 8002d60:	4619      	mov	r1, r3
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	4b1c      	ldr	r3, [pc, #112]	; (8002dd8 <main+0x1a50>)
 8002d68:	f7fd fc5e 	bl	8000628 <__aeabi_dmul>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	ec43 2b17 	vmov	d7, r2, r3
 8002d74:	eeb0 0a47 	vmov.f32	s0, s14
 8002d78:	eef0 0a67 	vmov.f32	s1, s15
 8002d7c:	f00a fabc 	bl	800d2f8 <floor>
 8002d80:	ec51 0b10 	vmov	r0, r1, d0
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <main+0x1a50>)
 8002d8a:	f7fd fd77 	bl	800087c <__aeabi_ddiv>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4912      	ldr	r1, [pc, #72]	; (8002ddc <main+0x1a54>)
 8002d94:	e9c1 2300 	strd	r2, r3, [r1]
				status = 0;
 8002d98:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <main+0x1a5c>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	701a      	strb	r2, [r3, #0]
 8002d9e:	f7fe bb93 	b.w	80014c8 <main+0x140>
		{
 8002da2:	bf00      	nop
		if (petWarning)
 8002da4:	f7fe bb90 	b.w	80014c8 <main+0x140>
 8002da8:	66666666 	.word	0x66666666
 8002dac:	40166666 	.word	0x40166666
 8002db0:	66666666 	.word	0x66666666
 8002db4:	40066666 	.word	0x40066666
 8002db8:	00000000 	.word	0x00000000
 8002dbc:	40d38800 	.word	0x40d38800
 8002dc0:	2000059c 	.word	0x2000059c
 8002dc4:	20000724 	.word	0x20000724
 8002dc8:	20000720 	.word	0x20000720
 8002dcc:	20000010 	.word	0x20000010
 8002dd0:	42200000 	.word	0x42200000
 8002dd4:	404e0000 	.word	0x404e0000
 8002dd8:	40240000 	.word	0x40240000
 8002ddc:	20000008 	.word	0x20000008
 8002de0:	42480000 	.word	0x42480000
 8002de4:	200006fa 	.word	0x200006fa
 8002de8:	9999999a 	.word	0x9999999a
 8002dec:	3fb99999 	.word	0x3fb99999

08002df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b096      	sub	sp, #88	; 0x58
 8002df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002df6:	f107 0314 	add.w	r3, r7, #20
 8002dfa:	2244      	movs	r2, #68	; 0x44
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f007 fbac 	bl	800a55c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e04:	463b      	mov	r3, r7
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	605a      	str	r2, [r3, #4]
 8002e0c:	609a      	str	r2, [r3, #8]
 8002e0e:	60da      	str	r2, [r3, #12]
 8002e10:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002e12:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002e16:	f003 fc35 	bl	8006684 <HAL_PWREx_ControlVoltageScaling>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002e20:	f001 f948 	bl	80040b4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002e24:	2310      	movs	r3, #16
 8002e26:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002e30:	2360      	movs	r3, #96	; 0x60
 8002e32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002e34:	2300      	movs	r3, #0
 8002e36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e38:	f107 0314 	add.w	r3, r7, #20
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f003 fcd5 	bl	80067ec <HAL_RCC_OscConfig>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8002e48:	f001 f934 	bl	80040b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e4c:	230f      	movs	r3, #15
 8002e4e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002e50:	2300      	movs	r3, #0
 8002e52:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002e60:	463b      	mov	r3, r7
 8002e62:	2100      	movs	r1, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f004 f8db 	bl	8007020 <HAL_RCC_ClockConfig>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002e70:	f001 f920 	bl	80040b4 <Error_Handler>
  }
}
 8002e74:	bf00      	nop
 8002e76:	3758      	adds	r7, #88	; 0x58
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e80:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002e82:	4a1c      	ldr	r2, [pc, #112]	; (8002ef4 <MX_I2C1_Init+0x78>)
 8002e84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8002e86:	4b1a      	ldr	r3, [pc, #104]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002e88:	f640 6214 	movw	r2, #3604	; 0xe14
 8002e8c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002e8e:	4b18      	ldr	r3, [pc, #96]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e94:	4b16      	ldr	r3, [pc, #88]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e9a:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002ea0:	4b13      	ldr	r3, [pc, #76]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ea6:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002eac:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002eb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002eb8:	480d      	ldr	r0, [pc, #52]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002eba:	f002 fcd1 	bl	8005860 <HAL_I2C_Init>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002ec4:	f001 f8f6 	bl	80040b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ec8:	2100      	movs	r1, #0
 8002eca:	4809      	ldr	r0, [pc, #36]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002ecc:	f003 fb22 	bl	8006514 <HAL_I2CEx_ConfigAnalogFilter>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002ed6:	f001 f8ed 	bl	80040b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002eda:	2100      	movs	r1, #0
 8002edc:	4804      	ldr	r0, [pc, #16]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002ede:	f003 fb64 	bl	80065aa <HAL_I2CEx_ConfigDigitalFilter>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002ee8:	f001 f8e4 	bl	80040b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002eec:	bf00      	nop
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	200002ac 	.word	0x200002ac
 8002ef4:	40005400 	.word	0x40005400

08002ef8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002efc:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <MX_I2C2_Init+0x74>)
 8002efe:	4a1c      	ldr	r2, [pc, #112]	; (8002f70 <MX_I2C2_Init+0x78>)
 8002f00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8002f02:	4b1a      	ldr	r3, [pc, #104]	; (8002f6c <MX_I2C2_Init+0x74>)
 8002f04:	f640 6214 	movw	r2, #3604	; 0xe14
 8002f08:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 20;
 8002f0a:	4b18      	ldr	r3, [pc, #96]	; (8002f6c <MX_I2C2_Init+0x74>)
 8002f0c:	2214      	movs	r2, #20
 8002f0e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f10:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <MX_I2C2_Init+0x74>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f16:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <MX_I2C2_Init+0x74>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002f1c:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <MX_I2C2_Init+0x74>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f22:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <MX_I2C2_Init+0x74>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f28:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <MX_I2C2_Init+0x74>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f2e:	4b0f      	ldr	r3, [pc, #60]	; (8002f6c <MX_I2C2_Init+0x74>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002f34:	480d      	ldr	r0, [pc, #52]	; (8002f6c <MX_I2C2_Init+0x74>)
 8002f36:	f002 fc93 	bl	8005860 <HAL_I2C_Init>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002f40:	f001 f8b8 	bl	80040b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f44:	2100      	movs	r1, #0
 8002f46:	4809      	ldr	r0, [pc, #36]	; (8002f6c <MX_I2C2_Init+0x74>)
 8002f48:	f003 fae4 	bl	8006514 <HAL_I2CEx_ConfigAnalogFilter>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8002f52:	f001 f8af 	bl	80040b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002f56:	2100      	movs	r1, #0
 8002f58:	4804      	ldr	r0, [pc, #16]	; (8002f6c <MX_I2C2_Init+0x74>)
 8002f5a:	f003 fb26 	bl	80065aa <HAL_I2CEx_ConfigDigitalFilter>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8002f64:	f001 f8a6 	bl	80040b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002f68:	bf00      	nop
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20000300 	.word	0x20000300
 8002f70:	40005800 	.word	0x40005800

08002f74 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002f78:	4b22      	ldr	r3, [pc, #136]	; (8003004 <MX_LPUART1_UART_Init+0x90>)
 8002f7a:	4a23      	ldr	r2, [pc, #140]	; (8003008 <MX_LPUART1_UART_Init+0x94>)
 8002f7c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002f7e:	4b21      	ldr	r3, [pc, #132]	; (8003004 <MX_LPUART1_UART_Init+0x90>)
 8002f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f84:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f86:	4b1f      	ldr	r3, [pc, #124]	; (8003004 <MX_LPUART1_UART_Init+0x90>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002f8c:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <MX_LPUART1_UART_Init+0x90>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002f92:	4b1c      	ldr	r3, [pc, #112]	; (8003004 <MX_LPUART1_UART_Init+0x90>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002f98:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <MX_LPUART1_UART_Init+0x90>)
 8002f9a:	220c      	movs	r2, #12
 8002f9c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f9e:	4b19      	ldr	r3, [pc, #100]	; (8003004 <MX_LPUART1_UART_Init+0x90>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fa4:	4b17      	ldr	r3, [pc, #92]	; (8003004 <MX_LPUART1_UART_Init+0x90>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002faa:	4b16      	ldr	r3, [pc, #88]	; (8003004 <MX_LPUART1_UART_Init+0x90>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fb0:	4b14      	ldr	r3, [pc, #80]	; (8003004 <MX_LPUART1_UART_Init+0x90>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002fb6:	4b13      	ldr	r3, [pc, #76]	; (8003004 <MX_LPUART1_UART_Init+0x90>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002fbc:	4811      	ldr	r0, [pc, #68]	; (8003004 <MX_LPUART1_UART_Init+0x90>)
 8002fbe:	f006 f8cb 	bl	8009158 <HAL_UART_Init>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002fc8:	f001 f874 	bl	80040b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fcc:	2100      	movs	r1, #0
 8002fce:	480d      	ldr	r0, [pc, #52]	; (8003004 <MX_LPUART1_UART_Init+0x90>)
 8002fd0:	f007 f984 	bl	800a2dc <HAL_UARTEx_SetTxFifoThreshold>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002fda:	f001 f86b 	bl	80040b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4808      	ldr	r0, [pc, #32]	; (8003004 <MX_LPUART1_UART_Init+0x90>)
 8002fe2:	f007 f9b9 	bl	800a358 <HAL_UARTEx_SetRxFifoThreshold>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002fec:	f001 f862 	bl	80040b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002ff0:	4804      	ldr	r0, [pc, #16]	; (8003004 <MX_LPUART1_UART_Init+0x90>)
 8002ff2:	f007 f93a 	bl	800a26a <HAL_UARTEx_DisableFifoMode>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002ffc:	f001 f85a 	bl	80040b4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003000:	bf00      	nop
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20000354 	.word	0x20000354
 8003008:	40008000 	.word	0x40008000

0800300c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003010:	4b22      	ldr	r3, [pc, #136]	; (800309c <MX_USART2_UART_Init+0x90>)
 8003012:	4a23      	ldr	r2, [pc, #140]	; (80030a0 <MX_USART2_UART_Init+0x94>)
 8003014:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003016:	4b21      	ldr	r3, [pc, #132]	; (800309c <MX_USART2_UART_Init+0x90>)
 8003018:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800301c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800301e:	4b1f      	ldr	r3, [pc, #124]	; (800309c <MX_USART2_UART_Init+0x90>)
 8003020:	2200      	movs	r2, #0
 8003022:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003024:	4b1d      	ldr	r3, [pc, #116]	; (800309c <MX_USART2_UART_Init+0x90>)
 8003026:	2200      	movs	r2, #0
 8003028:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800302a:	4b1c      	ldr	r3, [pc, #112]	; (800309c <MX_USART2_UART_Init+0x90>)
 800302c:	2200      	movs	r2, #0
 800302e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003030:	4b1a      	ldr	r3, [pc, #104]	; (800309c <MX_USART2_UART_Init+0x90>)
 8003032:	220c      	movs	r2, #12
 8003034:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003036:	4b19      	ldr	r3, [pc, #100]	; (800309c <MX_USART2_UART_Init+0x90>)
 8003038:	2200      	movs	r2, #0
 800303a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800303c:	4b17      	ldr	r3, [pc, #92]	; (800309c <MX_USART2_UART_Init+0x90>)
 800303e:	2200      	movs	r2, #0
 8003040:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003042:	4b16      	ldr	r3, [pc, #88]	; (800309c <MX_USART2_UART_Init+0x90>)
 8003044:	2200      	movs	r2, #0
 8003046:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003048:	4b14      	ldr	r3, [pc, #80]	; (800309c <MX_USART2_UART_Init+0x90>)
 800304a:	2200      	movs	r2, #0
 800304c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800304e:	4b13      	ldr	r3, [pc, #76]	; (800309c <MX_USART2_UART_Init+0x90>)
 8003050:	2200      	movs	r2, #0
 8003052:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003054:	4811      	ldr	r0, [pc, #68]	; (800309c <MX_USART2_UART_Init+0x90>)
 8003056:	f006 f87f 	bl	8009158 <HAL_UART_Init>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003060:	f001 f828 	bl	80040b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003064:	2100      	movs	r1, #0
 8003066:	480d      	ldr	r0, [pc, #52]	; (800309c <MX_USART2_UART_Init+0x90>)
 8003068:	f007 f938 	bl	800a2dc <HAL_UARTEx_SetTxFifoThreshold>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003072:	f001 f81f 	bl	80040b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003076:	2100      	movs	r1, #0
 8003078:	4808      	ldr	r0, [pc, #32]	; (800309c <MX_USART2_UART_Init+0x90>)
 800307a:	f007 f96d 	bl	800a358 <HAL_UARTEx_SetRxFifoThreshold>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003084:	f001 f816 	bl	80040b4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8003088:	4804      	ldr	r0, [pc, #16]	; (800309c <MX_USART2_UART_Init+0x90>)
 800308a:	f007 f8b3 	bl	800a1f4 <HAL_UARTEx_EnableFifoMode>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003094:	f001 f80e 	bl	80040b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003098:	bf00      	nop
 800309a:	bd80      	pop	{r7, pc}
 800309c:	200003e4 	.word	0x200003e4
 80030a0:	40004400 	.word	0x40004400

080030a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08e      	sub	sp, #56	; 0x38
 80030a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	605a      	str	r2, [r3, #4]
 80030b4:	609a      	str	r2, [r3, #8]
 80030b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030b8:	f107 031c 	add.w	r3, r7, #28
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030c4:	463b      	mov	r3, r7
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	605a      	str	r2, [r3, #4]
 80030cc:	609a      	str	r2, [r3, #8]
 80030ce:	60da      	str	r2, [r3, #12]
 80030d0:	611a      	str	r2, [r3, #16]
 80030d2:	615a      	str	r2, [r3, #20]
 80030d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80030d6:	4b2d      	ldr	r3, [pc, #180]	; (800318c <MX_TIM4_Init+0xe8>)
 80030d8:	4a2d      	ldr	r2, [pc, #180]	; (8003190 <MX_TIM4_Init+0xec>)
 80030da:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 19;
 80030dc:	4b2b      	ldr	r3, [pc, #172]	; (800318c <MX_TIM4_Init+0xe8>)
 80030de:	2213      	movs	r2, #19
 80030e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030e2:	4b2a      	ldr	r3, [pc, #168]	; (800318c <MX_TIM4_Init+0xe8>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3999;
 80030e8:	4b28      	ldr	r3, [pc, #160]	; (800318c <MX_TIM4_Init+0xe8>)
 80030ea:	f640 729f 	movw	r2, #3999	; 0xf9f
 80030ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030f0:	4b26      	ldr	r3, [pc, #152]	; (800318c <MX_TIM4_Init+0xe8>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030f6:	4b25      	ldr	r3, [pc, #148]	; (800318c <MX_TIM4_Init+0xe8>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80030fc:	4823      	ldr	r0, [pc, #140]	; (800318c <MX_TIM4_Init+0xe8>)
 80030fe:	f004 ff65 	bl	8007fcc <HAL_TIM_Base_Init>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8003108:	f000 ffd4 	bl	80040b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800310c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003110:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003112:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003116:	4619      	mov	r1, r3
 8003118:	481c      	ldr	r0, [pc, #112]	; (800318c <MX_TIM4_Init+0xe8>)
 800311a:	f005 fa9b 	bl	8008654 <HAL_TIM_ConfigClockSource>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003124:	f000 ffc6 	bl	80040b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003128:	4818      	ldr	r0, [pc, #96]	; (800318c <MX_TIM4_Init+0xe8>)
 800312a:	f005 f817 	bl	800815c <HAL_TIM_PWM_Init>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003134:	f000 ffbe 	bl	80040b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003138:	2300      	movs	r3, #0
 800313a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800313c:	2300      	movs	r3, #0
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003140:	f107 031c 	add.w	r3, r7, #28
 8003144:	4619      	mov	r1, r3
 8003146:	4811      	ldr	r0, [pc, #68]	; (800318c <MX_TIM4_Init+0xe8>)
 8003148:	f005 ff7e 	bl	8009048 <HAL_TIMEx_MasterConfigSynchronization>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003152:	f000 ffaf 	bl	80040b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003156:	2360      	movs	r3, #96	; 0x60
 8003158:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800315e:	2300      	movs	r3, #0
 8003160:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003166:	463b      	mov	r3, r7
 8003168:	2204      	movs	r2, #4
 800316a:	4619      	mov	r1, r3
 800316c:	4807      	ldr	r0, [pc, #28]	; (800318c <MX_TIM4_Init+0xe8>)
 800316e:	f005 f95d 	bl	800842c <HAL_TIM_PWM_ConfigChannel>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8003178:	f000 ff9c 	bl	80040b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800317c:	4803      	ldr	r0, [pc, #12]	; (800318c <MX_TIM4_Init+0xe8>)
 800317e:	f001 fbf9 	bl	8004974 <HAL_TIM_MspPostInit>

}
 8003182:	bf00      	nop
 8003184:	3738      	adds	r7, #56	; 0x38
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	200004d4 	.word	0x200004d4
 8003190:	40000800 	.word	0x40000800

08003194 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800319a:	4b12      	ldr	r3, [pc, #72]	; (80031e4 <MX_DMA_Init+0x50>)
 800319c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800319e:	4a11      	ldr	r2, [pc, #68]	; (80031e4 <MX_DMA_Init+0x50>)
 80031a0:	f043 0304 	orr.w	r3, r3, #4
 80031a4:	6493      	str	r3, [r2, #72]	; 0x48
 80031a6:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <MX_DMA_Init+0x50>)
 80031a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	607b      	str	r3, [r7, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031b2:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <MX_DMA_Init+0x50>)
 80031b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b6:	4a0b      	ldr	r2, [pc, #44]	; (80031e4 <MX_DMA_Init+0x50>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6493      	str	r3, [r2, #72]	; 0x48
 80031be:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <MX_DMA_Init+0x50>)
 80031c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	603b      	str	r3, [r7, #0]
 80031c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2101      	movs	r1, #1
 80031ce:	200b      	movs	r0, #11
 80031d0:	f001 fec3 	bl	8004f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80031d4:	200b      	movs	r0, #11
 80031d6:	f001 fedc 	bl	8004f92 <HAL_NVIC_EnableIRQ>

}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000

080031e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08e      	sub	sp, #56	; 0x38
 80031ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	605a      	str	r2, [r3, #4]
 80031f8:	609a      	str	r2, [r3, #8]
 80031fa:	60da      	str	r2, [r3, #12]
 80031fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031fe:	4bb4      	ldr	r3, [pc, #720]	; (80034d0 <MX_GPIO_Init+0x2e8>)
 8003200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003202:	4ab3      	ldr	r2, [pc, #716]	; (80034d0 <MX_GPIO_Init+0x2e8>)
 8003204:	f043 0310 	orr.w	r3, r3, #16
 8003208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800320a:	4bb1      	ldr	r3, [pc, #708]	; (80034d0 <MX_GPIO_Init+0x2e8>)
 800320c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	623b      	str	r3, [r7, #32]
 8003214:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003216:	4bae      	ldr	r3, [pc, #696]	; (80034d0 <MX_GPIO_Init+0x2e8>)
 8003218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321a:	4aad      	ldr	r2, [pc, #692]	; (80034d0 <MX_GPIO_Init+0x2e8>)
 800321c:	f043 0304 	orr.w	r3, r3, #4
 8003220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003222:	4bab      	ldr	r3, [pc, #684]	; (80034d0 <MX_GPIO_Init+0x2e8>)
 8003224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	61fb      	str	r3, [r7, #28]
 800322c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800322e:	4ba8      	ldr	r3, [pc, #672]	; (80034d0 <MX_GPIO_Init+0x2e8>)
 8003230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003232:	4aa7      	ldr	r2, [pc, #668]	; (80034d0 <MX_GPIO_Init+0x2e8>)
 8003234:	f043 0320 	orr.w	r3, r3, #32
 8003238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800323a:	4ba5      	ldr	r3, [pc, #660]	; (80034d0 <MX_GPIO_Init+0x2e8>)
 800323c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	61bb      	str	r3, [r7, #24]
 8003244:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003246:	4ba2      	ldr	r3, [pc, #648]	; (80034d0 <MX_GPIO_Init+0x2e8>)
 8003248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324a:	4aa1      	ldr	r2, [pc, #644]	; (80034d0 <MX_GPIO_Init+0x2e8>)
 800324c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003252:	4b9f      	ldr	r3, [pc, #636]	; (80034d0 <MX_GPIO_Init+0x2e8>)
 8003254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800325e:	4b9c      	ldr	r3, [pc, #624]	; (80034d0 <MX_GPIO_Init+0x2e8>)
 8003260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003262:	4a9b      	ldr	r2, [pc, #620]	; (80034d0 <MX_GPIO_Init+0x2e8>)
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800326a:	4b99      	ldr	r3, [pc, #612]	; (80034d0 <MX_GPIO_Init+0x2e8>)
 800326c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003276:	4b96      	ldr	r3, [pc, #600]	; (80034d0 <MX_GPIO_Init+0x2e8>)
 8003278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327a:	4a95      	ldr	r2, [pc, #596]	; (80034d0 <MX_GPIO_Init+0x2e8>)
 800327c:	f043 0302 	orr.w	r3, r3, #2
 8003280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003282:	4b93      	ldr	r3, [pc, #588]	; (80034d0 <MX_GPIO_Init+0x2e8>)
 8003284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800328e:	4b90      	ldr	r3, [pc, #576]	; (80034d0 <MX_GPIO_Init+0x2e8>)
 8003290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003292:	4a8f      	ldr	r2, [pc, #572]	; (80034d0 <MX_GPIO_Init+0x2e8>)
 8003294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800329a:	4b8d      	ldr	r3, [pc, #564]	; (80034d0 <MX_GPIO_Init+0x2e8>)
 800329c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a2:	60bb      	str	r3, [r7, #8]
 80032a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032a6:	4b8a      	ldr	r3, [pc, #552]	; (80034d0 <MX_GPIO_Init+0x2e8>)
 80032a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032aa:	4a89      	ldr	r2, [pc, #548]	; (80034d0 <MX_GPIO_Init+0x2e8>)
 80032ac:	f043 0308 	orr.w	r3, r3, #8
 80032b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032b2:	4b87      	ldr	r3, [pc, #540]	; (80034d0 <MX_GPIO_Init+0x2e8>)
 80032b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	607b      	str	r3, [r7, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80032be:	f003 fa85 	bl	80067cc <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 80032c2:	2200      	movs	r2, #0
 80032c4:	2122      	movs	r1, #34	; 0x22
 80032c6:	4883      	ldr	r0, [pc, #524]	; (80034d4 <MX_GPIO_Init+0x2ec>)
 80032c8:	f002 fa9a 	bl	8005800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_6, GPIO_PIN_RESET);
 80032cc:	2200      	movs	r2, #0
 80032ce:	2144      	movs	r1, #68	; 0x44
 80032d0:	4881      	ldr	r0, [pc, #516]	; (80034d8 <MX_GPIO_Init+0x2f0>)
 80032d2:	f002 fa95 	bl	8005800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 80032d6:	2200      	movs	r2, #0
 80032d8:	2102      	movs	r1, #2
 80032da:	4880      	ldr	r0, [pc, #512]	; (80034dc <MX_GPIO_Init+0x2f4>)
 80032dc:	f002 fa90 	bl	8005800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80032e0:	2200      	movs	r2, #0
 80032e2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80032e6:	487e      	ldr	r0, [pc, #504]	; (80034e0 <MX_GPIO_Init+0x2f8>)
 80032e8:	f002 fa8a 	bl	8005800 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80032ec:	230c      	movs	r3, #12
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f0:	2302      	movs	r3, #2
 80032f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f8:	2300      	movs	r3, #0
 80032fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80032fc:	230d      	movs	r3, #13
 80032fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003304:	4619      	mov	r1, r3
 8003306:	4876      	ldr	r0, [pc, #472]	; (80034e0 <MX_GPIO_Init+0x2f8>)
 8003308:	f002 f8d0 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE7 PE8 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800330c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003312:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003318:	2302      	movs	r3, #2
 800331a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800331c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003320:	4619      	mov	r1, r3
 8003322:	486f      	ldr	r0, [pc, #444]	; (80034e0 <MX_GPIO_Init+0x2f8>)
 8003324:	f002 f8c2 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003328:	2380      	movs	r3, #128	; 0x80
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332c:	2302      	movs	r3, #2
 800332e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003330:	2300      	movs	r3, #0
 8003332:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003334:	2300      	movs	r3, #0
 8003336:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003338:	230d      	movs	r3, #13
 800333a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800333c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003340:	4619      	mov	r1, r3
 8003342:	4868      	ldr	r0, [pc, #416]	; (80034e4 <MX_GPIO_Init+0x2fc>)
 8003344:	f002 f8b2 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8003348:	2311      	movs	r3, #17
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800334c:	2300      	movs	r3, #0
 800334e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	2300      	movs	r3, #0
 8003352:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003358:	4619      	mov	r1, r3
 800335a:	485e      	ldr	r0, [pc, #376]	; (80034d4 <MX_GPIO_Init+0x2ec>)
 800335c:	f002 f8a6 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8003360:	2322      	movs	r3, #34	; 0x22
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003364:	2301      	movs	r3, #1
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003368:	2300      	movs	r3, #0
 800336a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336c:	2300      	movs	r3, #0
 800336e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003374:	4619      	mov	r1, r3
 8003376:	4857      	ldr	r0, [pc, #348]	; (80034d4 <MX_GPIO_Init+0x2ec>)
 8003378:	f002 f898 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800337c:	230c      	movs	r3, #12
 800337e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003380:	230b      	movs	r3, #11
 8003382:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003384:	2300      	movs	r3, #0
 8003386:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800338c:	4619      	mov	r1, r3
 800338e:	4851      	ldr	r0, [pc, #324]	; (80034d4 <MX_GPIO_Init+0x2ec>)
 8003390:	f002 f88c 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003394:	2301      	movs	r3, #1
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003398:	2302      	movs	r3, #2
 800339a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	2300      	movs	r3, #0
 800339e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a0:	2300      	movs	r3, #0
 80033a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033a4:	2301      	movs	r3, #1
 80033a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ac:	4619      	mov	r1, r3
 80033ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033b2:	f002 f87b 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80033b6:	2302      	movs	r3, #2
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80033ba:	230b      	movs	r3, #11
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033c6:	4619      	mov	r1, r3
 80033c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033cc:	f002 f86e 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80033d0:	23f0      	movs	r3, #240	; 0xf0
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d4:	2302      	movs	r3, #2
 80033d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033dc:	2303      	movs	r3, #3
 80033de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033e0:	2305      	movs	r3, #5
 80033e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033e8:	4619      	mov	r1, r3
 80033ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033ee:	f002 f85d 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033f2:	2301      	movs	r3, #1
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f6:	2302      	movs	r3, #2
 80033f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fe:	2300      	movs	r3, #0
 8003400:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003402:	2302      	movs	r3, #2
 8003404:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800340a:	4619      	mov	r1, r3
 800340c:	4832      	ldr	r0, [pc, #200]	; (80034d8 <MX_GPIO_Init+0x2f0>)
 800340e:	f002 f84d 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003412:	2302      	movs	r3, #2
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003416:	230b      	movs	r3, #11
 8003418:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341a:	2300      	movs	r3, #0
 800341c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800341e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003422:	4619      	mov	r1, r3
 8003424:	482c      	ldr	r0, [pc, #176]	; (80034d8 <MX_GPIO_Init+0x2f0>)
 8003426:	f002 f841 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 800342a:	2344      	movs	r3, #68	; 0x44
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800342e:	2301      	movs	r3, #1
 8003430:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003432:	2300      	movs	r3, #0
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003436:	2300      	movs	r3, #0
 8003438:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800343a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800343e:	4619      	mov	r1, r3
 8003440:	4825      	ldr	r0, [pc, #148]	; (80034d8 <MX_GPIO_Init+0x2f0>)
 8003442:	f002 f833 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003446:	2301      	movs	r3, #1
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800344a:	2300      	movs	r3, #0
 800344c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344e:	2300      	movs	r3, #0
 8003450:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003456:	4619      	mov	r1, r3
 8003458:	4820      	ldr	r0, [pc, #128]	; (80034dc <MX_GPIO_Init+0x2f4>)
 800345a:	f002 f827 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800345e:	2302      	movs	r3, #2
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003462:	2301      	movs	r3, #1
 8003464:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003466:	2300      	movs	r3, #0
 8003468:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346a:	2300      	movs	r3, #0
 800346c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800346e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003472:	4619      	mov	r1, r3
 8003474:	4819      	ldr	r0, [pc, #100]	; (80034dc <MX_GPIO_Init+0x2f4>)
 8003476:	f002 f819 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800347a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003480:	2302      	movs	r3, #2
 8003482:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003484:	2300      	movs	r3, #0
 8003486:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003488:	2300      	movs	r3, #0
 800348a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800348c:	2301      	movs	r3, #1
 800348e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003494:	4619      	mov	r1, r3
 8003496:	4812      	ldr	r0, [pc, #72]	; (80034e0 <MX_GPIO_Init+0x2f8>)
 8003498:	f002 f808 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800349c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034a2:	2301      	movs	r3, #1
 80034a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034aa:	2300      	movs	r3, #0
 80034ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034b2:	4619      	mov	r1, r3
 80034b4:	480a      	ldr	r0, [pc, #40]	; (80034e0 <MX_GPIO_Init+0x2f8>)
 80034b6:	f001 fff9 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c0:	2302      	movs	r3, #2
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c8:	2300      	movs	r3, #0
 80034ca:	633b      	str	r3, [r7, #48]	; 0x30
 80034cc:	e00c      	b.n	80034e8 <MX_GPIO_Init+0x300>
 80034ce:	bf00      	nop
 80034d0:	40021000 	.word	0x40021000
 80034d4:	48000800 	.word	0x48000800
 80034d8:	48000400 	.word	0x48000400
 80034dc:	48001800 	.word	0x48001800
 80034e0:	48001000 	.word	0x48001000
 80034e4:	48001400 	.word	0x48001400
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034e8:	2301      	movs	r3, #1
 80034ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f0:	4619      	mov	r1, r3
 80034f2:	4867      	ldr	r0, [pc, #412]	; (8003690 <MX_GPIO_Init+0x4a8>)
 80034f4:	f001 ffda 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80034f8:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fe:	2302      	movs	r3, #2
 8003500:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003502:	2300      	movs	r3, #0
 8003504:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003506:	2300      	movs	r3, #0
 8003508:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800350a:	230d      	movs	r3, #13
 800350c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800350e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003512:	4619      	mov	r1, r3
 8003514:	485e      	ldr	r0, [pc, #376]	; (8003690 <MX_GPIO_Init+0x4a8>)
 8003516:	f001 ffc9 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800351a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003520:	2302      	movs	r3, #2
 8003522:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003524:	2300      	movs	r3, #0
 8003526:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003528:	2300      	movs	r3, #0
 800352a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800352c:	230e      	movs	r3, #14
 800352e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003534:	4619      	mov	r1, r3
 8003536:	4856      	ldr	r0, [pc, #344]	; (8003690 <MX_GPIO_Init+0x4a8>)
 8003538:	f001 ffb8 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800353c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003542:	2302      	movs	r3, #2
 8003544:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003546:	2300      	movs	r3, #0
 8003548:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800354a:	2303      	movs	r3, #3
 800354c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800354e:	2307      	movs	r3, #7
 8003550:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003556:	4619      	mov	r1, r3
 8003558:	484e      	ldr	r0, [pc, #312]	; (8003694 <MX_GPIO_Init+0x4ac>)
 800355a:	f001 ffa7 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800355e:	2340      	movs	r3, #64	; 0x40
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003562:	2302      	movs	r3, #2
 8003564:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003566:	2300      	movs	r3, #0
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356a:	2300      	movs	r3, #0
 800356c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800356e:	230d      	movs	r3, #13
 8003570:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003576:	4619      	mov	r1, r3
 8003578:	4847      	ldr	r0, [pc, #284]	; (8003698 <MX_GPIO_Init+0x4b0>)
 800357a:	f001 ff97 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800357e:	2380      	movs	r3, #128	; 0x80
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003582:	2302      	movs	r3, #2
 8003584:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003586:	2300      	movs	r3, #0
 8003588:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800358a:	2300      	movs	r3, #0
 800358c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800358e:	2302      	movs	r3, #2
 8003590:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003596:	4619      	mov	r1, r3
 8003598:	483f      	ldr	r0, [pc, #252]	; (8003698 <MX_GPIO_Init+0x4b0>)
 800359a:	f001 ff87 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800359e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a4:	2302      	movs	r3, #2
 80035a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ac:	2303      	movs	r3, #3
 80035ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80035b0:	230c      	movs	r3, #12
 80035b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035b8:	4619      	mov	r1, r3
 80035ba:	4837      	ldr	r0, [pc, #220]	; (8003698 <MX_GPIO_Init+0x4b0>)
 80035bc:	f001 ff76 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80035c0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c6:	2302      	movs	r3, #2
 80035c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ce:	2303      	movs	r3, #3
 80035d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80035d2:	230a      	movs	r3, #10
 80035d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035da:	4619      	mov	r1, r3
 80035dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035e0:	f001 ff64 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80035e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035ea:	2300      	movs	r3, #0
 80035ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035f6:	4619      	mov	r1, r3
 80035f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035fc:	f001 ff56 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003600:	2301      	movs	r3, #1
 8003602:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003604:	2302      	movs	r3, #2
 8003606:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003608:	2300      	movs	r3, #0
 800360a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800360c:	2303      	movs	r3, #3
 800360e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003610:	2309      	movs	r3, #9
 8003612:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003618:	4619      	mov	r1, r3
 800361a:	481e      	ldr	r0, [pc, #120]	; (8003694 <MX_GPIO_Init+0x4ac>)
 800361c:	f001 ff46 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003620:	2302      	movs	r3, #2
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003624:	2300      	movs	r3, #0
 8003626:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003628:	2300      	movs	r3, #0
 800362a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800362c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003630:	4619      	mov	r1, r3
 8003632:	4818      	ldr	r0, [pc, #96]	; (8003694 <MX_GPIO_Init+0x4ac>)
 8003634:	f001 ff3a 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003638:	2304      	movs	r3, #4
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363c:	2302      	movs	r3, #2
 800363e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003640:	2300      	movs	r3, #0
 8003642:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003644:	2303      	movs	r3, #3
 8003646:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003648:	230c      	movs	r3, #12
 800364a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800364c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003650:	4619      	mov	r1, r3
 8003652:	4810      	ldr	r0, [pc, #64]	; (8003694 <MX_GPIO_Init+0x4ac>)
 8003654:	f001 ff2a 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003658:	2338      	movs	r3, #56	; 0x38
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365c:	2302      	movs	r3, #2
 800365e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003660:	2300      	movs	r3, #0
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003664:	2303      	movs	r3, #3
 8003666:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003668:	2306      	movs	r3, #6
 800366a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800366c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003670:	4619      	mov	r1, r3
 8003672:	4807      	ldr	r0, [pc, #28]	; (8003690 <MX_GPIO_Init+0x4a8>)
 8003674:	f001 ff1a 	bl	80054ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003678:	2200      	movs	r2, #0
 800367a:	2100      	movs	r1, #0
 800367c:	2017      	movs	r0, #23
 800367e:	f001 fc6c 	bl	8004f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003682:	2017      	movs	r0, #23
 8003684:	f001 fc85 	bl	8004f92 <HAL_NVIC_EnableIRQ>

}
 8003688:	bf00      	nop
 800368a:	3738      	adds	r7, #56	; 0x38
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	48000400 	.word	0x48000400
 8003694:	48000c00 	.word	0x48000c00
 8003698:	48000800 	.word	0x48000800

0800369c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08c      	sub	sp, #48	; 0x30
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
	char char_buffer[32];
	for (int i = 0; i < sizeof(buffer); i++) {
 80036a4:	2300      	movs	r3, #0
 80036a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036a8:	e00c      	b.n	80036c4 <HAL_UART_RxCpltCallback+0x28>
		char_buffer[i] = (char)(buffer[i]);
 80036aa:	4a14      	ldr	r2, [pc, #80]	; (80036fc <HAL_UART_RxCpltCallback+0x60>)
 80036ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ae:	4413      	add	r3, r2
 80036b0:	7819      	ldrb	r1, [r3, #0]
 80036b2:	f107 020c 	add.w	r2, r7, #12
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	4413      	add	r3, r2
 80036ba:	460a      	mov	r2, r1
 80036bc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(buffer); i++) {
 80036be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c0:	3301      	adds	r3, #1
 80036c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c6:	2b1f      	cmp	r3, #31
 80036c8:	d9ef      	bls.n	80036aa <HAL_UART_RxCpltCallback+0xe>
	}
	ssd1306_Init();
 80036ca:	f000 fd31 	bl	8004130 <ssd1306_Init>
	ssd1306_SetCursor(2,16);
 80036ce:	2110      	movs	r1, #16
 80036d0:	2002      	movs	r0, #2
 80036d2:	f000 fee5 	bl	80044a0 <ssd1306_SetCursor>
	ssd1306_WriteString(char_buffer, Font_7x10, White);
 80036d6:	4a0a      	ldr	r2, [pc, #40]	; (8003700 <HAL_UART_RxCpltCallback+0x64>)
 80036d8:	f107 000c 	add.w	r0, r7, #12
 80036dc:	2301      	movs	r3, #1
 80036de:	ca06      	ldmia	r2, {r1, r2}
 80036e0:	f000 feb8 	bl	8004454 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80036e4:	f000 fdb2 	bl	800424c <ssd1306_UpdateScreen>
	HAL_UART_Receive_DMA(&huart2, buffer, 32);
 80036e8:	2220      	movs	r2, #32
 80036ea:	4904      	ldr	r1, [pc, #16]	; (80036fc <HAL_UART_RxCpltCallback+0x60>)
 80036ec:	4805      	ldr	r0, [pc, #20]	; (8003704 <HAL_UART_RxCpltCallback+0x68>)
 80036ee:	f005 fe1b 	bl	8009328 <HAL_UART_Receive_DMA>
}
 80036f2:	bf00      	nop
 80036f4:	3730      	adds	r7, #48	; 0x30
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000774 	.word	0x20000774
 8003700:	20000040 	.word	0x20000040
 8003704:	200003e4 	.word	0x200003e4

08003708 <display_menu>:
		line[i] = data % 10;
		data /= 10;
	}
}

void display_menu(){
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
	if (dirty)
 800370c:	4b37      	ldr	r3, [pc, #220]	; (80037ec <display_menu+0xe4>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d004      	beq.n	800371e <display_menu+0x16>
	{
		ssd1306_Init();
 8003714:	f000 fd0c 	bl	8004130 <ssd1306_Init>
		dirty = 0;
 8003718:	4b34      	ldr	r3, [pc, #208]	; (80037ec <display_menu+0xe4>)
 800371a:	2200      	movs	r2, #0
 800371c:	701a      	strb	r2, [r3, #0]
	}

	ssd1306_SetCursor(0,2);
 800371e:	2102      	movs	r1, #2
 8003720:	2000      	movs	r0, #0
 8003722:	f000 febd 	bl	80044a0 <ssd1306_SetCursor>
	ssd1306_WriteString("       MENU        ", Font_7x10, White);
 8003726:	4a32      	ldr	r2, [pc, #200]	; (80037f0 <display_menu+0xe8>)
 8003728:	2301      	movs	r3, #1
 800372a:	ca06      	ldmia	r2, {r1, r2}
 800372c:	4831      	ldr	r0, [pc, #196]	; (80037f4 <display_menu+0xec>)
 800372e:	f000 fe91 	bl	8004454 <ssd1306_WriteString>
	if (page == 0)
 8003732:	4b31      	ldr	r3, [pc, #196]	; (80037f8 <display_menu+0xf0>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d128      	bne.n	800378c <display_menu+0x84>
	{
		ssd1306_SetCursor(2,16);
 800373a:	2110      	movs	r1, #16
 800373c:	2002      	movs	r0, #2
 800373e:	f000 feaf 	bl	80044a0 <ssd1306_SetCursor>
		ssd1306_WriteString("1-Release Food", Font_7x10, White);
 8003742:	4a2b      	ldr	r2, [pc, #172]	; (80037f0 <display_menu+0xe8>)
 8003744:	2301      	movs	r3, #1
 8003746:	ca06      	ldmia	r2, {r1, r2}
 8003748:	482c      	ldr	r0, [pc, #176]	; (80037fc <display_menu+0xf4>)
 800374a:	f000 fe83 	bl	8004454 <ssd1306_WriteString>
		ssd1306_SetCursor(2,28);
 800374e:	211c      	movs	r1, #28
 8003750:	2002      	movs	r0, #2
 8003752:	f000 fea5 	bl	80044a0 <ssd1306_SetCursor>
		ssd1306_WriteString("2-Release Water", Font_7x10, White);
 8003756:	4a26      	ldr	r2, [pc, #152]	; (80037f0 <display_menu+0xe8>)
 8003758:	2301      	movs	r3, #1
 800375a:	ca06      	ldmia	r2, {r1, r2}
 800375c:	4828      	ldr	r0, [pc, #160]	; (8003800 <display_menu+0xf8>)
 800375e:	f000 fe79 	bl	8004454 <ssd1306_WriteString>
		ssd1306_SetCursor(2,40);
 8003762:	2128      	movs	r1, #40	; 0x28
 8003764:	2002      	movs	r0, #2
 8003766:	f000 fe9b 	bl	80044a0 <ssd1306_SetCursor>
		ssd1306_WriteString("3-Feed in Bowl", Font_7x10, White);
 800376a:	4a21      	ldr	r2, [pc, #132]	; (80037f0 <display_menu+0xe8>)
 800376c:	2301      	movs	r3, #1
 800376e:	ca06      	ldmia	r2, {r1, r2}
 8003770:	4824      	ldr	r0, [pc, #144]	; (8003804 <display_menu+0xfc>)
 8003772:	f000 fe6f 	bl	8004454 <ssd1306_WriteString>
		ssd1306_SetCursor(2,52);
 8003776:	2134      	movs	r1, #52	; 0x34
 8003778:	2002      	movs	r0, #2
 800377a:	f000 fe91 	bl	80044a0 <ssd1306_SetCursor>
		ssd1306_WriteString("ENTER-Next Page", Font_7x10, White);
 800377e:	4a1c      	ldr	r2, [pc, #112]	; (80037f0 <display_menu+0xe8>)
 8003780:	2301      	movs	r3, #1
 8003782:	ca06      	ldmia	r2, {r1, r2}
 8003784:	4820      	ldr	r0, [pc, #128]	; (8003808 <display_menu+0x100>)
 8003786:	f000 fe65 	bl	8004454 <ssd1306_WriteString>
 800378a:	e02b      	b.n	80037e4 <display_menu+0xdc>
	}
	else if (page == 1)
 800378c:	4b1a      	ldr	r3, [pc, #104]	; (80037f8 <display_menu+0xf0>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d127      	bne.n	80037e4 <display_menu+0xdc>
	{
		ssd1306_SetCursor(2,16);
 8003794:	2110      	movs	r1, #16
 8003796:	2002      	movs	r0, #2
 8003798:	f000 fe82 	bl	80044a0 <ssd1306_SetCursor>
		ssd1306_WriteString("4-Real-Time Stat", Font_7x10, White);
 800379c:	4a14      	ldr	r2, [pc, #80]	; (80037f0 <display_menu+0xe8>)
 800379e:	2301      	movs	r3, #1
 80037a0:	ca06      	ldmia	r2, {r1, r2}
 80037a2:	481a      	ldr	r0, [pc, #104]	; (800380c <display_menu+0x104>)
 80037a4:	f000 fe56 	bl	8004454 <ssd1306_WriteString>
		ssd1306_SetCursor(2,28);
 80037a8:	211c      	movs	r1, #28
 80037aa:	2002      	movs	r0, #2
 80037ac:	f000 fe78 	bl	80044a0 <ssd1306_SetCursor>
		ssd1306_WriteString("5-Calibration", Font_7x10, White);
 80037b0:	4a0f      	ldr	r2, [pc, #60]	; (80037f0 <display_menu+0xe8>)
 80037b2:	2301      	movs	r3, #1
 80037b4:	ca06      	ldmia	r2, {r1, r2}
 80037b6:	4816      	ldr	r0, [pc, #88]	; (8003810 <display_menu+0x108>)
 80037b8:	f000 fe4c 	bl	8004454 <ssd1306_WriteString>
		ssd1306_SetCursor(2,40);
 80037bc:	2128      	movs	r1, #40	; 0x28
 80037be:	2002      	movs	r0, #2
 80037c0:	f000 fe6e 	bl	80044a0 <ssd1306_SetCursor>
		ssd1306_WriteString("6-Display History", Font_7x10, White);
 80037c4:	4a0a      	ldr	r2, [pc, #40]	; (80037f0 <display_menu+0xe8>)
 80037c6:	2301      	movs	r3, #1
 80037c8:	ca06      	ldmia	r2, {r1, r2}
 80037ca:	4812      	ldr	r0, [pc, #72]	; (8003814 <display_menu+0x10c>)
 80037cc:	f000 fe42 	bl	8004454 <ssd1306_WriteString>
		ssd1306_SetCursor(2,52);
 80037d0:	2134      	movs	r1, #52	; 0x34
 80037d2:	2002      	movs	r0, #2
 80037d4:	f000 fe64 	bl	80044a0 <ssd1306_SetCursor>
		ssd1306_WriteString("ENTER-Next Page", Font_7x10, White);
 80037d8:	4a05      	ldr	r2, [pc, #20]	; (80037f0 <display_menu+0xe8>)
 80037da:	2301      	movs	r3, #1
 80037dc:	ca06      	ldmia	r2, {r1, r2}
 80037de:	480a      	ldr	r0, [pc, #40]	; (8003808 <display_menu+0x100>)
 80037e0:	f000 fe38 	bl	8004454 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 80037e4:	f000 fd32 	bl	800424c <ssd1306_UpdateScreen>
}
 80037e8:	bf00      	nop
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	200006fb 	.word	0x200006fb
 80037f0:	20000040 	.word	0x20000040
 80037f4:	0800d634 	.word	0x0800d634
 80037f8:	200006fc 	.word	0x200006fc
 80037fc:	0800d648 	.word	0x0800d648
 8003800:	0800d658 	.word	0x0800d658
 8003804:	0800d668 	.word	0x0800d668
 8003808:	0800d570 	.word	0x0800d570
 800380c:	0800d678 	.word	0x0800d678
 8003810:	0800d68c 	.word	0x0800d68c
 8003814:	0800d69c 	.word	0x0800d69c

08003818 <calibrate>:

void calibrate(hx711_t *hx711)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
	int weight = 0;
 8003820:	2300      	movs	r3, #0
 8003822:	61fb      	str	r3, [r7, #28]
	int x = 2; // cursor x
 8003824:	2302      	movs	r3, #2
 8003826:	61bb      	str	r3, [r7, #24]
	keyPressed = 0;
 8003828:	4b97      	ldr	r3, [pc, #604]	; (8003a88 <calibrate+0x270>)
 800382a:	2200      	movs	r2, #0
 800382c:	701a      	strb	r2, [r3, #0]
	long int prevOffset = 0;
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]

	ssd1306_Init();
 8003832:	f000 fc7d 	bl	8004130 <ssd1306_Init>
	ssd1306_SetCursor(2,16);
 8003836:	2110      	movs	r1, #16
 8003838:	2002      	movs	r0, #2
 800383a:	f000 fe31 	bl	80044a0 <ssd1306_SetCursor>
	ssd1306_WriteString("REMOVE EVERYTHING", Font_7x10, White);
 800383e:	4a93      	ldr	r2, [pc, #588]	; (8003a8c <calibrate+0x274>)
 8003840:	2301      	movs	r3, #1
 8003842:	ca06      	ldmia	r2, {r1, r2}
 8003844:	4892      	ldr	r0, [pc, #584]	; (8003a90 <calibrate+0x278>)
 8003846:	f000 fe05 	bl	8004454 <ssd1306_WriteString>
	ssd1306_SetCursor(2,28);
 800384a:	211c      	movs	r1, #28
 800384c:	2002      	movs	r0, #2
 800384e:	f000 fe27 	bl	80044a0 <ssd1306_SetCursor>
	ssd1306_WriteString("FROM THE FOOD BOWL", Font_7x10, White);
 8003852:	4a8e      	ldr	r2, [pc, #568]	; (8003a8c <calibrate+0x274>)
 8003854:	2301      	movs	r3, #1
 8003856:	ca06      	ldmia	r2, {r1, r2}
 8003858:	488e      	ldr	r0, [pc, #568]	; (8003a94 <calibrate+0x27c>)
 800385a:	f000 fdfb 	bl	8004454 <ssd1306_WriteString>
	ssd1306_SetCursor(2,40);
 800385e:	2128      	movs	r1, #40	; 0x28
 8003860:	2002      	movs	r0, #2
 8003862:	f000 fe1d 	bl	80044a0 <ssd1306_SetCursor>
	ssd1306_WriteString("THEN PRESS ENTER", Font_7x10, White);
 8003866:	4a89      	ldr	r2, [pc, #548]	; (8003a8c <calibrate+0x274>)
 8003868:	2301      	movs	r3, #1
 800386a:	ca06      	ldmia	r2, {r1, r2}
 800386c:	488a      	ldr	r0, [pc, #552]	; (8003a98 <calibrate+0x280>)
 800386e:	f000 fdf1 	bl	8004454 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003872:	f000 fceb 	bl	800424c <ssd1306_UpdateScreen>

	while(1)
	{
		if (is_press && keyPressed == 35)
 8003876:	4b89      	ldr	r3, [pc, #548]	; (8003a9c <calibrate+0x284>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d049      	beq.n	8003912 <calibrate+0xfa>
 800387e:	4b82      	ldr	r3, [pc, #520]	; (8003a88 <calibrate+0x270>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b23      	cmp	r3, #35	; 0x23
 8003884:	d145      	bne.n	8003912 <calibrate+0xfa>
		{
			ssd1306_Init();
 8003886:	f000 fc53 	bl	8004130 <ssd1306_Init>
			ssd1306_SetCursor(2,16);
 800388a:	2110      	movs	r1, #16
 800388c:	2002      	movs	r0, #2
 800388e:	f000 fe07 	bl	80044a0 <ssd1306_SetCursor>
			ssd1306_WriteString("Calibrating...", Font_7x10, White);
 8003892:	4a7e      	ldr	r2, [pc, #504]	; (8003a8c <calibrate+0x274>)
 8003894:	2301      	movs	r3, #1
 8003896:	ca06      	ldmia	r2, {r1, r2}
 8003898:	4881      	ldr	r0, [pc, #516]	; (8003aa0 <calibrate+0x288>)
 800389a:	f000 fddb 	bl	8004454 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 800389e:	f000 fcd5 	bl	800424c <ssd1306_UpdateScreen>
			set_scale(hx711, 1, 1);
 80038a2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80038a6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fd fba2 	bl	8000ff4 <set_scale>
			prevOffset = hx711->Aoffset;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	617b      	str	r3, [r7, #20]
			tare(hx711, 50, CHANNEL_A);
 80038b6:	2200      	movs	r2, #0
 80038b8:	2132      	movs	r1, #50	; 0x32
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fd fcf6 	bl	80012ac <tare>
			ssd1306_Init();
 80038c0:	f000 fc36 	bl	8004130 <ssd1306_Init>
			ssd1306_SetCursor(2,16);
 80038c4:	2110      	movs	r1, #16
 80038c6:	2002      	movs	r0, #2
 80038c8:	f000 fdea 	bl	80044a0 <ssd1306_SetCursor>
			ssd1306_WriteString("PUT KNOWN WEIGHT", Font_7x10, White);
 80038cc:	4a6f      	ldr	r2, [pc, #444]	; (8003a8c <calibrate+0x274>)
 80038ce:	2301      	movs	r3, #1
 80038d0:	ca06      	ldmia	r2, {r1, r2}
 80038d2:	4874      	ldr	r0, [pc, #464]	; (8003aa4 <calibrate+0x28c>)
 80038d4:	f000 fdbe 	bl	8004454 <ssd1306_WriteString>
			ssd1306_SetCursor(2,28);
 80038d8:	211c      	movs	r1, #28
 80038da:	2002      	movs	r0, #2
 80038dc:	f000 fde0 	bl	80044a0 <ssd1306_SetCursor>
			ssd1306_WriteString("AND ENTER THE MASS", Font_7x10, White);
 80038e0:	4a6a      	ldr	r2, [pc, #424]	; (8003a8c <calibrate+0x274>)
 80038e2:	2301      	movs	r3, #1
 80038e4:	ca06      	ldmia	r2, {r1, r2}
 80038e6:	4870      	ldr	r0, [pc, #448]	; (8003aa8 <calibrate+0x290>)
 80038e8:	f000 fdb4 	bl	8004454 <ssd1306_WriteString>
			ssd1306_SetCursor(2,40);
 80038ec:	2128      	movs	r1, #40	; 0x28
 80038ee:	2002      	movs	r0, #2
 80038f0:	f000 fdd6 	bl	80044a0 <ssd1306_SetCursor>
			ssd1306_WriteString("THEN PRESS ENTER", Font_7x10, White);
 80038f4:	4a65      	ldr	r2, [pc, #404]	; (8003a8c <calibrate+0x274>)
 80038f6:	2301      	movs	r3, #1
 80038f8:	ca06      	ldmia	r2, {r1, r2}
 80038fa:	4867      	ldr	r0, [pc, #412]	; (8003a98 <calibrate+0x280>)
 80038fc:	f000 fdaa 	bl	8004454 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8003900:	f000 fca4 	bl	800424c <ssd1306_UpdateScreen>
			is_press = 0;
 8003904:	4b65      	ldr	r3, [pc, #404]	; (8003a9c <calibrate+0x284>)
 8003906:	2200      	movs	r2, #0
 8003908:	701a      	strb	r2, [r3, #0]
			keyPressed = 0;
 800390a:	4b5f      	ldr	r3, [pc, #380]	; (8003a88 <calibrate+0x270>)
 800390c:	2200      	movs	r2, #0
 800390e:	701a      	strb	r2, [r3, #0]
			break;
 8003910:	e00e      	b.n	8003930 <calibrate+0x118>
		}
		else if (is_press && keyPressed == 68)
 8003912:	4b62      	ldr	r3, [pc, #392]	; (8003a9c <calibrate+0x284>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0ad      	beq.n	8003876 <calibrate+0x5e>
 800391a:	4b5b      	ldr	r3, [pc, #364]	; (8003a88 <calibrate+0x270>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b44      	cmp	r3, #68	; 0x44
 8003920:	d1a9      	bne.n	8003876 <calibrate+0x5e>
		{
			dirty = 1;
 8003922:	4b62      	ldr	r3, [pc, #392]	; (8003aac <calibrate+0x294>)
 8003924:	2201      	movs	r2, #1
 8003926:	701a      	strb	r2, [r3, #0]
			status = 0;
 8003928:	4b61      	ldr	r3, [pc, #388]	; (8003ab0 <calibrate+0x298>)
 800392a:	2200      	movs	r2, #0
 800392c:	701a      	strb	r2, [r3, #0]
			return;
 800392e:	e0a8      	b.n	8003a82 <calibrate+0x26a>
		}
	}

	while(1)
	{
		if (!is_press)continue;
 8003930:	4b5a      	ldr	r3, [pc, #360]	; (8003a9c <calibrate+0x284>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80a2 	beq.w	8003a7e <calibrate+0x266>
		if (keyPressed <= 57 && keyPressed >=48)
 800393a:	4b53      	ldr	r3, [pc, #332]	; (8003a88 <calibrate+0x270>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b39      	cmp	r3, #57	; 0x39
 8003940:	d82a      	bhi.n	8003998 <calibrate+0x180>
 8003942:	4b51      	ldr	r3, [pc, #324]	; (8003a88 <calibrate+0x270>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b2f      	cmp	r3, #47	; 0x2f
 8003948:	d926      	bls.n	8003998 <calibrate+0x180>
		{
			ssd1306_SetCursor(x,52);
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2134      	movs	r1, #52	; 0x34
 8003950:	4618      	mov	r0, r3
 8003952:	f000 fda5 	bl	80044a0 <ssd1306_SetCursor>
			char a[4];
			itoa(keyPressed - 48, a, 10);
 8003956:	4b4c      	ldr	r3, [pc, #304]	; (8003a88 <calibrate+0x270>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	3b30      	subs	r3, #48	; 0x30
 800395c:	f107 010c 	add.w	r1, r7, #12
 8003960:	220a      	movs	r2, #10
 8003962:	4618      	mov	r0, r3
 8003964:	f006 fdea 	bl	800a53c <itoa>
			ssd1306_WriteString(a, Font_7x10, White);
 8003968:	4a48      	ldr	r2, [pc, #288]	; (8003a8c <calibrate+0x274>)
 800396a:	f107 000c 	add.w	r0, r7, #12
 800396e:	2301      	movs	r3, #1
 8003970:	ca06      	ldmia	r2, {r1, r2}
 8003972:	f000 fd6f 	bl	8004454 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8003976:	f000 fc69 	bl	800424c <ssd1306_UpdateScreen>
			weight = weight * 10 + keyPressed - 48;
 800397a:	69fa      	ldr	r2, [r7, #28]
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	461a      	mov	r2, r3
 8003986:	4b40      	ldr	r3, [pc, #256]	; (8003a88 <calibrate+0x270>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	4413      	add	r3, r2
 800398c:	3b30      	subs	r3, #48	; 0x30
 800398e:	61fb      	str	r3, [r7, #28]
			x += 7;
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	3307      	adds	r3, #7
 8003994:	61bb      	str	r3, [r7, #24]
		{
 8003996:	e06b      	b.n	8003a70 <calibrate+0x258>
		}
		else if (keyPressed == 68) // D
 8003998:	4b3b      	ldr	r3, [pc, #236]	; (8003a88 <calibrate+0x270>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b44      	cmp	r3, #68	; 0x44
 800399e:	d109      	bne.n	80039b4 <calibrate+0x19c>
		{
			hx711->Aoffset = prevOffset;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	60da      	str	r2, [r3, #12]
			dirty = 1;
 80039a6:	4b41      	ldr	r3, [pc, #260]	; (8003aac <calibrate+0x294>)
 80039a8:	2201      	movs	r2, #1
 80039aa:	701a      	strb	r2, [r3, #0]
			status = 0;
 80039ac:	4b40      	ldr	r3, [pc, #256]	; (8003ab0 <calibrate+0x298>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	701a      	strb	r2, [r3, #0]
			return;
 80039b2:	e066      	b.n	8003a82 <calibrate+0x26a>
		}
		else if (keyPressed == 42) // * backspace
 80039b4:	4b34      	ldr	r3, [pc, #208]	; (8003a88 <calibrate+0x270>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b2a      	cmp	r3, #42	; 0x2a
 80039ba:	d119      	bne.n	80039f0 <calibrate+0x1d8>
		{
			x -= 7;
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	3b07      	subs	r3, #7
 80039c0:	61bb      	str	r3, [r7, #24]
			ssd1306_SetCursor(x,52);
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2134      	movs	r1, #52	; 0x34
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 fd69 	bl	80044a0 <ssd1306_SetCursor>
			ssd1306_WriteString(" ", Font_7x10, White);
 80039ce:	4a2f      	ldr	r2, [pc, #188]	; (8003a8c <calibrate+0x274>)
 80039d0:	2301      	movs	r3, #1
 80039d2:	ca06      	ldmia	r2, {r1, r2}
 80039d4:	4837      	ldr	r0, [pc, #220]	; (8003ab4 <calibrate+0x29c>)
 80039d6:	f000 fd3d 	bl	8004454 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80039da:	f000 fc37 	bl	800424c <ssd1306_UpdateScreen>
			weight = weight / 10;
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	4a35      	ldr	r2, [pc, #212]	; (8003ab8 <calibrate+0x2a0>)
 80039e2:	fb82 1203 	smull	r1, r2, r2, r3
 80039e6:	1092      	asrs	r2, r2, #2
 80039e8:	17db      	asrs	r3, r3, #31
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	61fb      	str	r3, [r7, #28]
 80039ee:	e03f      	b.n	8003a70 <calibrate+0x258>
		}
		else if (keyPressed == 35) // #
 80039f0:	4b25      	ldr	r3, [pc, #148]	; (8003a88 <calibrate+0x270>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b23      	cmp	r3, #35	; 0x23
 80039f6:	d13b      	bne.n	8003a70 <calibrate+0x258>
		{
			//modify food
			ssd1306_Init();
 80039f8:	f000 fb9a 	bl	8004130 <ssd1306_Init>
			ssd1306_SetCursor(2,16);
 80039fc:	2110      	movs	r1, #16
 80039fe:	2002      	movs	r0, #2
 8003a00:	f000 fd4e 	bl	80044a0 <ssd1306_SetCursor>
			ssd1306_WriteString("Calibrating...", Font_7x10, White);
 8003a04:	4a21      	ldr	r2, [pc, #132]	; (8003a8c <calibrate+0x274>)
 8003a06:	2301      	movs	r3, #1
 8003a08:	ca06      	ldmia	r2, {r1, r2}
 8003a0a:	4825      	ldr	r0, [pc, #148]	; (8003aa0 <calibrate+0x288>)
 8003a0c:	f000 fd22 	bl	8004454 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8003a10:	f000 fc1c 	bl	800424c <ssd1306_UpdateScreen>
			int value = get_value(hx711, 50, CHANNEL_A);
 8003a14:	2200      	movs	r2, #0
 8003a16:	2132      	movs	r1, #50	; 0x32
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7fd fc1b 	bl	8001254 <get_value>
 8003a1e:	ec53 2b10 	vmov	r2, r3, d0
 8003a22:	4610      	mov	r0, r2
 8003a24:	4619      	mov	r1, r3
 8003a26:	f7fd f8af 	bl	8000b88 <__aeabi_d2iz>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	613b      	str	r3, [r7, #16]
			hx711->Ascale = (float)value / (float)weight;
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	ee07 3a90 	vmov	s15, r3
 8003a34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	ee07 3a90 	vmov	s15, r3
 8003a3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	edc3 7a04 	vstr	s15, [r3, #16]
			ssd1306_Init();
 8003a4c:	f000 fb70 	bl	8004130 <ssd1306_Init>
			ssd1306_SetCursor(2,16);
 8003a50:	2110      	movs	r1, #16
 8003a52:	2002      	movs	r0, #2
 8003a54:	f000 fd24 	bl	80044a0 <ssd1306_SetCursor>
			ssd1306_WriteString("Calibration Done", Font_7x10, White);
 8003a58:	4a0c      	ldr	r2, [pc, #48]	; (8003a8c <calibrate+0x274>)
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	ca06      	ldmia	r2, {r1, r2}
 8003a5e:	4817      	ldr	r0, [pc, #92]	; (8003abc <calibrate+0x2a4>)
 8003a60:	f000 fcf8 	bl	8004454 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8003a64:	f000 fbf2 	bl	800424c <ssd1306_UpdateScreen>
			dirty = 1;
 8003a68:	4b10      	ldr	r3, [pc, #64]	; (8003aac <calibrate+0x294>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	701a      	strb	r2, [r3, #0]
			break;
 8003a6e:	e008      	b.n	8003a82 <calibrate+0x26a>
		}
		is_press = 0;
 8003a70:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <calibrate+0x284>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	701a      	strb	r2, [r3, #0]
		keyPressed = 0;
 8003a76:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <calibrate+0x270>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
 8003a7c:	e758      	b.n	8003930 <calibrate+0x118>
		if (!is_press)continue;
 8003a7e:	bf00      	nop
 8003a80:	e756      	b.n	8003930 <calibrate+0x118>
	}
}
 8003a82:	3720      	adds	r7, #32
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	200006f8 	.word	0x200006f8
 8003a8c:	20000040 	.word	0x20000040
 8003a90:	0800d6b0 	.word	0x0800d6b0
 8003a94:	0800d6c4 	.word	0x0800d6c4
 8003a98:	0800d5f4 	.word	0x0800d5f4
 8003a9c:	200006f9 	.word	0x200006f9
 8003aa0:	0800d6d8 	.word	0x0800d6d8
 8003aa4:	0800d6e8 	.word	0x0800d6e8
 8003aa8:	0800d6fc 	.word	0x0800d6fc
 8003aac:	200006fb 	.word	0x200006fb
 8003ab0:	200006fa 	.word	0x200006fa
 8003ab4:	0800d710 	.word	0x0800d710
 8003ab8:	66666667 	.word	0x66666667
 8003abc:	0800d714 	.word	0x0800d714

08003ac0 <release_food>:

void release_food(uint32_t *tim4_ccr2)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
	if(dirty)
 8003ac8:	4b4b      	ldr	r3, [pc, #300]	; (8003bf8 <release_food+0x138>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d004      	beq.n	8003ada <release_food+0x1a>
	{
		ssd1306_Init();
 8003ad0:	f000 fb2e 	bl	8004130 <ssd1306_Init>
		dirty = 0;
 8003ad4:	4b48      	ldr	r3, [pc, #288]	; (8003bf8 <release_food+0x138>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]
	}
	ssd1306_SetCursor(2,16);
 8003ada:	2110      	movs	r1, #16
 8003adc:	2002      	movs	r0, #2
 8003ade:	f000 fcdf 	bl	80044a0 <ssd1306_SetCursor>
	float food_weight0 = floor(get_weight(&food, 10, CHANNEL_A) * 10) / 10.0;
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	210a      	movs	r1, #10
 8003ae6:	4845      	ldr	r0, [pc, #276]	; (8003bfc <release_food+0x13c>)
 8003ae8:	f7fd fc12 	bl	8001310 <get_weight>
 8003aec:	eef0 7a40 	vmov.f32	s15, s0
 8003af0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003af4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003af8:	ee17 0a90 	vmov	r0, s15
 8003afc:	f7fc fd3c 	bl	8000578 <__aeabi_f2d>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	ec43 2b10 	vmov	d0, r2, r3
 8003b08:	f009 fbf6 	bl	800d2f8 <floor>
 8003b0c:	ec51 0b10 	vmov	r0, r1, d0
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	4b3a      	ldr	r3, [pc, #232]	; (8003c00 <release_food+0x140>)
 8003b16:	f7fc feb1 	bl	800087c <__aeabi_ddiv>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4610      	mov	r0, r2
 8003b20:	4619      	mov	r1, r3
 8003b22:	f7fd f859 	bl	8000bd8 <__aeabi_d2f>
 8003b26:	4603      	mov	r3, r0
 8003b28:	60fb      	str	r3, [r7, #12]
	ssd1306_WriteString("Releasing Food...", Font_7x10, White);
 8003b2a:	4a36      	ldr	r2, [pc, #216]	; (8003c04 <release_food+0x144>)
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	ca06      	ldmia	r2, {r1, r2}
 8003b30:	4835      	ldr	r0, [pc, #212]	; (8003c08 <release_food+0x148>)
 8003b32:	f000 fc8f 	bl	8004454 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003b36:	f000 fb89 	bl	800424c <ssd1306_UpdateScreen>
	dirty = 1;
 8003b3a:	4b2f      	ldr	r3, [pc, #188]	; (8003bf8 <release_food+0x138>)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	701a      	strb	r2, [r3, #0]

	*tim4_ccr2 &= ~CCR_MASK;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	0c1b      	lsrs	r3, r3, #16
 8003b46:	041b      	lsls	r3, r3, #16
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6013      	str	r3, [r2, #0]
	*tim4_ccr2 |= 318;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f443 729f 	orr.w	r2, r3, #318	; 0x13e
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	601a      	str	r2, [r3, #0]
	HAL_Delay(50);
 8003b58:	2032      	movs	r0, #50	; 0x32
 8003b5a:	f001 f8ff 	bl	8004d5c <HAL_Delay>

	while(1)
	{
		HAL_Delay(1);
 8003b5e:	2001      	movs	r0, #1
 8003b60:	f001 f8fc 	bl	8004d5c <HAL_Delay>
		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1))
 8003b64:	2102      	movs	r1, #2
 8003b66:	4829      	ldr	r0, [pc, #164]	; (8003c0c <release_food+0x14c>)
 8003b68:	f001 fe32 	bl	80057d0 <HAL_GPIO_ReadPin>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f5      	beq.n	8003b5e <release_food+0x9e>
		{
			*tim4_ccr2 &= ~CCR_MASK;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	0c1b      	lsrs	r3, r3, #16
 8003b78:	041b      	lsls	r3, r3, #16
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6013      	str	r3, [r2, #0]
			*tim4_ccr2 |= 300;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f443 7296 	orr.w	r2, r3, #300	; 0x12c
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	601a      	str	r2, [r3, #0]
			break;
 8003b8a:	bf00      	nop
		}
	}
	float food_weight1 = floor(get_weight(&food, 10, CHANNEL_A) * 10) / 10.0;
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	210a      	movs	r1, #10
 8003b90:	481a      	ldr	r0, [pc, #104]	; (8003bfc <release_food+0x13c>)
 8003b92:	f7fd fbbd 	bl	8001310 <get_weight>
 8003b96:	eef0 7a40 	vmov.f32	s15, s0
 8003b9a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ba2:	ee17 0a90 	vmov	r0, s15
 8003ba6:	f7fc fce7 	bl	8000578 <__aeabi_f2d>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	ec43 2b10 	vmov	d0, r2, r3
 8003bb2:	f009 fba1 	bl	800d2f8 <floor>
 8003bb6:	ec51 0b10 	vmov	r0, r1, d0
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <release_food+0x140>)
 8003bc0:	f7fc fe5c 	bl	800087c <__aeabi_ddiv>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4610      	mov	r0, r2
 8003bca:	4619      	mov	r1, r3
 8003bcc:	f7fd f804 	bl	8000bd8 <__aeabi_d2f>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	60bb      	str	r3, [r7, #8]
	consumed_food = consumed_food + food_weight1 - food_weight0;
 8003bd4:	4b0e      	ldr	r3, [pc, #56]	; (8003c10 <release_food+0x150>)
 8003bd6:	ed93 7a00 	vldr	s14, [r3]
 8003bda:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003be2:	edd7 7a03 	vldr	s15, [r7, #12]
 8003be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bea:	4b09      	ldr	r3, [pc, #36]	; (8003c10 <release_food+0x150>)
 8003bec:	edc3 7a00 	vstr	s15, [r3]
}
 8003bf0:	bf00      	nop
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	200006fb 	.word	0x200006fb
 8003bfc:	20000240 	.word	0x20000240
 8003c00:	40240000 	.word	0x40240000
 8003c04:	20000040 	.word	0x20000040
 8003c08:	0800d728 	.word	0x0800d728
 8003c0c:	48000c00 	.word	0x48000c00
 8003c10:	20000544 	.word	0x20000544

08003c14 <release_water>:

void release_water()
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
	if(dirty)
 8003c1a:	4b45      	ldr	r3, [pc, #276]	; (8003d30 <release_water+0x11c>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d004      	beq.n	8003c2c <release_water+0x18>
	{
		ssd1306_Init();
 8003c22:	f000 fa85 	bl	8004130 <ssd1306_Init>
		dirty = 0;
 8003c26:	4b42      	ldr	r3, [pc, #264]	; (8003d30 <release_water+0x11c>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	701a      	strb	r2, [r3, #0]
	}
	ssd1306_SetCursor(2,16);
 8003c2c:	2110      	movs	r1, #16
 8003c2e:	2002      	movs	r0, #2
 8003c30:	f000 fc36 	bl	80044a0 <ssd1306_SetCursor>
	ssd1306_WriteString("Releasing Water...", Font_7x10, White);
 8003c34:	4a3f      	ldr	r2, [pc, #252]	; (8003d34 <release_water+0x120>)
 8003c36:	2301      	movs	r3, #1
 8003c38:	ca06      	ldmia	r2, {r1, r2}
 8003c3a:	483f      	ldr	r0, [pc, #252]	; (8003d38 <release_water+0x124>)
 8003c3c:	f000 fc0a 	bl	8004454 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003c40:	f000 fb04 	bl	800424c <ssd1306_UpdateScreen>
	dirty = 1;
 8003c44:	4b3a      	ldr	r3, [pc, #232]	; (8003d30 <release_water+0x11c>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	701a      	strb	r2, [r3, #0]
	float water_weight0 = floor(get_weight(&water, 10, CHANNEL_A) * 10) / 10.0;
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	210a      	movs	r1, #10
 8003c4e:	483b      	ldr	r0, [pc, #236]	; (8003d3c <release_water+0x128>)
 8003c50:	f7fd fb5e 	bl	8001310 <get_weight>
 8003c54:	eef0 7a40 	vmov.f32	s15, s0
 8003c58:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c60:	ee17 0a90 	vmov	r0, s15
 8003c64:	f7fc fc88 	bl	8000578 <__aeabi_f2d>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	ec43 2b10 	vmov	d0, r2, r3
 8003c70:	f009 fb42 	bl	800d2f8 <floor>
 8003c74:	ec51 0b10 	vmov	r0, r1, d0
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	4b30      	ldr	r3, [pc, #192]	; (8003d40 <release_water+0x12c>)
 8003c7e:	f7fc fdfd 	bl	800087c <__aeabi_ddiv>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4610      	mov	r0, r2
 8003c88:	4619      	mov	r1, r3
 8003c8a:	f7fc ffa5 	bl	8000bd8 <__aeabi_d2f>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8003c92:	2201      	movs	r2, #1
 8003c94:	2104      	movs	r1, #4
 8003c96:	482b      	ldr	r0, [pc, #172]	; (8003d44 <release_water+0x130>)
 8003c98:	f001 fdb2 	bl	8005800 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	2140      	movs	r1, #64	; 0x40
 8003ca0:	4828      	ldr	r0, [pc, #160]	; (8003d44 <release_water+0x130>)
 8003ca2:	f001 fdad 	bl	8005800 <HAL_GPIO_WritePin>
	//	HAL_Delay(1000*30);
	HAL_Delay(10000);
 8003ca6:	f242 7010 	movw	r0, #10000	; 0x2710
 8003caa:	f001 f857 	bl	8004d5c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8003cae:	2200      	movs	r2, #0
 8003cb0:	2104      	movs	r1, #4
 8003cb2:	4824      	ldr	r0, [pc, #144]	; (8003d44 <release_water+0x130>)
 8003cb4:	f001 fda4 	bl	8005800 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2140      	movs	r1, #64	; 0x40
 8003cbc:	4821      	ldr	r0, [pc, #132]	; (8003d44 <release_water+0x130>)
 8003cbe:	f001 fd9f 	bl	8005800 <HAL_GPIO_WritePin>
	float water_weight1 = floor(get_weight(&water, 10, CHANNEL_A) * 10) / 10.0;
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	210a      	movs	r1, #10
 8003cc6:	481d      	ldr	r0, [pc, #116]	; (8003d3c <release_water+0x128>)
 8003cc8:	f7fd fb22 	bl	8001310 <get_weight>
 8003ccc:	eef0 7a40 	vmov.f32	s15, s0
 8003cd0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003cd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cd8:	ee17 0a90 	vmov	r0, s15
 8003cdc:	f7fc fc4c 	bl	8000578 <__aeabi_f2d>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	ec43 2b10 	vmov	d0, r2, r3
 8003ce8:	f009 fb06 	bl	800d2f8 <floor>
 8003cec:	ec51 0b10 	vmov	r0, r1, d0
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <release_water+0x12c>)
 8003cf6:	f7fc fdc1 	bl	800087c <__aeabi_ddiv>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4610      	mov	r0, r2
 8003d00:	4619      	mov	r1, r3
 8003d02:	f7fc ff69 	bl	8000bd8 <__aeabi_d2f>
 8003d06:	4603      	mov	r3, r0
 8003d08:	603b      	str	r3, [r7, #0]
	consumed_water = consumed_water + water_weight1 - water_weight0;
 8003d0a:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <release_water+0x134>)
 8003d0c:	ed93 7a00 	vldr	s14, [r3]
 8003d10:	edd7 7a00 	vldr	s15, [r7]
 8003d14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d18:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d20:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <release_water+0x134>)
 8003d22:	edc3 7a00 	vstr	s15, [r3]
}
 8003d26:	bf00      	nop
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	200006fb 	.word	0x200006fb
 8003d34:	20000040 	.word	0x20000040
 8003d38:	0800d73c 	.word	0x0800d73c
 8003d3c:	20000288 	.word	0x20000288
 8003d40:	40240000 	.word	0x40240000
 8003d44:	48000400 	.word	0x48000400
 8003d48:	20000548 	.word	0x20000548

08003d4c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
//  #define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8003d54:	1d39      	adds	r1, r7, #4
 8003d56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	4803      	ldr	r0, [pc, #12]	; (8003d6c <__io_putchar+0x20>)
 8003d5e:	f005 fa4b 	bl	80091f8 <HAL_UART_Transmit>
	return ch;
 8003d62:	687b      	ldr	r3, [r7, #4]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20000354 	.word	0x20000354

08003d70 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 8003d7a:	f000 ffe3 	bl	8004d44 <HAL_GetTick>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	4aa3      	ldr	r2, [pc, #652]	; (8004010 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8003d82:	6013      	str	r3, [r2, #0]
	if (currentMillis - previousMillis > 200) {
 8003d84:	4ba2      	ldr	r3, [pc, #648]	; (8004010 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4ba2      	ldr	r3, [pc, #648]	; (8004014 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2bc8      	cmp	r3, #200	; 0xc8
 8003d90:	f240 817f 	bls.w	8004092 <HAL_GPIO_EXTI_Callback+0x322>
		//    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
		//    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
		//    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
		//    HAL_GPIO_Init(GPIOE, &GPIO_InitStructPrivate);

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8003d94:	2201      	movs	r2, #1
 8003d96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d9a:	489f      	ldr	r0, [pc, #636]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003d9c:	f001 fd30 	bl	8005800 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8003da0:	2200      	movs	r2, #0
 8003da2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003da6:	489c      	ldr	r0, [pc, #624]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003da8:	f001 fd2a 	bl	8005800 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 8003dac:	2200      	movs	r2, #0
 8003dae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003db2:	4899      	ldr	r0, [pc, #612]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003db4:	f001 fd24 	bl	8005800 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0);
 8003db8:	2200      	movs	r2, #0
 8003dba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003dbe:	4896      	ldr	r0, [pc, #600]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003dc0:	f001 fd1e 	bl	8005800 <HAL_GPIO_WritePin>
		if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6))
 8003dc4:	88fb      	ldrh	r3, [r7, #6]
 8003dc6:	2b40      	cmp	r3, #64	; 0x40
 8003dc8:	d10a      	bne.n	8003de0 <HAL_GPIO_EXTI_Callback+0x70>
 8003dca:	2140      	movs	r1, #64	; 0x40
 8003dcc:	4892      	ldr	r0, [pc, #584]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003dce:	f001 fcff 	bl	80057d0 <HAL_GPIO_ReadPin>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_GPIO_EXTI_Callback+0x70>
		{
			keyPressed = 68; //ASCII value of D
 8003dd8:	4b90      	ldr	r3, [pc, #576]	; (800401c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003dda:	2244      	movs	r2, #68	; 0x44
 8003ddc:	701a      	strb	r2, [r3, #0]
 8003dde:	e02c      	b.n	8003e3a <HAL_GPIO_EXTI_Callback+0xca>
		}
		else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7))
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	2b80      	cmp	r3, #128	; 0x80
 8003de4:	d10a      	bne.n	8003dfc <HAL_GPIO_EXTI_Callback+0x8c>
 8003de6:	2180      	movs	r1, #128	; 0x80
 8003de8:	488b      	ldr	r0, [pc, #556]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003dea:	f001 fcf1 	bl	80057d0 <HAL_GPIO_ReadPin>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_GPIO_EXTI_Callback+0x8c>
		{
			keyPressed = 67; //ASCII value of C
 8003df4:	4b89      	ldr	r3, [pc, #548]	; (800401c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003df6:	2243      	movs	r2, #67	; 0x43
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	e01e      	b.n	8003e3a <HAL_GPIO_EXTI_Callback+0xca>
		}
		else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8))
 8003dfc:	88fb      	ldrh	r3, [r7, #6]
 8003dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e02:	d10b      	bne.n	8003e1c <HAL_GPIO_EXTI_Callback+0xac>
 8003e04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e08:	4883      	ldr	r0, [pc, #524]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003e0a:	f001 fce1 	bl	80057d0 <HAL_GPIO_ReadPin>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_GPIO_EXTI_Callback+0xac>
		{
			keyPressed = 66; //ASCII value of B
 8003e14:	4b81      	ldr	r3, [pc, #516]	; (800401c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003e16:	2242      	movs	r2, #66	; 0x42
 8003e18:	701a      	strb	r2, [r3, #0]
 8003e1a:	e00e      	b.n	8003e3a <HAL_GPIO_EXTI_Callback+0xca>
		}
		else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))
 8003e1c:	88fb      	ldrh	r3, [r7, #6]
 8003e1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e22:	d10a      	bne.n	8003e3a <HAL_GPIO_EXTI_Callback+0xca>
 8003e24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e28:	487b      	ldr	r0, [pc, #492]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003e2a:	f001 fcd1 	bl	80057d0 <HAL_GPIO_ReadPin>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <HAL_GPIO_EXTI_Callback+0xca>
		{
			keyPressed = 65; //ASCII value of A
 8003e34:	4b79      	ldr	r3, [pc, #484]	; (800401c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003e36:	2241      	movs	r2, #65	; 0x41
 8003e38:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e40:	4875      	ldr	r0, [pc, #468]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003e42:	f001 fcdd 	bl	8005800 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8003e46:	2201      	movs	r2, #1
 8003e48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003e4c:	4872      	ldr	r0, [pc, #456]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003e4e:	f001 fcd7 	bl	8005800 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 8003e52:	2200      	movs	r2, #0
 8003e54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e58:	486f      	ldr	r0, [pc, #444]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003e5a:	f001 fcd1 	bl	8005800 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0);
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e64:	486c      	ldr	r0, [pc, #432]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003e66:	f001 fccb 	bl	8005800 <HAL_GPIO_WritePin>
		if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6))
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	2b40      	cmp	r3, #64	; 0x40
 8003e6e:	d10a      	bne.n	8003e86 <HAL_GPIO_EXTI_Callback+0x116>
 8003e70:	2140      	movs	r1, #64	; 0x40
 8003e72:	4869      	ldr	r0, [pc, #420]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003e74:	f001 fcac 	bl	80057d0 <HAL_GPIO_ReadPin>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_GPIO_EXTI_Callback+0x116>
		{
			keyPressed = 35; //ASCII value of #
 8003e7e:	4b67      	ldr	r3, [pc, #412]	; (800401c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003e80:	2223      	movs	r2, #35	; 0x23
 8003e82:	701a      	strb	r2, [r3, #0]
 8003e84:	e02c      	b.n	8003ee0 <HAL_GPIO_EXTI_Callback+0x170>
		}
		else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7))
 8003e86:	88fb      	ldrh	r3, [r7, #6]
 8003e88:	2b80      	cmp	r3, #128	; 0x80
 8003e8a:	d10a      	bne.n	8003ea2 <HAL_GPIO_EXTI_Callback+0x132>
 8003e8c:	2180      	movs	r1, #128	; 0x80
 8003e8e:	4862      	ldr	r0, [pc, #392]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003e90:	f001 fc9e 	bl	80057d0 <HAL_GPIO_ReadPin>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_GPIO_EXTI_Callback+0x132>
		{
			keyPressed = 57; //ASCII value of 9
 8003e9a:	4b60      	ldr	r3, [pc, #384]	; (800401c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003e9c:	2239      	movs	r2, #57	; 0x39
 8003e9e:	701a      	strb	r2, [r3, #0]
 8003ea0:	e01e      	b.n	8003ee0 <HAL_GPIO_EXTI_Callback+0x170>
		}
		else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8))
 8003ea2:	88fb      	ldrh	r3, [r7, #6]
 8003ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea8:	d10b      	bne.n	8003ec2 <HAL_GPIO_EXTI_Callback+0x152>
 8003eaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003eae:	485a      	ldr	r0, [pc, #360]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003eb0:	f001 fc8e 	bl	80057d0 <HAL_GPIO_ReadPin>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_GPIO_EXTI_Callback+0x152>
		{
			keyPressed = 54; //ASCII value of 6
 8003eba:	4b58      	ldr	r3, [pc, #352]	; (800401c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003ebc:	2236      	movs	r2, #54	; 0x36
 8003ebe:	701a      	strb	r2, [r3, #0]
 8003ec0:	e00e      	b.n	8003ee0 <HAL_GPIO_EXTI_Callback+0x170>
		}
		else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec8:	d10a      	bne.n	8003ee0 <HAL_GPIO_EXTI_Callback+0x170>
 8003eca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ece:	4852      	ldr	r0, [pc, #328]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003ed0:	f001 fc7e 	bl	80057d0 <HAL_GPIO_ReadPin>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <HAL_GPIO_EXTI_Callback+0x170>
		{
			keyPressed = 51; //ASCII value of 3
 8003eda:	4b50      	ldr	r3, [pc, #320]	; (800401c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003edc:	2233      	movs	r2, #51	; 0x33
 8003ede:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ee6:	484c      	ldr	r0, [pc, #304]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003ee8:	f001 fc8a 	bl	8005800 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8003eec:	2200      	movs	r2, #0
 8003eee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003ef2:	4849      	ldr	r0, [pc, #292]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003ef4:	f001 fc84 	bl	8005800 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003efe:	4846      	ldr	r0, [pc, #280]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003f00:	f001 fc7e 	bl	8005800 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0);
 8003f04:	2200      	movs	r2, #0
 8003f06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f0a:	4843      	ldr	r0, [pc, #268]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003f0c:	f001 fc78 	bl	8005800 <HAL_GPIO_WritePin>
		if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6))
 8003f10:	88fb      	ldrh	r3, [r7, #6]
 8003f12:	2b40      	cmp	r3, #64	; 0x40
 8003f14:	d10a      	bne.n	8003f2c <HAL_GPIO_EXTI_Callback+0x1bc>
 8003f16:	2140      	movs	r1, #64	; 0x40
 8003f18:	483f      	ldr	r0, [pc, #252]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003f1a:	f001 fc59 	bl	80057d0 <HAL_GPIO_ReadPin>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_GPIO_EXTI_Callback+0x1bc>
		{
			keyPressed = 48; //ASCII value of 0
 8003f24:	4b3d      	ldr	r3, [pc, #244]	; (800401c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003f26:	2230      	movs	r2, #48	; 0x30
 8003f28:	701a      	strb	r2, [r3, #0]
 8003f2a:	e02c      	b.n	8003f86 <HAL_GPIO_EXTI_Callback+0x216>
		}
		else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7))
 8003f2c:	88fb      	ldrh	r3, [r7, #6]
 8003f2e:	2b80      	cmp	r3, #128	; 0x80
 8003f30:	d10a      	bne.n	8003f48 <HAL_GPIO_EXTI_Callback+0x1d8>
 8003f32:	2180      	movs	r1, #128	; 0x80
 8003f34:	4838      	ldr	r0, [pc, #224]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003f36:	f001 fc4b 	bl	80057d0 <HAL_GPIO_ReadPin>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_GPIO_EXTI_Callback+0x1d8>
		{
			keyPressed = 56; //ASCII value of 8
 8003f40:	4b36      	ldr	r3, [pc, #216]	; (800401c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003f42:	2238      	movs	r2, #56	; 0x38
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	e01e      	b.n	8003f86 <HAL_GPIO_EXTI_Callback+0x216>
		}
		else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8))
 8003f48:	88fb      	ldrh	r3, [r7, #6]
 8003f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4e:	d10b      	bne.n	8003f68 <HAL_GPIO_EXTI_Callback+0x1f8>
 8003f50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f54:	4830      	ldr	r0, [pc, #192]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003f56:	f001 fc3b 	bl	80057d0 <HAL_GPIO_ReadPin>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <HAL_GPIO_EXTI_Callback+0x1f8>
		{
			keyPressed = 53; //ASCII value of 5
 8003f60:	4b2e      	ldr	r3, [pc, #184]	; (800401c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003f62:	2235      	movs	r2, #53	; 0x35
 8003f64:	701a      	strb	r2, [r3, #0]
 8003f66:	e00e      	b.n	8003f86 <HAL_GPIO_EXTI_Callback+0x216>
		}
		else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))
 8003f68:	88fb      	ldrh	r3, [r7, #6]
 8003f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f6e:	d10a      	bne.n	8003f86 <HAL_GPIO_EXTI_Callback+0x216>
 8003f70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f74:	4828      	ldr	r0, [pc, #160]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003f76:	f001 fc2b 	bl	80057d0 <HAL_GPIO_ReadPin>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <HAL_GPIO_EXTI_Callback+0x216>
		{
			keyPressed = 50; //ASCII value of 2
 8003f80:	4b26      	ldr	r3, [pc, #152]	; (800401c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003f82:	2232      	movs	r2, #50	; 0x32
 8003f84:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8003f86:	2200      	movs	r2, #0
 8003f88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f8c:	4822      	ldr	r0, [pc, #136]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003f8e:	f001 fc37 	bl	8005800 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8003f92:	2200      	movs	r2, #0
 8003f94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f98:	481f      	ldr	r0, [pc, #124]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003f9a:	f001 fc31 	bl	8005800 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fa4:	481c      	ldr	r0, [pc, #112]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003fa6:	f001 fc2b 	bl	8005800 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 8003faa:	2201      	movs	r2, #1
 8003fac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fb0:	4819      	ldr	r0, [pc, #100]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003fb2:	f001 fc25 	bl	8005800 <HAL_GPIO_WritePin>
		if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6))
 8003fb6:	88fb      	ldrh	r3, [r7, #6]
 8003fb8:	2b40      	cmp	r3, #64	; 0x40
 8003fba:	d10a      	bne.n	8003fd2 <HAL_GPIO_EXTI_Callback+0x262>
 8003fbc:	2140      	movs	r1, #64	; 0x40
 8003fbe:	4816      	ldr	r0, [pc, #88]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003fc0:	f001 fc06 	bl	80057d0 <HAL_GPIO_ReadPin>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_GPIO_EXTI_Callback+0x262>
		{
			keyPressed = 42; //ASCII value of *
 8003fca:	4b14      	ldr	r3, [pc, #80]	; (800401c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003fcc:	222a      	movs	r2, #42	; 0x2a
 8003fce:	701a      	strb	r2, [r3, #0]
 8003fd0:	e035      	b.n	800403e <HAL_GPIO_EXTI_Callback+0x2ce>
		}
		else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7))
 8003fd2:	88fb      	ldrh	r3, [r7, #6]
 8003fd4:	2b80      	cmp	r3, #128	; 0x80
 8003fd6:	d10a      	bne.n	8003fee <HAL_GPIO_EXTI_Callback+0x27e>
 8003fd8:	2180      	movs	r1, #128	; 0x80
 8003fda:	480f      	ldr	r0, [pc, #60]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003fdc:	f001 fbf8 	bl	80057d0 <HAL_GPIO_ReadPin>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_GPIO_EXTI_Callback+0x27e>
		{
			keyPressed = 55; //ASCII value of 7
 8003fe6:	4b0d      	ldr	r3, [pc, #52]	; (800401c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003fe8:	2237      	movs	r2, #55	; 0x37
 8003fea:	701a      	strb	r2, [r3, #0]
 8003fec:	e027      	b.n	800403e <HAL_GPIO_EXTI_Callback+0x2ce>
		}
		else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8))
 8003fee:	88fb      	ldrh	r3, [r7, #6]
 8003ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff4:	d114      	bne.n	8004020 <HAL_GPIO_EXTI_Callback+0x2b0>
 8003ff6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ffa:	4807      	ldr	r0, [pc, #28]	; (8004018 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003ffc:	f001 fbe8 	bl	80057d0 <HAL_GPIO_ReadPin>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00c      	beq.n	8004020 <HAL_GPIO_EXTI_Callback+0x2b0>
		{
			keyPressed = 52; //ASCII value of 4
 8004006:	4b05      	ldr	r3, [pc, #20]	; (800401c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8004008:	2234      	movs	r2, #52	; 0x34
 800400a:	701a      	strb	r2, [r3, #0]
 800400c:	e017      	b.n	800403e <HAL_GPIO_EXTI_Callback+0x2ce>
 800400e:	bf00      	nop
 8004010:	200006f4 	.word	0x200006f4
 8004014:	200006f0 	.word	0x200006f0
 8004018:	48001000 	.word	0x48001000
 800401c:	200006f8 	.word	0x200006f8
		}
		else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))
 8004020:	88fb      	ldrh	r3, [r7, #6]
 8004022:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004026:	d10a      	bne.n	800403e <HAL_GPIO_EXTI_Callback+0x2ce>
 8004028:	f44f 7100 	mov.w	r1, #512	; 0x200
 800402c:	481b      	ldr	r0, [pc, #108]	; (800409c <HAL_GPIO_EXTI_Callback+0x32c>)
 800402e:	f001 fbcf 	bl	80057d0 <HAL_GPIO_ReadPin>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <HAL_GPIO_EXTI_Callback+0x2ce>
		{
			keyPressed = 49; //ASCII value of 1
 8004038:	4b19      	ldr	r3, [pc, #100]	; (80040a0 <HAL_GPIO_EXTI_Callback+0x330>)
 800403a:	2231      	movs	r2, #49	; 0x31
 800403c:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 800403e:	2201      	movs	r2, #1
 8004040:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004044:	4815      	ldr	r0, [pc, #84]	; (800409c <HAL_GPIO_EXTI_Callback+0x32c>)
 8004046:	f001 fbdb 	bl	8005800 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 800404a:	2201      	movs	r2, #1
 800404c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004050:	4812      	ldr	r0, [pc, #72]	; (800409c <HAL_GPIO_EXTI_Callback+0x32c>)
 8004052:	f001 fbd5 	bl	8005800 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 8004056:	2201      	movs	r2, #1
 8004058:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800405c:	480f      	ldr	r0, [pc, #60]	; (800409c <HAL_GPIO_EXTI_Callback+0x32c>)
 800405e:	f001 fbcf 	bl	8005800 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 8004062:	2201      	movs	r2, #1
 8004064:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004068:	480c      	ldr	r0, [pc, #48]	; (800409c <HAL_GPIO_EXTI_Callback+0x32c>)
 800406a:	f001 fbc9 	bl	8005800 <HAL_GPIO_WritePin>
		/*Configure GPIO pins : PB6 PB7 PB8 PB9 back to EXTI*/
		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 800406e:	4b0d      	ldr	r3, [pc, #52]	; (80040a4 <HAL_GPIO_EXTI_Callback+0x334>)
 8004070:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 8004074:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8004076:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_GPIO_EXTI_Callback+0x334>)
 8004078:	2202      	movs	r2, #2
 800407a:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(GPIOE, &GPIO_InitStructPrivate);
 800407c:	4909      	ldr	r1, [pc, #36]	; (80040a4 <HAL_GPIO_EXTI_Callback+0x334>)
 800407e:	4807      	ldr	r0, [pc, #28]	; (800409c <HAL_GPIO_EXTI_Callback+0x32c>)
 8004080:	f001 fa14 	bl	80054ac <HAL_GPIO_Init>
		//    if(keyPressed != 0){
		//
		//    }
		//    keyPressed = 0;
		is_press = 1;
 8004084:	4b08      	ldr	r3, [pc, #32]	; (80040a8 <HAL_GPIO_EXTI_Callback+0x338>)
 8004086:	2201      	movs	r2, #1
 8004088:	701a      	strb	r2, [r3, #0]
		previousMillis = currentMillis;
 800408a:	4b08      	ldr	r3, [pc, #32]	; (80040ac <HAL_GPIO_EXTI_Callback+0x33c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a08      	ldr	r2, [pc, #32]	; (80040b0 <HAL_GPIO_EXTI_Callback+0x340>)
 8004090:	6013      	str	r3, [r2, #0]
	}

}
 8004092:	bf00      	nop
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	48001000 	.word	0x48001000
 80040a0:	200006f8 	.word	0x200006f8
 80040a4:	200006dc 	.word	0x200006dc
 80040a8:	200006f9 	.word	0x200006f9
 80040ac:	200006f4 	.word	0x200006f4
 80040b0:	200006f0 	.word	0x200006f0

080040b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80040b8:	b672      	cpsid	i
}
 80040ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80040bc:	e7fe      	b.n	80040bc <Error_Handler+0x8>

080040be <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80040be:	b480      	push	{r7}
 80040c0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80040c2:	bf00      	nop
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af04      	add	r7, sp, #16
 80040d2:	4603      	mov	r3, r0
 80040d4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80040d6:	f04f 33ff 	mov.w	r3, #4294967295
 80040da:	9302      	str	r3, [sp, #8]
 80040dc:	2301      	movs	r3, #1
 80040de:	9301      	str	r3, [sp, #4]
 80040e0:	1dfb      	adds	r3, r7, #7
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	2301      	movs	r3, #1
 80040e6:	2200      	movs	r2, #0
 80040e8:	2178      	movs	r1, #120	; 0x78
 80040ea:	4803      	ldr	r0, [pc, #12]	; (80040f8 <ssd1306_WriteCommand+0x2c>)
 80040ec:	f001 fe32 	bl	8005d54 <HAL_I2C_Mem_Write>
}
 80040f0:	bf00      	nop
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	200002ac 	.word	0x200002ac

080040fc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af04      	add	r7, sp, #16
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	b29b      	uxth	r3, r3
 800410a:	f04f 32ff 	mov.w	r2, #4294967295
 800410e:	9202      	str	r2, [sp, #8]
 8004110:	9301      	str	r3, [sp, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	2301      	movs	r3, #1
 8004118:	2240      	movs	r2, #64	; 0x40
 800411a:	2178      	movs	r1, #120	; 0x78
 800411c:	4803      	ldr	r0, [pc, #12]	; (800412c <ssd1306_WriteData+0x30>)
 800411e:	f001 fe19 	bl	8005d54 <HAL_I2C_Mem_Write>
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	200002ac 	.word	0x200002ac

08004130 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004134:	f7ff ffc3 	bl	80040be <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004138:	2064      	movs	r0, #100	; 0x64
 800413a:	f000 fe0f 	bl	8004d5c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800413e:	2000      	movs	r0, #0
 8004140:	f000 f9da 	bl	80044f8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004144:	2020      	movs	r0, #32
 8004146:	f7ff ffc1 	bl	80040cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800414a:	2000      	movs	r0, #0
 800414c:	f7ff ffbe 	bl	80040cc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004150:	20b0      	movs	r0, #176	; 0xb0
 8004152:	f7ff ffbb 	bl	80040cc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004156:	20c8      	movs	r0, #200	; 0xc8
 8004158:	f7ff ffb8 	bl	80040cc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800415c:	2000      	movs	r0, #0
 800415e:	f7ff ffb5 	bl	80040cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004162:	2010      	movs	r0, #16
 8004164:	f7ff ffb2 	bl	80040cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004168:	2040      	movs	r0, #64	; 0x40
 800416a:	f7ff ffaf 	bl	80040cc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800416e:	20ff      	movs	r0, #255	; 0xff
 8004170:	f000 f9ae 	bl	80044d0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004174:	20a1      	movs	r0, #161	; 0xa1
 8004176:	f7ff ffa9 	bl	80040cc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800417a:	20a6      	movs	r0, #166	; 0xa6
 800417c:	f7ff ffa6 	bl	80040cc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004180:	20a8      	movs	r0, #168	; 0xa8
 8004182:	f7ff ffa3 	bl	80040cc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8004186:	203f      	movs	r0, #63	; 0x3f
 8004188:	f7ff ffa0 	bl	80040cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800418c:	20a4      	movs	r0, #164	; 0xa4
 800418e:	f7ff ff9d 	bl	80040cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004192:	20d3      	movs	r0, #211	; 0xd3
 8004194:	f7ff ff9a 	bl	80040cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004198:	2000      	movs	r0, #0
 800419a:	f7ff ff97 	bl	80040cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800419e:	20d5      	movs	r0, #213	; 0xd5
 80041a0:	f7ff ff94 	bl	80040cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80041a4:	20f0      	movs	r0, #240	; 0xf0
 80041a6:	f7ff ff91 	bl	80040cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80041aa:	20d9      	movs	r0, #217	; 0xd9
 80041ac:	f7ff ff8e 	bl	80040cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80041b0:	2022      	movs	r0, #34	; 0x22
 80041b2:	f7ff ff8b 	bl	80040cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80041b6:	20da      	movs	r0, #218	; 0xda
 80041b8:	f7ff ff88 	bl	80040cc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80041bc:	2012      	movs	r0, #18
 80041be:	f7ff ff85 	bl	80040cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80041c2:	20db      	movs	r0, #219	; 0xdb
 80041c4:	f7ff ff82 	bl	80040cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80041c8:	2020      	movs	r0, #32
 80041ca:	f7ff ff7f 	bl	80040cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80041ce:	208d      	movs	r0, #141	; 0x8d
 80041d0:	f7ff ff7c 	bl	80040cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80041d4:	2014      	movs	r0, #20
 80041d6:	f7ff ff79 	bl	80040cc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80041da:	2001      	movs	r0, #1
 80041dc:	f000 f98c 	bl	80044f8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80041e0:	2000      	movs	r0, #0
 80041e2:	f000 f80f 	bl	8004204 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80041e6:	f000 f831 	bl	800424c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80041ea:	4b05      	ldr	r3, [pc, #20]	; (8004200 <ssd1306_Init+0xd0>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80041f0:	4b03      	ldr	r3, [pc, #12]	; (8004200 <ssd1306_Init+0xd0>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80041f6:	4b02      	ldr	r3, [pc, #8]	; (8004200 <ssd1306_Init+0xd0>)
 80041f8:	2201      	movs	r2, #1
 80041fa:	711a      	strb	r2, [r3, #4]
}
 80041fc:	bf00      	nop
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20000b94 	.word	0x20000b94

08004204 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	e00d      	b.n	8004230 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004214:	79fb      	ldrb	r3, [r7, #7]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <ssd1306_Fill+0x1a>
 800421a:	2100      	movs	r1, #0
 800421c:	e000      	b.n	8004220 <ssd1306_Fill+0x1c>
 800421e:	21ff      	movs	r1, #255	; 0xff
 8004220:	4a09      	ldr	r2, [pc, #36]	; (8004248 <ssd1306_Fill+0x44>)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4413      	add	r3, r2
 8004226:	460a      	mov	r2, r1
 8004228:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3301      	adds	r3, #1
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004236:	d3ed      	bcc.n	8004214 <ssd1306_Fill+0x10>
    }
}
 8004238:	bf00      	nop
 800423a:	bf00      	nop
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	20000794 	.word	0x20000794

0800424c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004252:	2300      	movs	r3, #0
 8004254:	71fb      	strb	r3, [r7, #7]
 8004256:	e016      	b.n	8004286 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004258:	79fb      	ldrb	r3, [r7, #7]
 800425a:	3b50      	subs	r3, #80	; 0x50
 800425c:	b2db      	uxtb	r3, r3
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff ff34 	bl	80040cc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004264:	2000      	movs	r0, #0
 8004266:	f7ff ff31 	bl	80040cc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800426a:	2010      	movs	r0, #16
 800426c:	f7ff ff2e 	bl	80040cc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004270:	79fb      	ldrb	r3, [r7, #7]
 8004272:	01db      	lsls	r3, r3, #7
 8004274:	4a08      	ldr	r2, [pc, #32]	; (8004298 <ssd1306_UpdateScreen+0x4c>)
 8004276:	4413      	add	r3, r2
 8004278:	2180      	movs	r1, #128	; 0x80
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff ff3e 	bl	80040fc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	3301      	adds	r3, #1
 8004284:	71fb      	strb	r3, [r7, #7]
 8004286:	79fb      	ldrb	r3, [r7, #7]
 8004288:	2b07      	cmp	r3, #7
 800428a:	d9e5      	bls.n	8004258 <ssd1306_UpdateScreen+0xc>
    }
}
 800428c:	bf00      	nop
 800428e:	bf00      	nop
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	20000794 	.word	0x20000794

0800429c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	71fb      	strb	r3, [r7, #7]
 80042a6:	460b      	mov	r3, r1
 80042a8:	71bb      	strb	r3, [r7, #6]
 80042aa:	4613      	mov	r3, r2
 80042ac:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80042ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	db3d      	blt.n	8004332 <ssd1306_DrawPixel+0x96>
 80042b6:	79bb      	ldrb	r3, [r7, #6]
 80042b8:	2b3f      	cmp	r3, #63	; 0x3f
 80042ba:	d83a      	bhi.n	8004332 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80042bc:	797b      	ldrb	r3, [r7, #5]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d11a      	bne.n	80042f8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80042c2:	79fa      	ldrb	r2, [r7, #7]
 80042c4:	79bb      	ldrb	r3, [r7, #6]
 80042c6:	08db      	lsrs	r3, r3, #3
 80042c8:	b2d8      	uxtb	r0, r3
 80042ca:	4603      	mov	r3, r0
 80042cc:	01db      	lsls	r3, r3, #7
 80042ce:	4413      	add	r3, r2
 80042d0:	4a1b      	ldr	r2, [pc, #108]	; (8004340 <ssd1306_DrawPixel+0xa4>)
 80042d2:	5cd3      	ldrb	r3, [r2, r3]
 80042d4:	b25a      	sxtb	r2, r3
 80042d6:	79bb      	ldrb	r3, [r7, #6]
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	2101      	movs	r1, #1
 80042de:	fa01 f303 	lsl.w	r3, r1, r3
 80042e2:	b25b      	sxtb	r3, r3
 80042e4:	4313      	orrs	r3, r2
 80042e6:	b259      	sxtb	r1, r3
 80042e8:	79fa      	ldrb	r2, [r7, #7]
 80042ea:	4603      	mov	r3, r0
 80042ec:	01db      	lsls	r3, r3, #7
 80042ee:	4413      	add	r3, r2
 80042f0:	b2c9      	uxtb	r1, r1
 80042f2:	4a13      	ldr	r2, [pc, #76]	; (8004340 <ssd1306_DrawPixel+0xa4>)
 80042f4:	54d1      	strb	r1, [r2, r3]
 80042f6:	e01d      	b.n	8004334 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80042f8:	79fa      	ldrb	r2, [r7, #7]
 80042fa:	79bb      	ldrb	r3, [r7, #6]
 80042fc:	08db      	lsrs	r3, r3, #3
 80042fe:	b2d8      	uxtb	r0, r3
 8004300:	4603      	mov	r3, r0
 8004302:	01db      	lsls	r3, r3, #7
 8004304:	4413      	add	r3, r2
 8004306:	4a0e      	ldr	r2, [pc, #56]	; (8004340 <ssd1306_DrawPixel+0xa4>)
 8004308:	5cd3      	ldrb	r3, [r2, r3]
 800430a:	b25a      	sxtb	r2, r3
 800430c:	79bb      	ldrb	r3, [r7, #6]
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	2101      	movs	r1, #1
 8004314:	fa01 f303 	lsl.w	r3, r1, r3
 8004318:	b25b      	sxtb	r3, r3
 800431a:	43db      	mvns	r3, r3
 800431c:	b25b      	sxtb	r3, r3
 800431e:	4013      	ands	r3, r2
 8004320:	b259      	sxtb	r1, r3
 8004322:	79fa      	ldrb	r2, [r7, #7]
 8004324:	4603      	mov	r3, r0
 8004326:	01db      	lsls	r3, r3, #7
 8004328:	4413      	add	r3, r2
 800432a:	b2c9      	uxtb	r1, r1
 800432c:	4a04      	ldr	r2, [pc, #16]	; (8004340 <ssd1306_DrawPixel+0xa4>)
 800432e:	54d1      	strb	r1, [r2, r3]
 8004330:	e000      	b.n	8004334 <ssd1306_DrawPixel+0x98>
        return;
 8004332:	bf00      	nop
    }
}
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	20000794 	.word	0x20000794

08004344 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8004344:	b590      	push	{r4, r7, lr}
 8004346:	b089      	sub	sp, #36	; 0x24
 8004348:	af00      	add	r7, sp, #0
 800434a:	4604      	mov	r4, r0
 800434c:	1d38      	adds	r0, r7, #4
 800434e:	e880 0006 	stmia.w	r0, {r1, r2}
 8004352:	461a      	mov	r2, r3
 8004354:	4623      	mov	r3, r4
 8004356:	73fb      	strb	r3, [r7, #15]
 8004358:	4613      	mov	r3, r2
 800435a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	2b1f      	cmp	r3, #31
 8004360:	d902      	bls.n	8004368 <ssd1306_WriteChar+0x24>
 8004362:	7bfb      	ldrb	r3, [r7, #15]
 8004364:	2b7e      	cmp	r3, #126	; 0x7e
 8004366:	d901      	bls.n	800436c <ssd1306_WriteChar+0x28>
        return 0;
 8004368:	2300      	movs	r3, #0
 800436a:	e06d      	b.n	8004448 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800436c:	4b38      	ldr	r3, [pc, #224]	; (8004450 <ssd1306_WriteChar+0x10c>)
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	793b      	ldrb	r3, [r7, #4]
 8004374:	4413      	add	r3, r2
 8004376:	2b80      	cmp	r3, #128	; 0x80
 8004378:	dc06      	bgt.n	8004388 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800437a:	4b35      	ldr	r3, [pc, #212]	; (8004450 <ssd1306_WriteChar+0x10c>)
 800437c:	885b      	ldrh	r3, [r3, #2]
 800437e:	461a      	mov	r2, r3
 8004380:	797b      	ldrb	r3, [r7, #5]
 8004382:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004384:	2b40      	cmp	r3, #64	; 0x40
 8004386:	dd01      	ble.n	800438c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8004388:	2300      	movs	r3, #0
 800438a:	e05d      	b.n	8004448 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800438c:	2300      	movs	r3, #0
 800438e:	61fb      	str	r3, [r7, #28]
 8004390:	e04c      	b.n	800442c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	7bfb      	ldrb	r3, [r7, #15]
 8004396:	3b20      	subs	r3, #32
 8004398:	7979      	ldrb	r1, [r7, #5]
 800439a:	fb01 f303 	mul.w	r3, r1, r3
 800439e:	4619      	mov	r1, r3
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	440b      	add	r3, r1
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	4413      	add	r3, r2
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80043ac:	2300      	movs	r3, #0
 80043ae:	61bb      	str	r3, [r7, #24]
 80043b0:	e034      	b.n	800441c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d012      	beq.n	80043e8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80043c2:	4b23      	ldr	r3, [pc, #140]	; (8004450 <ssd1306_WriteChar+0x10c>)
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	4413      	add	r3, r2
 80043ce:	b2d8      	uxtb	r0, r3
 80043d0:	4b1f      	ldr	r3, [pc, #124]	; (8004450 <ssd1306_WriteChar+0x10c>)
 80043d2:	885b      	ldrh	r3, [r3, #2]
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	4413      	add	r3, r2
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	7bba      	ldrb	r2, [r7, #14]
 80043e0:	4619      	mov	r1, r3
 80043e2:	f7ff ff5b 	bl	800429c <ssd1306_DrawPixel>
 80043e6:	e016      	b.n	8004416 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80043e8:	4b19      	ldr	r3, [pc, #100]	; (8004450 <ssd1306_WriteChar+0x10c>)
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	4413      	add	r3, r2
 80043f4:	b2d8      	uxtb	r0, r3
 80043f6:	4b16      	ldr	r3, [pc, #88]	; (8004450 <ssd1306_WriteChar+0x10c>)
 80043f8:	885b      	ldrh	r3, [r3, #2]
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	4413      	add	r3, r2
 8004402:	b2d9      	uxtb	r1, r3
 8004404:	7bbb      	ldrb	r3, [r7, #14]
 8004406:	2b00      	cmp	r3, #0
 8004408:	bf0c      	ite	eq
 800440a:	2301      	moveq	r3, #1
 800440c:	2300      	movne	r3, #0
 800440e:	b2db      	uxtb	r3, r3
 8004410:	461a      	mov	r2, r3
 8004412:	f7ff ff43 	bl	800429c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	3301      	adds	r3, #1
 800441a:	61bb      	str	r3, [r7, #24]
 800441c:	793b      	ldrb	r3, [r7, #4]
 800441e:	461a      	mov	r2, r3
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	4293      	cmp	r3, r2
 8004424:	d3c5      	bcc.n	80043b2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	3301      	adds	r3, #1
 800442a:	61fb      	str	r3, [r7, #28]
 800442c:	797b      	ldrb	r3, [r7, #5]
 800442e:	461a      	mov	r2, r3
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	4293      	cmp	r3, r2
 8004434:	d3ad      	bcc.n	8004392 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8004436:	4b06      	ldr	r3, [pc, #24]	; (8004450 <ssd1306_WriteChar+0x10c>)
 8004438:	881a      	ldrh	r2, [r3, #0]
 800443a:	793b      	ldrb	r3, [r7, #4]
 800443c:	b29b      	uxth	r3, r3
 800443e:	4413      	add	r3, r2
 8004440:	b29a      	uxth	r2, r3
 8004442:	4b03      	ldr	r3, [pc, #12]	; (8004450 <ssd1306_WriteChar+0x10c>)
 8004444:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004446:	7bfb      	ldrb	r3, [r7, #15]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3724      	adds	r7, #36	; 0x24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd90      	pop	{r4, r7, pc}
 8004450:	20000b94 	.word	0x20000b94

08004454 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	1d38      	adds	r0, r7, #4
 800445e:	e880 0006 	stmia.w	r0, {r1, r2}
 8004462:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8004464:	e012      	b.n	800448c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	7818      	ldrb	r0, [r3, #0]
 800446a:	78fb      	ldrb	r3, [r7, #3]
 800446c:	1d3a      	adds	r2, r7, #4
 800446e:	ca06      	ldmia	r2, {r1, r2}
 8004470:	f7ff ff68 	bl	8004344 <ssd1306_WriteChar>
 8004474:	4603      	mov	r3, r0
 8004476:	461a      	mov	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	d002      	beq.n	8004486 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	e008      	b.n	8004498 <ssd1306_WriteString+0x44>
        }
        str++;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	3301      	adds	r3, #1
 800448a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1e8      	bne.n	8004466 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	781b      	ldrb	r3, [r3, #0]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	460a      	mov	r2, r1
 80044aa:	71fb      	strb	r3, [r7, #7]
 80044ac:	4613      	mov	r3, r2
 80044ae:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	4b05      	ldr	r3, [pc, #20]	; (80044cc <ssd1306_SetCursor+0x2c>)
 80044b6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80044b8:	79bb      	ldrb	r3, [r7, #6]
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	4b03      	ldr	r3, [pc, #12]	; (80044cc <ssd1306_SetCursor+0x2c>)
 80044be:	805a      	strh	r2, [r3, #2]
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	20000b94 	.word	0x20000b94

080044d0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	4603      	mov	r3, r0
 80044d8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80044da:	2381      	movs	r3, #129	; 0x81
 80044dc:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff fdf3 	bl	80040cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff fdef 	bl	80040cc <ssd1306_WriteCommand>
}
 80044ee:	bf00      	nop
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	4603      	mov	r3, r0
 8004500:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004508:	23af      	movs	r3, #175	; 0xaf
 800450a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800450c:	4b08      	ldr	r3, [pc, #32]	; (8004530 <ssd1306_SetDisplayOn+0x38>)
 800450e:	2201      	movs	r2, #1
 8004510:	715a      	strb	r2, [r3, #5]
 8004512:	e004      	b.n	800451e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004514:	23ae      	movs	r3, #174	; 0xae
 8004516:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004518:	4b05      	ldr	r3, [pc, #20]	; (8004530 <ssd1306_SetDisplayOn+0x38>)
 800451a:	2200      	movs	r2, #0
 800451c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff fdd3 	bl	80040cc <ssd1306_WriteCommand>
}
 8004526:	bf00      	nop
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	20000b94 	.word	0x20000b94

08004534 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800453a:	4b0f      	ldr	r3, [pc, #60]	; (8004578 <HAL_MspInit+0x44>)
 800453c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800453e:	4a0e      	ldr	r2, [pc, #56]	; (8004578 <HAL_MspInit+0x44>)
 8004540:	f043 0301 	orr.w	r3, r3, #1
 8004544:	6613      	str	r3, [r2, #96]	; 0x60
 8004546:	4b0c      	ldr	r3, [pc, #48]	; (8004578 <HAL_MspInit+0x44>)
 8004548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	607b      	str	r3, [r7, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004552:	4b09      	ldr	r3, [pc, #36]	; (8004578 <HAL_MspInit+0x44>)
 8004554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004556:	4a08      	ldr	r2, [pc, #32]	; (8004578 <HAL_MspInit+0x44>)
 8004558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800455c:	6593      	str	r3, [r2, #88]	; 0x58
 800455e:	4b06      	ldr	r3, [pc, #24]	; (8004578 <HAL_MspInit+0x44>)
 8004560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004566:	603b      	str	r3, [r7, #0]
 8004568:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40021000 	.word	0x40021000

0800457c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b0b0      	sub	sp, #192	; 0xc0
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004584:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	605a      	str	r2, [r3, #4]
 800458e:	609a      	str	r2, [r3, #8]
 8004590:	60da      	str	r2, [r3, #12]
 8004592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004594:	f107 0318 	add.w	r3, r7, #24
 8004598:	2294      	movs	r2, #148	; 0x94
 800459a:	2100      	movs	r1, #0
 800459c:	4618      	mov	r0, r3
 800459e:	f005 ffdd 	bl	800a55c <memset>
  if(hi2c->Instance==I2C1)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a42      	ldr	r2, [pc, #264]	; (80046b0 <HAL_I2C_MspInit+0x134>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d13c      	bne.n	8004626 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80045ac:	2340      	movs	r3, #64	; 0x40
 80045ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80045b0:	2300      	movs	r3, #0
 80045b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045b4:	f107 0318 	add.w	r3, r7, #24
 80045b8:	4618      	mov	r0, r3
 80045ba:	f002 ffef 	bl	800759c <HAL_RCCEx_PeriphCLKConfig>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80045c4:	f7ff fd76 	bl	80040b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045c8:	4b3a      	ldr	r3, [pc, #232]	; (80046b4 <HAL_I2C_MspInit+0x138>)
 80045ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045cc:	4a39      	ldr	r2, [pc, #228]	; (80046b4 <HAL_I2C_MspInit+0x138>)
 80045ce:	f043 0302 	orr.w	r3, r3, #2
 80045d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045d4:	4b37      	ldr	r3, [pc, #220]	; (80046b4 <HAL_I2C_MspInit+0x138>)
 80045d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80045e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80045e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045e8:	2312      	movs	r3, #18
 80045ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045f4:	2303      	movs	r3, #3
 80045f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80045fa:	2304      	movs	r3, #4
 80045fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004600:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004604:	4619      	mov	r1, r3
 8004606:	482c      	ldr	r0, [pc, #176]	; (80046b8 <HAL_I2C_MspInit+0x13c>)
 8004608:	f000 ff50 	bl	80054ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800460c:	4b29      	ldr	r3, [pc, #164]	; (80046b4 <HAL_I2C_MspInit+0x138>)
 800460e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004610:	4a28      	ldr	r2, [pc, #160]	; (80046b4 <HAL_I2C_MspInit+0x138>)
 8004612:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004616:	6593      	str	r3, [r2, #88]	; 0x58
 8004618:	4b26      	ldr	r3, [pc, #152]	; (80046b4 <HAL_I2C_MspInit+0x138>)
 800461a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004624:	e03f      	b.n	80046a6 <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a24      	ldr	r2, [pc, #144]	; (80046bc <HAL_I2C_MspInit+0x140>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d13a      	bne.n	80046a6 <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004630:	2380      	movs	r3, #128	; 0x80
 8004632:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004634:	2300      	movs	r3, #0
 8004636:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004638:	f107 0318 	add.w	r3, r7, #24
 800463c:	4618      	mov	r0, r3
 800463e:	f002 ffad 	bl	800759c <HAL_RCCEx_PeriphCLKConfig>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8004648:	f7ff fd34 	bl	80040b4 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800464c:	4b19      	ldr	r3, [pc, #100]	; (80046b4 <HAL_I2C_MspInit+0x138>)
 800464e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004650:	4a18      	ldr	r2, [pc, #96]	; (80046b4 <HAL_I2C_MspInit+0x138>)
 8004652:	f043 0320 	orr.w	r3, r3, #32
 8004656:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004658:	4b16      	ldr	r3, [pc, #88]	; (80046b4 <HAL_I2C_MspInit+0x138>)
 800465a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8004664:	2307      	movs	r3, #7
 8004666:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800466a:	2312      	movs	r3, #18
 800466c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004670:	2300      	movs	r3, #0
 8004672:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004676:	2303      	movs	r3, #3
 8004678:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800467c:	2304      	movs	r3, #4
 800467e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004682:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004686:	4619      	mov	r1, r3
 8004688:	480d      	ldr	r0, [pc, #52]	; (80046c0 <HAL_I2C_MspInit+0x144>)
 800468a:	f000 ff0f 	bl	80054ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800468e:	4b09      	ldr	r3, [pc, #36]	; (80046b4 <HAL_I2C_MspInit+0x138>)
 8004690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004692:	4a08      	ldr	r2, [pc, #32]	; (80046b4 <HAL_I2C_MspInit+0x138>)
 8004694:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004698:	6593      	str	r3, [r2, #88]	; 0x58
 800469a:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <HAL_I2C_MspInit+0x138>)
 800469c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046a2:	60bb      	str	r3, [r7, #8]
 80046a4:	68bb      	ldr	r3, [r7, #8]
}
 80046a6:	bf00      	nop
 80046a8:	37c0      	adds	r7, #192	; 0xc0
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40005400 	.word	0x40005400
 80046b4:	40021000 	.word	0x40021000
 80046b8:	48000400 	.word	0x48000400
 80046bc:	40005800 	.word	0x40005800
 80046c0:	48001400 	.word	0x48001400

080046c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b0b2      	sub	sp, #200	; 0xc8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046cc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	605a      	str	r2, [r3, #4]
 80046d6:	609a      	str	r2, [r3, #8]
 80046d8:	60da      	str	r2, [r3, #12]
 80046da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80046dc:	f107 0320 	add.w	r3, r7, #32
 80046e0:	2294      	movs	r2, #148	; 0x94
 80046e2:	2100      	movs	r1, #0
 80046e4:	4618      	mov	r0, r3
 80046e6:	f005 ff39 	bl	800a55c <memset>
  if(huart->Instance==LPUART1)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a69      	ldr	r2, [pc, #420]	; (8004894 <HAL_UART_MspInit+0x1d0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d13e      	bne.n	8004772 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80046f4:	2320      	movs	r3, #32
 80046f6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80046f8:	2300      	movs	r3, #0
 80046fa:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046fc:	f107 0320 	add.w	r3, r7, #32
 8004700:	4618      	mov	r0, r3
 8004702:	f002 ff4b 	bl	800759c <HAL_RCCEx_PeriphCLKConfig>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800470c:	f7ff fcd2 	bl	80040b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004710:	4b61      	ldr	r3, [pc, #388]	; (8004898 <HAL_UART_MspInit+0x1d4>)
 8004712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004714:	4a60      	ldr	r2, [pc, #384]	; (8004898 <HAL_UART_MspInit+0x1d4>)
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800471c:	4b5e      	ldr	r3, [pc, #376]	; (8004898 <HAL_UART_MspInit+0x1d4>)
 800471e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	61fb      	str	r3, [r7, #28]
 8004726:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004728:	4b5b      	ldr	r3, [pc, #364]	; (8004898 <HAL_UART_MspInit+0x1d4>)
 800472a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472c:	4a5a      	ldr	r2, [pc, #360]	; (8004898 <HAL_UART_MspInit+0x1d4>)
 800472e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004732:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004734:	4b58      	ldr	r3, [pc, #352]	; (8004898 <HAL_UART_MspInit+0x1d4>)
 8004736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473c:	61bb      	str	r3, [r7, #24]
 800473e:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8004740:	f002 f844 	bl	80067cc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004744:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800474c:	2302      	movs	r3, #2
 800474e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004752:	2300      	movs	r3, #0
 8004754:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004758:	2303      	movs	r3, #3
 800475a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800475e:	2308      	movs	r3, #8
 8004760:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004764:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004768:	4619      	mov	r1, r3
 800476a:	484c      	ldr	r0, [pc, #304]	; (800489c <HAL_UART_MspInit+0x1d8>)
 800476c:	f000 fe9e 	bl	80054ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004770:	e08b      	b.n	800488a <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==USART2)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a4a      	ldr	r2, [pc, #296]	; (80048a0 <HAL_UART_MspInit+0x1dc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	f040 8086 	bne.w	800488a <HAL_UART_MspInit+0x1c6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800477e:	2302      	movs	r3, #2
 8004780:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004782:	2300      	movs	r3, #0
 8004784:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004786:	f107 0320 	add.w	r3, r7, #32
 800478a:	4618      	mov	r0, r3
 800478c:	f002 ff06 	bl	800759c <HAL_RCCEx_PeriphCLKConfig>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8004796:	f7ff fc8d 	bl	80040b4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800479a:	4b3f      	ldr	r3, [pc, #252]	; (8004898 <HAL_UART_MspInit+0x1d4>)
 800479c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479e:	4a3e      	ldr	r2, [pc, #248]	; (8004898 <HAL_UART_MspInit+0x1d4>)
 80047a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a4:	6593      	str	r3, [r2, #88]	; 0x58
 80047a6:	4b3c      	ldr	r3, [pc, #240]	; (8004898 <HAL_UART_MspInit+0x1d4>)
 80047a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047b2:	4b39      	ldr	r3, [pc, #228]	; (8004898 <HAL_UART_MspInit+0x1d4>)
 80047b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b6:	4a38      	ldr	r2, [pc, #224]	; (8004898 <HAL_UART_MspInit+0x1d4>)
 80047b8:	f043 0301 	orr.w	r3, r3, #1
 80047bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047be:	4b36      	ldr	r3, [pc, #216]	; (8004898 <HAL_UART_MspInit+0x1d4>)
 80047c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80047ca:	4b33      	ldr	r3, [pc, #204]	; (8004898 <HAL_UART_MspInit+0x1d4>)
 80047cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ce:	4a32      	ldr	r2, [pc, #200]	; (8004898 <HAL_UART_MspInit+0x1d4>)
 80047d0:	f043 0308 	orr.w	r3, r3, #8
 80047d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047d6:	4b30      	ldr	r3, [pc, #192]	; (8004898 <HAL_UART_MspInit+0x1d4>)
 80047d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80047e2:	2308      	movs	r3, #8
 80047e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e8:	2302      	movs	r3, #2
 80047ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047f4:	2303      	movs	r3, #3
 80047f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80047fa:	2307      	movs	r3, #7
 80047fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004800:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004804:	4619      	mov	r1, r3
 8004806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800480a:	f000 fe4f 	bl	80054ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800480e:	2338      	movs	r3, #56	; 0x38
 8004810:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004814:	2302      	movs	r3, #2
 8004816:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481a:	2300      	movs	r3, #0
 800481c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004820:	2303      	movs	r3, #3
 8004822:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004826:	2307      	movs	r3, #7
 8004828:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800482c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004830:	4619      	mov	r1, r3
 8004832:	481c      	ldr	r0, [pc, #112]	; (80048a4 <HAL_UART_MspInit+0x1e0>)
 8004834:	f000 fe3a 	bl	80054ac <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8004838:	4b1b      	ldr	r3, [pc, #108]	; (80048a8 <HAL_UART_MspInit+0x1e4>)
 800483a:	4a1c      	ldr	r2, [pc, #112]	; (80048ac <HAL_UART_MspInit+0x1e8>)
 800483c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800483e:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <HAL_UART_MspInit+0x1e4>)
 8004840:	221a      	movs	r2, #26
 8004842:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004844:	4b18      	ldr	r3, [pc, #96]	; (80048a8 <HAL_UART_MspInit+0x1e4>)
 8004846:	2200      	movs	r2, #0
 8004848:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800484a:	4b17      	ldr	r3, [pc, #92]	; (80048a8 <HAL_UART_MspInit+0x1e4>)
 800484c:	2200      	movs	r2, #0
 800484e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004850:	4b15      	ldr	r3, [pc, #84]	; (80048a8 <HAL_UART_MspInit+0x1e4>)
 8004852:	2280      	movs	r2, #128	; 0x80
 8004854:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004856:	4b14      	ldr	r3, [pc, #80]	; (80048a8 <HAL_UART_MspInit+0x1e4>)
 8004858:	2200      	movs	r2, #0
 800485a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800485c:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <HAL_UART_MspInit+0x1e4>)
 800485e:	2200      	movs	r2, #0
 8004860:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004862:	4b11      	ldr	r3, [pc, #68]	; (80048a8 <HAL_UART_MspInit+0x1e4>)
 8004864:	2200      	movs	r2, #0
 8004866:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004868:	4b0f      	ldr	r3, [pc, #60]	; (80048a8 <HAL_UART_MspInit+0x1e4>)
 800486a:	2200      	movs	r2, #0
 800486c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800486e:	480e      	ldr	r0, [pc, #56]	; (80048a8 <HAL_UART_MspInit+0x1e4>)
 8004870:	f000 fbaa 	bl	8004fc8 <HAL_DMA_Init>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 800487a:	f7ff fc1b 	bl	80040b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a09      	ldr	r2, [pc, #36]	; (80048a8 <HAL_UART_MspInit+0x1e4>)
 8004882:	67da      	str	r2, [r3, #124]	; 0x7c
 8004884:	4a08      	ldr	r2, [pc, #32]	; (80048a8 <HAL_UART_MspInit+0x1e4>)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6293      	str	r3, [r2, #40]	; 0x28
}
 800488a:	bf00      	nop
 800488c:	37c8      	adds	r7, #200	; 0xc8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40008000 	.word	0x40008000
 8004898:	40021000 	.word	0x40021000
 800489c:	48001800 	.word	0x48001800
 80048a0:	40004400 	.word	0x40004400
 80048a4:	48000c00 	.word	0x48000c00
 80048a8:	20000474 	.word	0x20000474
 80048ac:	40020008 	.word	0x40020008

080048b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08a      	sub	sp, #40	; 0x28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048b8:	f107 0314 	add.w	r3, r7, #20
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	605a      	str	r2, [r3, #4]
 80048c2:	609a      	str	r2, [r3, #8]
 80048c4:	60da      	str	r2, [r3, #12]
 80048c6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a25      	ldr	r2, [pc, #148]	; (8004964 <HAL_TIM_Base_MspInit+0xb4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d144      	bne.n	800495c <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80048d2:	4b25      	ldr	r3, [pc, #148]	; (8004968 <HAL_TIM_Base_MspInit+0xb8>)
 80048d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d6:	4a24      	ldr	r2, [pc, #144]	; (8004968 <HAL_TIM_Base_MspInit+0xb8>)
 80048d8:	f043 0304 	orr.w	r3, r3, #4
 80048dc:	6593      	str	r3, [r2, #88]	; 0x58
 80048de:	4b22      	ldr	r3, [pc, #136]	; (8004968 <HAL_TIM_Base_MspInit+0xb8>)
 80048e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	613b      	str	r3, [r7, #16]
 80048e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80048ea:	4b1f      	ldr	r3, [pc, #124]	; (8004968 <HAL_TIM_Base_MspInit+0xb8>)
 80048ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ee:	4a1e      	ldr	r2, [pc, #120]	; (8004968 <HAL_TIM_Base_MspInit+0xb8>)
 80048f0:	f043 0308 	orr.w	r3, r3, #8
 80048f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048f6:	4b1c      	ldr	r3, [pc, #112]	; (8004968 <HAL_TIM_Base_MspInit+0xb8>)
 80048f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004902:	4b19      	ldr	r3, [pc, #100]	; (8004968 <HAL_TIM_Base_MspInit+0xb8>)
 8004904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004906:	4a18      	ldr	r2, [pc, #96]	; (8004968 <HAL_TIM_Base_MspInit+0xb8>)
 8004908:	f043 0310 	orr.w	r3, r3, #16
 800490c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800490e:	4b16      	ldr	r3, [pc, #88]	; (8004968 <HAL_TIM_Base_MspInit+0xb8>)
 8004910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	60bb      	str	r3, [r7, #8]
 8004918:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    PE0     ------> TIM4_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800491a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800491e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004920:	2302      	movs	r3, #2
 8004922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004924:	2300      	movs	r3, #0
 8004926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004928:	2300      	movs	r3, #0
 800492a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800492c:	2302      	movs	r3, #2
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004930:	f107 0314 	add.w	r3, r7, #20
 8004934:	4619      	mov	r1, r3
 8004936:	480d      	ldr	r0, [pc, #52]	; (800496c <HAL_TIM_Base_MspInit+0xbc>)
 8004938:	f000 fdb8 	bl	80054ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800493c:	2301      	movs	r3, #1
 800493e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004940:	2302      	movs	r3, #2
 8004942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004948:	2300      	movs	r3, #0
 800494a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800494c:	2302      	movs	r3, #2
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004950:	f107 0314 	add.w	r3, r7, #20
 8004954:	4619      	mov	r1, r3
 8004956:	4806      	ldr	r0, [pc, #24]	; (8004970 <HAL_TIM_Base_MspInit+0xc0>)
 8004958:	f000 fda8 	bl	80054ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800495c:	bf00      	nop
 800495e:	3728      	adds	r7, #40	; 0x28
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40000800 	.word	0x40000800
 8004968:	40021000 	.word	0x40021000
 800496c:	48000c00 	.word	0x48000c00
 8004970:	48001000 	.word	0x48001000

08004974 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800497c:	f107 030c 	add.w	r3, r7, #12
 8004980:	2200      	movs	r2, #0
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	605a      	str	r2, [r3, #4]
 8004986:	609a      	str	r2, [r3, #8]
 8004988:	60da      	str	r2, [r3, #12]
 800498a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a11      	ldr	r2, [pc, #68]	; (80049d8 <HAL_TIM_MspPostInit+0x64>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d11b      	bne.n	80049ce <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004996:	4b11      	ldr	r3, [pc, #68]	; (80049dc <HAL_TIM_MspPostInit+0x68>)
 8004998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499a:	4a10      	ldr	r2, [pc, #64]	; (80049dc <HAL_TIM_MspPostInit+0x68>)
 800499c:	f043 0302 	orr.w	r3, r3, #2
 80049a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049a2:	4b0e      	ldr	r3, [pc, #56]	; (80049dc <HAL_TIM_MspPostInit+0x68>)
 80049a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	60bb      	str	r3, [r7, #8]
 80049ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80049ae:	2380      	movs	r3, #128	; 0x80
 80049b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049b2:	2302      	movs	r3, #2
 80049b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049ba:	2300      	movs	r3, #0
 80049bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80049be:	2302      	movs	r3, #2
 80049c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049c2:	f107 030c 	add.w	r3, r7, #12
 80049c6:	4619      	mov	r1, r3
 80049c8:	4805      	ldr	r0, [pc, #20]	; (80049e0 <HAL_TIM_MspPostInit+0x6c>)
 80049ca:	f000 fd6f 	bl	80054ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80049ce:	bf00      	nop
 80049d0:	3720      	adds	r7, #32
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40000800 	.word	0x40000800
 80049dc:	40021000 	.word	0x40021000
 80049e0:	48000400 	.word	0x48000400

080049e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049e8:	e7fe      	b.n	80049e8 <NMI_Handler+0x4>

080049ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049ea:	b480      	push	{r7}
 80049ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049ee:	e7fe      	b.n	80049ee <HardFault_Handler+0x4>

080049f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049f4:	e7fe      	b.n	80049f4 <MemManage_Handler+0x4>

080049f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049f6:	b480      	push	{r7}
 80049f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049fa:	e7fe      	b.n	80049fa <BusFault_Handler+0x4>

080049fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a00:	e7fe      	b.n	8004a00 <UsageFault_Handler+0x4>

08004a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a02:	b480      	push	{r7}
 8004a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a06:	bf00      	nop
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a14:	bf00      	nop
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a22:	bf00      	nop
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a30:	f000 f974 	bl	8004d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a34:	bf00      	nop
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004a3c:	4802      	ldr	r0, [pc, #8]	; (8004a48 <DMA1_Channel1_IRQHandler+0x10>)
 8004a3e:	f000 fbe6 	bl	800520e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004a42:	bf00      	nop
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20000474 	.word	0x20000474

08004a4c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004a50:	2040      	movs	r0, #64	; 0x40
 8004a52:	f000 feed 	bl	8005830 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004a56:	2080      	movs	r0, #128	; 0x80
 8004a58:	f000 feea 	bl	8005830 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004a5c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004a60:	f000 fee6 	bl	8005830 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004a64:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004a68:	f000 fee2 	bl	8005830 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004a6c:	bf00      	nop
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
	return 1;
 8004a74:	2301      	movs	r3, #1
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <_kill>:

int _kill(int pid, int sig)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004a8a:	f005 fd15 	bl	800a4b8 <__errno>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2216      	movs	r2, #22
 8004a92:	601a      	str	r2, [r3, #0]
	return -1;
 8004a94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <_exit>:

void _exit (int status)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7ff ffe7 	bl	8004a80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004ab2:	e7fe      	b.n	8004ab2 <_exit+0x12>

08004ab4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	e00a      	b.n	8004adc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004ac6:	f3af 8000 	nop.w
 8004aca:	4601      	mov	r1, r0
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	60ba      	str	r2, [r7, #8]
 8004ad2:	b2ca      	uxtb	r2, r1
 8004ad4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	dbf0      	blt.n	8004ac6 <_read+0x12>
	}

return len;
 8004ae4:	687b      	ldr	r3, [r7, #4]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3718      	adds	r7, #24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b086      	sub	sp, #24
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	e009      	b.n	8004b14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	60ba      	str	r2, [r7, #8]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff f91f 	bl	8003d4c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	3301      	adds	r3, #1
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	dbf1      	blt.n	8004b00 <_write+0x12>
	}
	return len;
 8004b1c:	687b      	ldr	r3, [r7, #4]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <_close>:

int _close(int file)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
	return -1;
 8004b2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b4e:	605a      	str	r2, [r3, #4]
	return 0;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <_isatty>:

int _isatty(int file)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
	return 1;
 8004b66:	2301      	movs	r3, #1
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
	return 0;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
	...

08004b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b98:	4a14      	ldr	r2, [pc, #80]	; (8004bec <_sbrk+0x5c>)
 8004b9a:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <_sbrk+0x60>)
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ba4:	4b13      	ldr	r3, [pc, #76]	; (8004bf4 <_sbrk+0x64>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d102      	bne.n	8004bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bac:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <_sbrk+0x64>)
 8004bae:	4a12      	ldr	r2, [pc, #72]	; (8004bf8 <_sbrk+0x68>)
 8004bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bb2:	4b10      	ldr	r3, [pc, #64]	; (8004bf4 <_sbrk+0x64>)
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4413      	add	r3, r2
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d207      	bcs.n	8004bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bc0:	f005 fc7a 	bl	800a4b8 <__errno>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	220c      	movs	r2, #12
 8004bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bca:	f04f 33ff 	mov.w	r3, #4294967295
 8004bce:	e009      	b.n	8004be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bd0:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <_sbrk+0x64>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004bd6:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <_sbrk+0x64>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4413      	add	r3, r2
 8004bde:	4a05      	ldr	r2, [pc, #20]	; (8004bf4 <_sbrk+0x64>)
 8004be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004be2:	68fb      	ldr	r3, [r7, #12]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	200a0000 	.word	0x200a0000
 8004bf0:	00000400 	.word	0x00000400
 8004bf4:	20000b9c 	.word	0x20000b9c
 8004bf8:	20000bb8 	.word	0x20000bb8

08004bfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004c00:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <SystemInit+0x20>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c06:	4a05      	ldr	r2, [pc, #20]	; (8004c1c <SystemInit+0x20>)
 8004c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004c10:	bf00      	nop
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	e000ed00 	.word	0xe000ed00

08004c20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004c24:	f7ff ffea 	bl	8004bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c28:	480c      	ldr	r0, [pc, #48]	; (8004c5c <LoopForever+0x6>)
  ldr r1, =_edata
 8004c2a:	490d      	ldr	r1, [pc, #52]	; (8004c60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004c2c:	4a0d      	ldr	r2, [pc, #52]	; (8004c64 <LoopForever+0xe>)
  movs r3, #0
 8004c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c30:	e002      	b.n	8004c38 <LoopCopyDataInit>

08004c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c36:	3304      	adds	r3, #4

08004c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c3c:	d3f9      	bcc.n	8004c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c3e:	4a0a      	ldr	r2, [pc, #40]	; (8004c68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004c40:	4c0a      	ldr	r4, [pc, #40]	; (8004c6c <LoopForever+0x16>)
  movs r3, #0
 8004c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c44:	e001      	b.n	8004c4a <LoopFillZerobss>

08004c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c48:	3204      	adds	r2, #4

08004c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c4c:	d3fb      	bcc.n	8004c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004c4e:	f005 fc39 	bl	800a4c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004c52:	f7fc fb99 	bl	8001388 <main>

08004c56 <LoopForever>:

LoopForever:
    b LoopForever
 8004c56:	e7fe      	b.n	8004c56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004c58:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8004c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c60:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8004c64:	0800e92c 	.word	0x0800e92c
  ldr r2, =_sbss
 8004c68:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8004c6c:	20000bb4 	.word	0x20000bb4

08004c70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004c70:	e7fe      	b.n	8004c70 <ADC1_IRQHandler>

08004c72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b082      	sub	sp, #8
 8004c76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c7c:	2003      	movs	r0, #3
 8004c7e:	f000 f961 	bl	8004f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c82:	2000      	movs	r0, #0
 8004c84:	f000 f80e 	bl	8004ca4 <HAL_InitTick>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	71fb      	strb	r3, [r7, #7]
 8004c92:	e001      	b.n	8004c98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004c94:	f7ff fc4e 	bl	8004534 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004c98:	79fb      	ldrb	r3, [r7, #7]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004cb0:	4b17      	ldr	r3, [pc, #92]	; (8004d10 <HAL_InitTick+0x6c>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d023      	beq.n	8004d00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004cb8:	4b16      	ldr	r3, [pc, #88]	; (8004d14 <HAL_InitTick+0x70>)
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	4b14      	ldr	r3, [pc, #80]	; (8004d10 <HAL_InitTick+0x6c>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 f96d 	bl	8004fae <HAL_SYSTICK_Config>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10f      	bne.n	8004cfa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b0f      	cmp	r3, #15
 8004cde:	d809      	bhi.n	8004cf4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce8:	f000 f937 	bl	8004f5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004cec:	4a0a      	ldr	r2, [pc, #40]	; (8004d18 <HAL_InitTick+0x74>)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	e007      	b.n	8004d04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	73fb      	strb	r3, [r7, #15]
 8004cf8:	e004      	b.n	8004d04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	73fb      	strb	r3, [r7, #15]
 8004cfe:	e001      	b.n	8004d04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	20000050 	.word	0x20000050
 8004d14:	20000048 	.word	0x20000048
 8004d18:	2000004c 	.word	0x2000004c

08004d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004d20:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <HAL_IncTick+0x20>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <HAL_IncTick+0x24>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	4a04      	ldr	r2, [pc, #16]	; (8004d40 <HAL_IncTick+0x24>)
 8004d2e:	6013      	str	r3, [r2, #0]
}
 8004d30:	bf00      	nop
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	20000050 	.word	0x20000050
 8004d40:	20000ba0 	.word	0x20000ba0

08004d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  return uwTick;
 8004d48:	4b03      	ldr	r3, [pc, #12]	; (8004d58 <HAL_GetTick+0x14>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	20000ba0 	.word	0x20000ba0

08004d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d64:	f7ff ffee 	bl	8004d44 <HAL_GetTick>
 8004d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d005      	beq.n	8004d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004d76:	4b0a      	ldr	r3, [pc, #40]	; (8004da0 <HAL_Delay+0x44>)
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4413      	add	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d82:	bf00      	nop
 8004d84:	f7ff ffde 	bl	8004d44 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d8f7      	bhi.n	8004d84 <HAL_Delay+0x28>
  {
  }
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20000050 	.word	0x20000050

08004da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004db4:	4b0c      	ldr	r3, [pc, #48]	; (8004de8 <__NVIC_SetPriorityGrouping+0x44>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dd6:	4a04      	ldr	r2, [pc, #16]	; (8004de8 <__NVIC_SetPriorityGrouping+0x44>)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	60d3      	str	r3, [r2, #12]
}
 8004ddc:	bf00      	nop
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	e000ed00 	.word	0xe000ed00

08004dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004df0:	4b04      	ldr	r3, [pc, #16]	; (8004e04 <__NVIC_GetPriorityGrouping+0x18>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	0a1b      	lsrs	r3, r3, #8
 8004df6:	f003 0307 	and.w	r3, r3, #7
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	e000ed00 	.word	0xe000ed00

08004e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	4603      	mov	r3, r0
 8004e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	db0b      	blt.n	8004e32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e1a:	79fb      	ldrb	r3, [r7, #7]
 8004e1c:	f003 021f 	and.w	r2, r3, #31
 8004e20:	4907      	ldr	r1, [pc, #28]	; (8004e40 <__NVIC_EnableIRQ+0x38>)
 8004e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	2001      	movs	r0, #1
 8004e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	e000e100 	.word	0xe000e100

08004e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	6039      	str	r1, [r7, #0]
 8004e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	db0a      	blt.n	8004e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	490c      	ldr	r1, [pc, #48]	; (8004e90 <__NVIC_SetPriority+0x4c>)
 8004e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e62:	0112      	lsls	r2, r2, #4
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	440b      	add	r3, r1
 8004e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e6c:	e00a      	b.n	8004e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	4908      	ldr	r1, [pc, #32]	; (8004e94 <__NVIC_SetPriority+0x50>)
 8004e74:	79fb      	ldrb	r3, [r7, #7]
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	3b04      	subs	r3, #4
 8004e7c:	0112      	lsls	r2, r2, #4
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	440b      	add	r3, r1
 8004e82:	761a      	strb	r2, [r3, #24]
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	e000e100 	.word	0xe000e100
 8004e94:	e000ed00 	.word	0xe000ed00

08004e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b089      	sub	sp, #36	; 0x24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f1c3 0307 	rsb	r3, r3, #7
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	bf28      	it	cs
 8004eb6:	2304      	movcs	r3, #4
 8004eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	2b06      	cmp	r3, #6
 8004ec0:	d902      	bls.n	8004ec8 <NVIC_EncodePriority+0x30>
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	3b03      	subs	r3, #3
 8004ec6:	e000      	b.n	8004eca <NVIC_EncodePriority+0x32>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	43da      	mvns	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	401a      	ands	r2, r3
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eea:	43d9      	mvns	r1, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ef0:	4313      	orrs	r3, r2
         );
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3724      	adds	r7, #36	; 0x24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
	...

08004f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f10:	d301      	bcc.n	8004f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f12:	2301      	movs	r3, #1
 8004f14:	e00f      	b.n	8004f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f16:	4a0a      	ldr	r2, [pc, #40]	; (8004f40 <SysTick_Config+0x40>)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f1e:	210f      	movs	r1, #15
 8004f20:	f04f 30ff 	mov.w	r0, #4294967295
 8004f24:	f7ff ff8e 	bl	8004e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f28:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <SysTick_Config+0x40>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f2e:	4b04      	ldr	r3, [pc, #16]	; (8004f40 <SysTick_Config+0x40>)
 8004f30:	2207      	movs	r2, #7
 8004f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	e000e010 	.word	0xe000e010

08004f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff ff29 	bl	8004da4 <__NVIC_SetPriorityGrouping>
}
 8004f52:	bf00      	nop
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b086      	sub	sp, #24
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	4603      	mov	r3, r0
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	607a      	str	r2, [r7, #4]
 8004f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f6c:	f7ff ff3e 	bl	8004dec <__NVIC_GetPriorityGrouping>
 8004f70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	68b9      	ldr	r1, [r7, #8]
 8004f76:	6978      	ldr	r0, [r7, #20]
 8004f78:	f7ff ff8e 	bl	8004e98 <NVIC_EncodePriority>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f82:	4611      	mov	r1, r2
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7ff ff5d 	bl	8004e44 <__NVIC_SetPriority>
}
 8004f8a:	bf00      	nop
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	4603      	mov	r3, r0
 8004f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff ff31 	bl	8004e08 <__NVIC_EnableIRQ>
}
 8004fa6:	bf00      	nop
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7ff ffa2 	bl	8004f00 <SysTick_Config>
 8004fbc:	4603      	mov	r3, r0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e08d      	b.n	80050f6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	4b47      	ldr	r3, [pc, #284]	; (8005100 <HAL_DMA_Init+0x138>)
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d80f      	bhi.n	8005006 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	4b45      	ldr	r3, [pc, #276]	; (8005104 <HAL_DMA_Init+0x13c>)
 8004fee:	4413      	add	r3, r2
 8004ff0:	4a45      	ldr	r2, [pc, #276]	; (8005108 <HAL_DMA_Init+0x140>)
 8004ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff6:	091b      	lsrs	r3, r3, #4
 8004ff8:	009a      	lsls	r2, r3, #2
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a42      	ldr	r2, [pc, #264]	; (800510c <HAL_DMA_Init+0x144>)
 8005002:	641a      	str	r2, [r3, #64]	; 0x40
 8005004:	e00e      	b.n	8005024 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	4b40      	ldr	r3, [pc, #256]	; (8005110 <HAL_DMA_Init+0x148>)
 800500e:	4413      	add	r3, r2
 8005010:	4a3d      	ldr	r2, [pc, #244]	; (8005108 <HAL_DMA_Init+0x140>)
 8005012:	fba2 2303 	umull	r2, r3, r2, r3
 8005016:	091b      	lsrs	r3, r3, #4
 8005018:	009a      	lsls	r2, r3, #2
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a3c      	ldr	r2, [pc, #240]	; (8005114 <HAL_DMA_Init+0x14c>)
 8005022:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800503a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005048:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005054:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005060:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f9b6 	bl	80053e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005084:	d102      	bne.n	800508c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80050a0:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d010      	beq.n	80050cc <HAL_DMA_Init+0x104>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d80c      	bhi.n	80050cc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f9d6 	bl	8005464 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80050c8:	605a      	str	r2, [r3, #4]
 80050ca:	e008      	b.n	80050de <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	40020407 	.word	0x40020407
 8005104:	bffdfff8 	.word	0xbffdfff8
 8005108:	cccccccd 	.word	0xcccccccd
 800510c:	40020000 	.word	0x40020000
 8005110:	bffdfbf8 	.word	0xbffdfbf8
 8005114:	40020400 	.word	0x40020400

08005118 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_DMA_Start_IT+0x20>
 8005134:	2302      	movs	r3, #2
 8005136:	e066      	b.n	8005206 <HAL_DMA_Start_IT+0xee>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b01      	cmp	r3, #1
 800514a:	d155      	bne.n	80051f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0201 	bic.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	68b9      	ldr	r1, [r7, #8]
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 f8fb 	bl	800536c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	2b00      	cmp	r3, #0
 800517c:	d008      	beq.n	8005190 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f042 020e 	orr.w	r2, r2, #14
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	e00f      	b.n	80051b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0204 	bic.w	r2, r2, #4
 800519e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 020a 	orr.w	r2, r2, #10
 80051ae:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d007      	beq.n	80051ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051cc:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d007      	beq.n	80051e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051e4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0201 	orr.w	r2, r2, #1
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	e005      	b.n	8005204 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005200:	2302      	movs	r3, #2
 8005202:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005204:	7dfb      	ldrb	r3, [r7, #23]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522a:	f003 031c 	and.w	r3, r3, #28
 800522e:	2204      	movs	r2, #4
 8005230:	409a      	lsls	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4013      	ands	r3, r2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d026      	beq.n	8005288 <HAL_DMA_IRQHandler+0x7a>
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b00      	cmp	r3, #0
 8005242:	d021      	beq.n	8005288 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0320 	and.w	r3, r3, #32
 800524e:	2b00      	cmp	r3, #0
 8005250:	d107      	bne.n	8005262 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0204 	bic.w	r2, r2, #4
 8005260:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005266:	f003 021c 	and.w	r2, r3, #28
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	2104      	movs	r1, #4
 8005270:	fa01 f202 	lsl.w	r2, r1, r2
 8005274:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	2b00      	cmp	r3, #0
 800527c:	d071      	beq.n	8005362 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005286:	e06c      	b.n	8005362 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528c:	f003 031c 	and.w	r3, r3, #28
 8005290:	2202      	movs	r2, #2
 8005292:	409a      	lsls	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4013      	ands	r3, r2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d02e      	beq.n	80052fa <HAL_DMA_IRQHandler+0xec>
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d029      	beq.n	80052fa <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0320 	and.w	r3, r3, #32
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10b      	bne.n	80052cc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 020a 	bic.w	r2, r2, #10
 80052c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d0:	f003 021c 	and.w	r2, r3, #28
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d8:	2102      	movs	r1, #2
 80052da:	fa01 f202 	lsl.w	r2, r1, r2
 80052de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d038      	beq.n	8005362 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80052f8:	e033      	b.n	8005362 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fe:	f003 031c 	and.w	r3, r3, #28
 8005302:	2208      	movs	r2, #8
 8005304:	409a      	lsls	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4013      	ands	r3, r2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d02a      	beq.n	8005364 <HAL_DMA_IRQHandler+0x156>
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f003 0308 	and.w	r3, r3, #8
 8005314:	2b00      	cmp	r3, #0
 8005316:	d025      	beq.n	8005364 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 020e 	bic.w	r2, r2, #14
 8005326:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532c:	f003 021c 	and.w	r2, r3, #28
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	2101      	movs	r1, #1
 8005336:	fa01 f202 	lsl.w	r2, r1, r2
 800533a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005356:	2b00      	cmp	r3, #0
 8005358:	d004      	beq.n	8005364 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005362:	bf00      	nop
 8005364:	bf00      	nop
}
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005382:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005388:	2b00      	cmp	r3, #0
 800538a:	d004      	beq.n	8005396 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005394:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539a:	f003 021c 	and.w	r2, r3, #28
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	2101      	movs	r1, #1
 80053a4:	fa01 f202 	lsl.w	r2, r1, r2
 80053a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2b10      	cmp	r3, #16
 80053b8:	d108      	bne.n	80053cc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80053ca:	e007      	b.n	80053dc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	60da      	str	r2, [r3, #12]
}
 80053dc:	bf00      	nop
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	461a      	mov	r2, r3
 80053f6:	4b17      	ldr	r3, [pc, #92]	; (8005454 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d80a      	bhi.n	8005412 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005400:	089b      	lsrs	r3, r3, #2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005408:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6493      	str	r3, [r2, #72]	; 0x48
 8005410:	e007      	b.n	8005422 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005416:	089b      	lsrs	r3, r3, #2
 8005418:	009a      	lsls	r2, r3, #2
 800541a:	4b0f      	ldr	r3, [pc, #60]	; (8005458 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800541c:	4413      	add	r3, r2
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	b2db      	uxtb	r3, r3
 8005428:	3b08      	subs	r3, #8
 800542a:	4a0c      	ldr	r2, [pc, #48]	; (800545c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800542c:	fba2 2303 	umull	r2, r3, r2, r3
 8005430:	091b      	lsrs	r3, r3, #4
 8005432:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a0a      	ldr	r2, [pc, #40]	; (8005460 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005438:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f003 031f 	and.w	r3, r3, #31
 8005440:	2201      	movs	r2, #1
 8005442:	409a      	lsls	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005448:	bf00      	nop
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	40020407 	.word	0x40020407
 8005458:	4002081c 	.word	0x4002081c
 800545c:	cccccccd 	.word	0xcccccccd
 8005460:	40020880 	.word	0x40020880

08005464 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	b2db      	uxtb	r3, r3
 8005472:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005478:	4413      	add	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	461a      	mov	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a08      	ldr	r2, [pc, #32]	; (80054a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005486:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	3b01      	subs	r3, #1
 800548c:	f003 0303 	and.w	r3, r3, #3
 8005490:	2201      	movs	r2, #1
 8005492:	409a      	lsls	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005498:	bf00      	nop
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	1000823f 	.word	0x1000823f
 80054a8:	40020940 	.word	0x40020940

080054ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054ba:	e166      	b.n	800578a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	2101      	movs	r1, #1
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	fa01 f303 	lsl.w	r3, r1, r3
 80054c8:	4013      	ands	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 8158 	beq.w	8005784 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f003 0303 	and.w	r3, r3, #3
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d005      	beq.n	80054ec <HAL_GPIO_Init+0x40>
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f003 0303 	and.w	r3, r3, #3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d130      	bne.n	800554e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	2203      	movs	r2, #3
 80054f8:	fa02 f303 	lsl.w	r3, r2, r3
 80054fc:	43db      	mvns	r3, r3
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	4013      	ands	r3, r2
 8005502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	fa02 f303 	lsl.w	r3, r2, r3
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	4313      	orrs	r3, r2
 8005514:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005522:	2201      	movs	r2, #1
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	43db      	mvns	r3, r3
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4013      	ands	r3, r2
 8005530:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	091b      	lsrs	r3, r3, #4
 8005538:	f003 0201 	and.w	r2, r3, #1
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	fa02 f303 	lsl.w	r3, r2, r3
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	4313      	orrs	r3, r2
 8005546:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	2b03      	cmp	r3, #3
 8005558:	d017      	beq.n	800558a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	2203      	movs	r2, #3
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	43db      	mvns	r3, r3
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4013      	ands	r3, r2
 8005570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	fa02 f303 	lsl.w	r3, r2, r3
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4313      	orrs	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d123      	bne.n	80055de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	08da      	lsrs	r2, r3, #3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3208      	adds	r2, #8
 800559e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	220f      	movs	r2, #15
 80055ae:	fa02 f303 	lsl.w	r3, r2, r3
 80055b2:	43db      	mvns	r3, r3
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4013      	ands	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	691a      	ldr	r2, [r3, #16]
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	08da      	lsrs	r2, r3, #3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	3208      	adds	r2, #8
 80055d8:	6939      	ldr	r1, [r7, #16]
 80055da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	2203      	movs	r2, #3
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	43db      	mvns	r3, r3
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4013      	ands	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f003 0203 	and.w	r2, r3, #3
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	fa02 f303 	lsl.w	r3, r2, r3
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4313      	orrs	r3, r2
 800560a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800561a:	2b00      	cmp	r3, #0
 800561c:	f000 80b2 	beq.w	8005784 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005620:	4b61      	ldr	r3, [pc, #388]	; (80057a8 <HAL_GPIO_Init+0x2fc>)
 8005622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005624:	4a60      	ldr	r2, [pc, #384]	; (80057a8 <HAL_GPIO_Init+0x2fc>)
 8005626:	f043 0301 	orr.w	r3, r3, #1
 800562a:	6613      	str	r3, [r2, #96]	; 0x60
 800562c:	4b5e      	ldr	r3, [pc, #376]	; (80057a8 <HAL_GPIO_Init+0x2fc>)
 800562e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	60bb      	str	r3, [r7, #8]
 8005636:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005638:	4a5c      	ldr	r2, [pc, #368]	; (80057ac <HAL_GPIO_Init+0x300>)
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	089b      	lsrs	r3, r3, #2
 800563e:	3302      	adds	r3, #2
 8005640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005644:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f003 0303 	and.w	r3, r3, #3
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	220f      	movs	r2, #15
 8005650:	fa02 f303 	lsl.w	r3, r2, r3
 8005654:	43db      	mvns	r3, r3
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	4013      	ands	r3, r2
 800565a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005662:	d02b      	beq.n	80056bc <HAL_GPIO_Init+0x210>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a52      	ldr	r2, [pc, #328]	; (80057b0 <HAL_GPIO_Init+0x304>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d025      	beq.n	80056b8 <HAL_GPIO_Init+0x20c>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a51      	ldr	r2, [pc, #324]	; (80057b4 <HAL_GPIO_Init+0x308>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d01f      	beq.n	80056b4 <HAL_GPIO_Init+0x208>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a50      	ldr	r2, [pc, #320]	; (80057b8 <HAL_GPIO_Init+0x30c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d019      	beq.n	80056b0 <HAL_GPIO_Init+0x204>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a4f      	ldr	r2, [pc, #316]	; (80057bc <HAL_GPIO_Init+0x310>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d013      	beq.n	80056ac <HAL_GPIO_Init+0x200>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a4e      	ldr	r2, [pc, #312]	; (80057c0 <HAL_GPIO_Init+0x314>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d00d      	beq.n	80056a8 <HAL_GPIO_Init+0x1fc>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a4d      	ldr	r2, [pc, #308]	; (80057c4 <HAL_GPIO_Init+0x318>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d007      	beq.n	80056a4 <HAL_GPIO_Init+0x1f8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a4c      	ldr	r2, [pc, #304]	; (80057c8 <HAL_GPIO_Init+0x31c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d101      	bne.n	80056a0 <HAL_GPIO_Init+0x1f4>
 800569c:	2307      	movs	r3, #7
 800569e:	e00e      	b.n	80056be <HAL_GPIO_Init+0x212>
 80056a0:	2308      	movs	r3, #8
 80056a2:	e00c      	b.n	80056be <HAL_GPIO_Init+0x212>
 80056a4:	2306      	movs	r3, #6
 80056a6:	e00a      	b.n	80056be <HAL_GPIO_Init+0x212>
 80056a8:	2305      	movs	r3, #5
 80056aa:	e008      	b.n	80056be <HAL_GPIO_Init+0x212>
 80056ac:	2304      	movs	r3, #4
 80056ae:	e006      	b.n	80056be <HAL_GPIO_Init+0x212>
 80056b0:	2303      	movs	r3, #3
 80056b2:	e004      	b.n	80056be <HAL_GPIO_Init+0x212>
 80056b4:	2302      	movs	r3, #2
 80056b6:	e002      	b.n	80056be <HAL_GPIO_Init+0x212>
 80056b8:	2301      	movs	r3, #1
 80056ba:	e000      	b.n	80056be <HAL_GPIO_Init+0x212>
 80056bc:	2300      	movs	r3, #0
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	f002 0203 	and.w	r2, r2, #3
 80056c4:	0092      	lsls	r2, r2, #2
 80056c6:	4093      	lsls	r3, r2
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80056ce:	4937      	ldr	r1, [pc, #220]	; (80057ac <HAL_GPIO_Init+0x300>)
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	089b      	lsrs	r3, r3, #2
 80056d4:	3302      	adds	r3, #2
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056dc:	4b3b      	ldr	r3, [pc, #236]	; (80057cc <HAL_GPIO_Init+0x320>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	43db      	mvns	r3, r3
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4013      	ands	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005700:	4a32      	ldr	r2, [pc, #200]	; (80057cc <HAL_GPIO_Init+0x320>)
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005706:	4b31      	ldr	r3, [pc, #196]	; (80057cc <HAL_GPIO_Init+0x320>)
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	43db      	mvns	r3, r3
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4013      	ands	r3, r2
 8005714:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4313      	orrs	r3, r2
 8005728:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800572a:	4a28      	ldr	r2, [pc, #160]	; (80057cc <HAL_GPIO_Init+0x320>)
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005730:	4b26      	ldr	r3, [pc, #152]	; (80057cc <HAL_GPIO_Init+0x320>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	43db      	mvns	r3, r3
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	4013      	ands	r3, r2
 800573e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005754:	4a1d      	ldr	r2, [pc, #116]	; (80057cc <HAL_GPIO_Init+0x320>)
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800575a:	4b1c      	ldr	r3, [pc, #112]	; (80057cc <HAL_GPIO_Init+0x320>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	43db      	mvns	r3, r3
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	4013      	ands	r3, r2
 8005768:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4313      	orrs	r3, r2
 800577c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800577e:	4a13      	ldr	r2, [pc, #76]	; (80057cc <HAL_GPIO_Init+0x320>)
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	3301      	adds	r3, #1
 8005788:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	fa22 f303 	lsr.w	r3, r2, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	f47f ae91 	bne.w	80054bc <HAL_GPIO_Init+0x10>
  }
}
 800579a:	bf00      	nop
 800579c:	bf00      	nop
 800579e:	371c      	adds	r7, #28
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	40021000 	.word	0x40021000
 80057ac:	40010000 	.word	0x40010000
 80057b0:	48000400 	.word	0x48000400
 80057b4:	48000800 	.word	0x48000800
 80057b8:	48000c00 	.word	0x48000c00
 80057bc:	48001000 	.word	0x48001000
 80057c0:	48001400 	.word	0x48001400
 80057c4:	48001800 	.word	0x48001800
 80057c8:	48001c00 	.word	0x48001c00
 80057cc:	40010400 	.word	0x40010400

080057d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	460b      	mov	r3, r1
 80057da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	691a      	ldr	r2, [r3, #16]
 80057e0:	887b      	ldrh	r3, [r7, #2]
 80057e2:	4013      	ands	r3, r2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057e8:	2301      	movs	r3, #1
 80057ea:	73fb      	strb	r3, [r7, #15]
 80057ec:	e001      	b.n	80057f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057ee:	2300      	movs	r3, #0
 80057f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	807b      	strh	r3, [r7, #2]
 800580c:	4613      	mov	r3, r2
 800580e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005810:	787b      	ldrb	r3, [r7, #1]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005816:	887a      	ldrh	r2, [r7, #2]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800581c:	e002      	b.n	8005824 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800581e:	887a      	ldrh	r2, [r7, #2]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	4603      	mov	r3, r0
 8005838:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800583a:	4b08      	ldr	r3, [pc, #32]	; (800585c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800583c:	695a      	ldr	r2, [r3, #20]
 800583e:	88fb      	ldrh	r3, [r7, #6]
 8005840:	4013      	ands	r3, r2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d006      	beq.n	8005854 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005846:	4a05      	ldr	r2, [pc, #20]	; (800585c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005848:	88fb      	ldrh	r3, [r7, #6]
 800584a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800584c:	88fb      	ldrh	r3, [r7, #6]
 800584e:	4618      	mov	r0, r3
 8005850:	f7fe fa8e 	bl	8003d70 <HAL_GPIO_EXTI_Callback>
  }
}
 8005854:	bf00      	nop
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	40010400 	.word	0x40010400

08005860 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e081      	b.n	8005976 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fe fe78 	bl	800457c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2224      	movs	r2, #36	; 0x24
 8005890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0201 	bic.w	r2, r2, #1
 80058a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d107      	bne.n	80058da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058d6:	609a      	str	r2, [r3, #8]
 80058d8:	e006      	b.n	80058e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689a      	ldr	r2, [r3, #8]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80058e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d104      	bne.n	80058fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	6812      	ldr	r2, [r2, #0]
 8005904:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800590c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800591c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691a      	ldr	r2, [r3, #16]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	69d9      	ldr	r1, [r3, #28]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1a      	ldr	r2, [r3, #32]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0201 	orr.w	r2, r2, #1
 8005956:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2220      	movs	r2, #32
 8005962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
	...

08005980 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af02      	add	r7, sp, #8
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	607a      	str	r2, [r7, #4]
 800598a:	461a      	mov	r2, r3
 800598c:	460b      	mov	r3, r1
 800598e:	817b      	strh	r3, [r7, #10]
 8005990:	4613      	mov	r3, r2
 8005992:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b20      	cmp	r3, #32
 800599e:	f040 80da 	bne.w	8005b56 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d101      	bne.n	80059b0 <HAL_I2C_Master_Transmit+0x30>
 80059ac:	2302      	movs	r3, #2
 80059ae:	e0d3      	b.n	8005b58 <HAL_I2C_Master_Transmit+0x1d8>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059b8:	f7ff f9c4 	bl	8004d44 <HAL_GetTick>
 80059bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	2319      	movs	r3, #25
 80059c4:	2201      	movs	r2, #1
 80059c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 fb4e 	bl	800606c <I2C_WaitOnFlagUntilTimeout>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e0be      	b.n	8005b58 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2221      	movs	r2, #33	; 0x21
 80059de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2210      	movs	r2, #16
 80059e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	893a      	ldrh	r2, [r7, #8]
 80059fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	2bff      	cmp	r3, #255	; 0xff
 8005a0a:	d90e      	bls.n	8005a2a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	22ff      	movs	r2, #255	; 0xff
 8005a10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a16:	b2da      	uxtb	r2, r3
 8005a18:	8979      	ldrh	r1, [r7, #10]
 8005a1a:	4b51      	ldr	r3, [pc, #324]	; (8005b60 <HAL_I2C_Master_Transmit+0x1e0>)
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 fd44 	bl	80064b0 <I2C_TransferConfig>
 8005a28:	e06c      	b.n	8005b04 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	8979      	ldrh	r1, [r7, #10]
 8005a3c:	4b48      	ldr	r3, [pc, #288]	; (8005b60 <HAL_I2C_Master_Transmit+0x1e0>)
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 fd33 	bl	80064b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005a4a:	e05b      	b.n	8005b04 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	6a39      	ldr	r1, [r7, #32]
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 fb4b 	bl	80060ec <I2C_WaitOnTXISFlagUntilTimeout>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e07b      	b.n	8005b58 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	781a      	ldrb	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d034      	beq.n	8005b04 <HAL_I2C_Master_Transmit+0x184>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d130      	bne.n	8005b04 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	2180      	movs	r1, #128	; 0x80
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 fadd 	bl	800606c <I2C_WaitOnFlagUntilTimeout>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e04d      	b.n	8005b58 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	2bff      	cmp	r3, #255	; 0xff
 8005ac4:	d90e      	bls.n	8005ae4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	22ff      	movs	r2, #255	; 0xff
 8005aca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	8979      	ldrh	r1, [r7, #10]
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 fce7 	bl	80064b0 <I2C_TransferConfig>
 8005ae2:	e00f      	b.n	8005b04 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	8979      	ldrh	r1, [r7, #10]
 8005af6:	2300      	movs	r3, #0
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 fcd6 	bl	80064b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d19e      	bne.n	8005a4c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	6a39      	ldr	r1, [r7, #32]
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 fb2a 	bl	800616c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e01a      	b.n	8005b58 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2220      	movs	r2, #32
 8005b28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6859      	ldr	r1, [r3, #4]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	4b0b      	ldr	r3, [pc, #44]	; (8005b64 <HAL_I2C_Master_Transmit+0x1e4>)
 8005b36:	400b      	ands	r3, r1
 8005b38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	e000      	b.n	8005b58 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005b56:	2302      	movs	r3, #2
  }
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3718      	adds	r7, #24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	80002000 	.word	0x80002000
 8005b64:	fe00e800 	.word	0xfe00e800

08005b68 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b088      	sub	sp, #32
 8005b6c:	af02      	add	r7, sp, #8
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	607a      	str	r2, [r7, #4]
 8005b72:	461a      	mov	r2, r3
 8005b74:	460b      	mov	r3, r1
 8005b76:	817b      	strh	r3, [r7, #10]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b20      	cmp	r3, #32
 8005b86:	f040 80db 	bne.w	8005d40 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d101      	bne.n	8005b98 <HAL_I2C_Master_Receive+0x30>
 8005b94:	2302      	movs	r3, #2
 8005b96:	e0d4      	b.n	8005d42 <HAL_I2C_Master_Receive+0x1da>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ba0:	f7ff f8d0 	bl	8004d44 <HAL_GetTick>
 8005ba4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	2319      	movs	r3, #25
 8005bac:	2201      	movs	r2, #1
 8005bae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 fa5a 	bl	800606c <I2C_WaitOnFlagUntilTimeout>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e0bf      	b.n	8005d42 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2222      	movs	r2, #34	; 0x22
 8005bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2210      	movs	r2, #16
 8005bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	893a      	ldrh	r2, [r7, #8]
 8005be2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	2bff      	cmp	r3, #255	; 0xff
 8005bf2:	d90e      	bls.n	8005c12 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	22ff      	movs	r2, #255	; 0xff
 8005bf8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	8979      	ldrh	r1, [r7, #10]
 8005c02:	4b52      	ldr	r3, [pc, #328]	; (8005d4c <HAL_I2C_Master_Receive+0x1e4>)
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 fc50 	bl	80064b0 <I2C_TransferConfig>
 8005c10:	e06d      	b.n	8005cee <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	8979      	ldrh	r1, [r7, #10]
 8005c24:	4b49      	ldr	r3, [pc, #292]	; (8005d4c <HAL_I2C_Master_Receive+0x1e4>)
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 fc3f 	bl	80064b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005c32:	e05c      	b.n	8005cee <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	6a39      	ldr	r1, [r7, #32]
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 fad3 	bl	80061e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e07c      	b.n	8005d42 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	b2d2      	uxtb	r2, r2
 8005c54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	3b01      	subs	r3, #1
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d034      	beq.n	8005cee <HAL_I2C_Master_Receive+0x186>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d130      	bne.n	8005cee <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	2200      	movs	r2, #0
 8005c94:	2180      	movs	r1, #128	; 0x80
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f000 f9e8 	bl	800606c <I2C_WaitOnFlagUntilTimeout>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e04d      	b.n	8005d42 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	2bff      	cmp	r3, #255	; 0xff
 8005cae:	d90e      	bls.n	8005cce <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	22ff      	movs	r2, #255	; 0xff
 8005cb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	8979      	ldrh	r1, [r7, #10]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 fbf2 	bl	80064b0 <I2C_TransferConfig>
 8005ccc:	e00f      	b.n	8005cee <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	8979      	ldrh	r1, [r7, #10]
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 fbe1 	bl	80064b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d19d      	bne.n	8005c34 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	6a39      	ldr	r1, [r7, #32]
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 fa35 	bl	800616c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e01a      	b.n	8005d42 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2220      	movs	r2, #32
 8005d12:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6859      	ldr	r1, [r3, #4]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	4b0c      	ldr	r3, [pc, #48]	; (8005d50 <HAL_I2C_Master_Receive+0x1e8>)
 8005d20:	400b      	ands	r3, r1
 8005d22:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2220      	movs	r2, #32
 8005d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	e000      	b.n	8005d42 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005d40:	2302      	movs	r3, #2
  }
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	80002400 	.word	0x80002400
 8005d50:	fe00e800 	.word	0xfe00e800

08005d54 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b088      	sub	sp, #32
 8005d58:	af02      	add	r7, sp, #8
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	4608      	mov	r0, r1
 8005d5e:	4611      	mov	r1, r2
 8005d60:	461a      	mov	r2, r3
 8005d62:	4603      	mov	r3, r0
 8005d64:	817b      	strh	r3, [r7, #10]
 8005d66:	460b      	mov	r3, r1
 8005d68:	813b      	strh	r3, [r7, #8]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b20      	cmp	r3, #32
 8005d78:	f040 80f9 	bne.w	8005f6e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d002      	beq.n	8005d88 <HAL_I2C_Mem_Write+0x34>
 8005d82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d105      	bne.n	8005d94 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d8e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e0ed      	b.n	8005f70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d101      	bne.n	8005da2 <HAL_I2C_Mem_Write+0x4e>
 8005d9e:	2302      	movs	r3, #2
 8005da0:	e0e6      	b.n	8005f70 <HAL_I2C_Mem_Write+0x21c>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005daa:	f7fe ffcb 	bl	8004d44 <HAL_GetTick>
 8005dae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	2319      	movs	r3, #25
 8005db6:	2201      	movs	r2, #1
 8005db8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 f955 	bl	800606c <I2C_WaitOnFlagUntilTimeout>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e0d1      	b.n	8005f70 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2221      	movs	r2, #33	; 0x21
 8005dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2240      	movs	r2, #64	; 0x40
 8005dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6a3a      	ldr	r2, [r7, #32]
 8005de6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005dec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005df4:	88f8      	ldrh	r0, [r7, #6]
 8005df6:	893a      	ldrh	r2, [r7, #8]
 8005df8:	8979      	ldrh	r1, [r7, #10]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	9301      	str	r3, [sp, #4]
 8005dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	4603      	mov	r3, r0
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f000 f8b9 	bl	8005f7c <I2C_RequestMemoryWrite>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d005      	beq.n	8005e1c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e0a9      	b.n	8005f70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2bff      	cmp	r3, #255	; 0xff
 8005e24:	d90e      	bls.n	8005e44 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	22ff      	movs	r2, #255	; 0xff
 8005e2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	8979      	ldrh	r1, [r7, #10]
 8005e34:	2300      	movs	r3, #0
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 fb37 	bl	80064b0 <I2C_TransferConfig>
 8005e42:	e00f      	b.n	8005e64 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	8979      	ldrh	r1, [r7, #10]
 8005e56:	2300      	movs	r3, #0
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 fb26 	bl	80064b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 f93f 	bl	80060ec <I2C_WaitOnTXISFlagUntilTimeout>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e07b      	b.n	8005f70 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	781a      	ldrb	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d034      	beq.n	8005f1c <HAL_I2C_Mem_Write+0x1c8>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d130      	bne.n	8005f1c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2180      	movs	r1, #128	; 0x80
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 f8d1 	bl	800606c <I2C_WaitOnFlagUntilTimeout>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e04d      	b.n	8005f70 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	2bff      	cmp	r3, #255	; 0xff
 8005edc:	d90e      	bls.n	8005efc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	22ff      	movs	r2, #255	; 0xff
 8005ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	8979      	ldrh	r1, [r7, #10]
 8005eec:	2300      	movs	r3, #0
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 fadb 	bl	80064b0 <I2C_TransferConfig>
 8005efa:	e00f      	b.n	8005f1c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	8979      	ldrh	r1, [r7, #10]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f000 faca 	bl	80064b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d19e      	bne.n	8005e64 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 f91e 	bl	800616c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e01a      	b.n	8005f70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6859      	ldr	r1, [r3, #4]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <HAL_I2C_Mem_Write+0x224>)
 8005f4e:	400b      	ands	r3, r1
 8005f50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2220      	movs	r2, #32
 8005f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	e000      	b.n	8005f70 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005f6e:	2302      	movs	r3, #2
  }
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3718      	adds	r7, #24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	fe00e800 	.word	0xfe00e800

08005f7c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af02      	add	r7, sp, #8
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	4608      	mov	r0, r1
 8005f86:	4611      	mov	r1, r2
 8005f88:	461a      	mov	r2, r3
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	817b      	strh	r3, [r7, #10]
 8005f8e:	460b      	mov	r3, r1
 8005f90:	813b      	strh	r3, [r7, #8]
 8005f92:	4613      	mov	r3, r2
 8005f94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005f96:	88fb      	ldrh	r3, [r7, #6]
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	8979      	ldrh	r1, [r7, #10]
 8005f9c:	4b20      	ldr	r3, [pc, #128]	; (8006020 <I2C_RequestMemoryWrite+0xa4>)
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 fa83 	bl	80064b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005faa:	69fa      	ldr	r2, [r7, #28]
 8005fac:	69b9      	ldr	r1, [r7, #24]
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f000 f89c 	bl	80060ec <I2C_WaitOnTXISFlagUntilTimeout>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e02c      	b.n	8006018 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fbe:	88fb      	ldrh	r3, [r7, #6]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d105      	bne.n	8005fd0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fc4:	893b      	ldrh	r3, [r7, #8]
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	629a      	str	r2, [r3, #40]	; 0x28
 8005fce:	e015      	b.n	8005ffc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005fd0:	893b      	ldrh	r3, [r7, #8]
 8005fd2:	0a1b      	lsrs	r3, r3, #8
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fde:	69fa      	ldr	r2, [r7, #28]
 8005fe0:	69b9      	ldr	r1, [r7, #24]
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 f882 	bl	80060ec <I2C_WaitOnTXISFlagUntilTimeout>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e012      	b.n	8006018 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ff2:	893b      	ldrh	r3, [r7, #8]
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	2200      	movs	r2, #0
 8006004:	2180      	movs	r1, #128	; 0x80
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 f830 	bl	800606c <I2C_WaitOnFlagUntilTimeout>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e000      	b.n	8006018 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	80002000 	.word	0x80002000

08006024 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b02      	cmp	r3, #2
 8006038:	d103      	bne.n	8006042 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2200      	movs	r2, #0
 8006040:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b01      	cmp	r3, #1
 800604e:	d007      	beq.n	8006060 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	699a      	ldr	r2, [r3, #24]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0201 	orr.w	r2, r2, #1
 800605e:	619a      	str	r2, [r3, #24]
  }
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	603b      	str	r3, [r7, #0]
 8006078:	4613      	mov	r3, r2
 800607a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800607c:	e022      	b.n	80060c4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006084:	d01e      	beq.n	80060c4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006086:	f7fe fe5d 	bl	8004d44 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	429a      	cmp	r2, r3
 8006094:	d302      	bcc.n	800609c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d113      	bne.n	80060c4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a0:	f043 0220 	orr.w	r2, r3, #32
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2220      	movs	r2, #32
 80060ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e00f      	b.n	80060e4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	699a      	ldr	r2, [r3, #24]
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	4013      	ands	r3, r2
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	bf0c      	ite	eq
 80060d4:	2301      	moveq	r3, #1
 80060d6:	2300      	movne	r3, #0
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	461a      	mov	r2, r3
 80060dc:	79fb      	ldrb	r3, [r7, #7]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d0cd      	beq.n	800607e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060f8:	e02c      	b.n	8006154 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	68b9      	ldr	r1, [r7, #8]
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f000 f8ea 	bl	80062d8 <I2C_IsErrorOccurred>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e02a      	b.n	8006164 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006114:	d01e      	beq.n	8006154 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006116:	f7fe fe15 	bl	8004d44 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	429a      	cmp	r2, r3
 8006124:	d302      	bcc.n	800612c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d113      	bne.n	8006154 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006130:	f043 0220 	orr.w	r2, r3, #32
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2220      	movs	r2, #32
 800613c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e007      	b.n	8006164 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b02      	cmp	r3, #2
 8006160:	d1cb      	bne.n	80060fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006178:	e028      	b.n	80061cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	68b9      	ldr	r1, [r7, #8]
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f000 f8aa 	bl	80062d8 <I2C_IsErrorOccurred>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e026      	b.n	80061dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800618e:	f7fe fdd9 	bl	8004d44 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	429a      	cmp	r2, r3
 800619c:	d302      	bcc.n	80061a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d113      	bne.n	80061cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a8:	f043 0220 	orr.w	r2, r3, #32
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e007      	b.n	80061dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b20      	cmp	r3, #32
 80061d8:	d1cf      	bne.n	800617a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061f0:	e064      	b.n	80062bc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	68b9      	ldr	r1, [r7, #8]
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 f86e 	bl	80062d8 <I2C_IsErrorOccurred>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e062      	b.n	80062cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	f003 0320 	and.w	r3, r3, #32
 8006210:	2b20      	cmp	r3, #32
 8006212:	d138      	bne.n	8006286 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	f003 0304 	and.w	r3, r3, #4
 800621e:	2b04      	cmp	r3, #4
 8006220:	d105      	bne.n	800622e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	e04e      	b.n	80062cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	f003 0310 	and.w	r3, r3, #16
 8006238:	2b10      	cmp	r3, #16
 800623a:	d107      	bne.n	800624c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2210      	movs	r2, #16
 8006242:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2204      	movs	r2, #4
 8006248:	645a      	str	r2, [r3, #68]	; 0x44
 800624a:	e002      	b.n	8006252 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2220      	movs	r2, #32
 8006258:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6859      	ldr	r1, [r3, #4]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	4b1b      	ldr	r3, [pc, #108]	; (80062d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006266:	400b      	ands	r3, r1
 8006268:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2220      	movs	r2, #32
 800626e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e022      	b.n	80062cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006286:	f7fe fd5d 	bl	8004d44 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	429a      	cmp	r2, r3
 8006294:	d302      	bcc.n	800629c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10f      	bne.n	80062bc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a0:	f043 0220 	orr.w	r2, r3, #32
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e007      	b.n	80062cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	f003 0304 	and.w	r3, r3, #4
 80062c6:	2b04      	cmp	r3, #4
 80062c8:	d193      	bne.n	80061f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	fe00e800 	.word	0xfe00e800

080062d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08a      	sub	sp, #40	; 0x28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062e4:	2300      	movs	r3, #0
 80062e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80062f2:	2300      	movs	r3, #0
 80062f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	f003 0310 	and.w	r3, r3, #16
 8006300:	2b00      	cmp	r3, #0
 8006302:	d075      	beq.n	80063f0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2210      	movs	r2, #16
 800630a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800630c:	e056      	b.n	80063bc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006314:	d052      	beq.n	80063bc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006316:	f7fe fd15 	bl	8004d44 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	429a      	cmp	r2, r3
 8006324:	d302      	bcc.n	800632c <I2C_IsErrorOccurred+0x54>
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d147      	bne.n	80063bc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006336:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800633e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800634a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800634e:	d12e      	bne.n	80063ae <I2C_IsErrorOccurred+0xd6>
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006356:	d02a      	beq.n	80063ae <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006358:	7cfb      	ldrb	r3, [r7, #19]
 800635a:	2b20      	cmp	r3, #32
 800635c:	d027      	beq.n	80063ae <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800636c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800636e:	f7fe fce9 	bl	8004d44 <HAL_GetTick>
 8006372:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006374:	e01b      	b.n	80063ae <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006376:	f7fe fce5 	bl	8004d44 <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	2b19      	cmp	r3, #25
 8006382:	d914      	bls.n	80063ae <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006388:	f043 0220 	orr.w	r2, r3, #32
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2220      	movs	r2, #32
 8006394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	f003 0320 	and.w	r3, r3, #32
 80063b8:	2b20      	cmp	r3, #32
 80063ba:	d1dc      	bne.n	8006376 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	f003 0320 	and.w	r3, r3, #32
 80063c6:	2b20      	cmp	r3, #32
 80063c8:	d003      	beq.n	80063d2 <I2C_IsErrorOccurred+0xfa>
 80063ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d09d      	beq.n	800630e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80063d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d103      	bne.n	80063e2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2220      	movs	r2, #32
 80063e0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80063e2:	6a3b      	ldr	r3, [r7, #32]
 80063e4:	f043 0304 	orr.w	r3, r3, #4
 80063e8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00b      	beq.n	800641a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	f043 0301 	orr.w	r3, r3, #1
 8006408:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006412:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00b      	beq.n	800643c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	f043 0308 	orr.w	r3, r3, #8
 800642a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006434:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00b      	beq.n	800645e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	f043 0302 	orr.w	r3, r3, #2
 800644c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006456:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800645e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006462:	2b00      	cmp	r3, #0
 8006464:	d01c      	beq.n	80064a0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f7ff fddc 	bl	8006024 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6859      	ldr	r1, [r3, #4]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	4b0d      	ldr	r3, [pc, #52]	; (80064ac <I2C_IsErrorOccurred+0x1d4>)
 8006478:	400b      	ands	r3, r1
 800647a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	431a      	orrs	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2220      	movs	r2, #32
 800648c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80064a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3728      	adds	r7, #40	; 0x28
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	fe00e800 	.word	0xfe00e800

080064b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	607b      	str	r3, [r7, #4]
 80064ba:	460b      	mov	r3, r1
 80064bc:	817b      	strh	r3, [r7, #10]
 80064be:	4613      	mov	r3, r2
 80064c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064c2:	897b      	ldrh	r3, [r7, #10]
 80064c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80064c8:	7a7b      	ldrb	r3, [r7, #9]
 80064ca:	041b      	lsls	r3, r3, #16
 80064cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	4313      	orrs	r3, r2
 80064da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	0d5b      	lsrs	r3, r3, #21
 80064ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80064ee:	4b08      	ldr	r3, [pc, #32]	; (8006510 <I2C_TransferConfig+0x60>)
 80064f0:	430b      	orrs	r3, r1
 80064f2:	43db      	mvns	r3, r3
 80064f4:	ea02 0103 	and.w	r1, r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	430a      	orrs	r2, r1
 8006500:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006502:	bf00      	nop
 8006504:	371c      	adds	r7, #28
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	03ff63ff 	.word	0x03ff63ff

08006514 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b20      	cmp	r3, #32
 8006528:	d138      	bne.n	800659c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006530:	2b01      	cmp	r3, #1
 8006532:	d101      	bne.n	8006538 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006534:	2302      	movs	r3, #2
 8006536:	e032      	b.n	800659e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2224      	movs	r2, #36	; 0x24
 8006544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0201 	bic.w	r2, r2, #1
 8006556:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006566:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6819      	ldr	r1, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	430a      	orrs	r2, r1
 8006576:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 0201 	orr.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2220      	movs	r2, #32
 800658c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006598:	2300      	movs	r3, #0
 800659a:	e000      	b.n	800659e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800659c:	2302      	movs	r3, #2
  }
}
 800659e:	4618      	mov	r0, r3
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b085      	sub	sp, #20
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b20      	cmp	r3, #32
 80065be:	d139      	bne.n	8006634 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d101      	bne.n	80065ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80065ca:	2302      	movs	r3, #2
 80065cc:	e033      	b.n	8006636 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2224      	movs	r2, #36	; 0x24
 80065da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 0201 	bic.w	r2, r2, #1
 80065ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80065fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	021b      	lsls	r3, r3, #8
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	4313      	orrs	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f042 0201 	orr.w	r2, r2, #1
 800661e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2220      	movs	r2, #32
 8006624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006630:	2300      	movs	r3, #0
 8006632:	e000      	b.n	8006636 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006634:	2302      	movs	r3, #2
  }
}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
	...

08006644 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006644:	b480      	push	{r7}
 8006646:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006648:	4b0d      	ldr	r3, [pc, #52]	; (8006680 <HAL_PWREx_GetVoltageRange+0x3c>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006654:	d102      	bne.n	800665c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8006656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800665a:	e00b      	b.n	8006674 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800665c:	4b08      	ldr	r3, [pc, #32]	; (8006680 <HAL_PWREx_GetVoltageRange+0x3c>)
 800665e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800666a:	d102      	bne.n	8006672 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800666c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006670:	e000      	b.n	8006674 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8006672:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8006674:	4618      	mov	r0, r3
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	40007000 	.word	0x40007000

08006684 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d141      	bne.n	8006716 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006692:	4b4b      	ldr	r3, [pc, #300]	; (80067c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800669a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800669e:	d131      	bne.n	8006704 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066a0:	4b47      	ldr	r3, [pc, #284]	; (80067c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066a6:	4a46      	ldr	r2, [pc, #280]	; (80067c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80066b0:	4b43      	ldr	r3, [pc, #268]	; (80067c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80066b8:	4a41      	ldr	r2, [pc, #260]	; (80067c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80066c0:	4b40      	ldr	r3, [pc, #256]	; (80067c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2232      	movs	r2, #50	; 0x32
 80066c6:	fb02 f303 	mul.w	r3, r2, r3
 80066ca:	4a3f      	ldr	r2, [pc, #252]	; (80067c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80066cc:	fba2 2303 	umull	r2, r3, r2, r3
 80066d0:	0c9b      	lsrs	r3, r3, #18
 80066d2:	3301      	adds	r3, #1
 80066d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066d6:	e002      	b.n	80066de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3b01      	subs	r3, #1
 80066dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066de:	4b38      	ldr	r3, [pc, #224]	; (80067c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ea:	d102      	bne.n	80066f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1f2      	bne.n	80066d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066f2:	4b33      	ldr	r3, [pc, #204]	; (80067c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066fe:	d158      	bne.n	80067b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e057      	b.n	80067b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006704:	4b2e      	ldr	r3, [pc, #184]	; (80067c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800670a:	4a2d      	ldr	r2, [pc, #180]	; (80067c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800670c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006710:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006714:	e04d      	b.n	80067b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800671c:	d141      	bne.n	80067a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800671e:	4b28      	ldr	r3, [pc, #160]	; (80067c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800672a:	d131      	bne.n	8006790 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800672c:	4b24      	ldr	r3, [pc, #144]	; (80067c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800672e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006732:	4a23      	ldr	r2, [pc, #140]	; (80067c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006738:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800673c:	4b20      	ldr	r3, [pc, #128]	; (80067c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006744:	4a1e      	ldr	r2, [pc, #120]	; (80067c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800674a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800674c:	4b1d      	ldr	r3, [pc, #116]	; (80067c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2232      	movs	r2, #50	; 0x32
 8006752:	fb02 f303 	mul.w	r3, r2, r3
 8006756:	4a1c      	ldr	r2, [pc, #112]	; (80067c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006758:	fba2 2303 	umull	r2, r3, r2, r3
 800675c:	0c9b      	lsrs	r3, r3, #18
 800675e:	3301      	adds	r3, #1
 8006760:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006762:	e002      	b.n	800676a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	3b01      	subs	r3, #1
 8006768:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800676a:	4b15      	ldr	r3, [pc, #84]	; (80067c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006776:	d102      	bne.n	800677e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1f2      	bne.n	8006764 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800677e:	4b10      	ldr	r3, [pc, #64]	; (80067c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800678a:	d112      	bne.n	80067b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e011      	b.n	80067b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006790:	4b0b      	ldr	r3, [pc, #44]	; (80067c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006796:	4a0a      	ldr	r2, [pc, #40]	; (80067c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800679c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80067a0:	e007      	b.n	80067b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80067a2:	4b07      	ldr	r3, [pc, #28]	; (80067c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80067aa:	4a05      	ldr	r2, [pc, #20]	; (80067c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067b0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	40007000 	.word	0x40007000
 80067c4:	20000048 	.word	0x20000048
 80067c8:	431bde83 	.word	0x431bde83

080067cc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80067cc:	b480      	push	{r7}
 80067ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80067d0:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	4a04      	ldr	r2, [pc, #16]	; (80067e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80067d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067da:	6053      	str	r3, [r2, #4]
}
 80067dc:	bf00      	nop
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	40007000 	.word	0x40007000

080067ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d102      	bne.n	8006800 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	f000 bc08 	b.w	8007010 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006800:	4b96      	ldr	r3, [pc, #600]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f003 030c 	and.w	r3, r3, #12
 8006808:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800680a:	4b94      	ldr	r3, [pc, #592]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0310 	and.w	r3, r3, #16
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 80e4 	beq.w	80069ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d007      	beq.n	8006838 <HAL_RCC_OscConfig+0x4c>
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	2b0c      	cmp	r3, #12
 800682c:	f040 808b 	bne.w	8006946 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	2b01      	cmp	r3, #1
 8006834:	f040 8087 	bne.w	8006946 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006838:	4b88      	ldr	r3, [pc, #544]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d005      	beq.n	8006850 <HAL_RCC_OscConfig+0x64>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e3df      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a1a      	ldr	r2, [r3, #32]
 8006854:	4b81      	ldr	r3, [pc, #516]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0308 	and.w	r3, r3, #8
 800685c:	2b00      	cmp	r3, #0
 800685e:	d004      	beq.n	800686a <HAL_RCC_OscConfig+0x7e>
 8006860:	4b7e      	ldr	r3, [pc, #504]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006868:	e005      	b.n	8006876 <HAL_RCC_OscConfig+0x8a>
 800686a:	4b7c      	ldr	r3, [pc, #496]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 800686c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006870:	091b      	lsrs	r3, r3, #4
 8006872:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006876:	4293      	cmp	r3, r2
 8006878:	d223      	bcs.n	80068c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	4618      	mov	r0, r3
 8006880:	f000 fdcc 	bl	800741c <RCC_SetFlashLatencyFromMSIRange>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e3c0      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800688e:	4b73      	ldr	r3, [pc, #460]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a72      	ldr	r2, [pc, #456]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006894:	f043 0308 	orr.w	r3, r3, #8
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	4b70      	ldr	r3, [pc, #448]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	496d      	ldr	r1, [pc, #436]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80068ac:	4b6b      	ldr	r3, [pc, #428]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	69db      	ldr	r3, [r3, #28]
 80068b8:	021b      	lsls	r3, r3, #8
 80068ba:	4968      	ldr	r1, [pc, #416]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	604b      	str	r3, [r1, #4]
 80068c0:	e025      	b.n	800690e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80068c2:	4b66      	ldr	r3, [pc, #408]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a65      	ldr	r2, [pc, #404]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 80068c8:	f043 0308 	orr.w	r3, r3, #8
 80068cc:	6013      	str	r3, [r2, #0]
 80068ce:	4b63      	ldr	r3, [pc, #396]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	4960      	ldr	r1, [pc, #384]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80068e0:	4b5e      	ldr	r3, [pc, #376]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	69db      	ldr	r3, [r3, #28]
 80068ec:	021b      	lsls	r3, r3, #8
 80068ee:	495b      	ldr	r1, [pc, #364]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d109      	bne.n	800690e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 fd8c 	bl	800741c <RCC_SetFlashLatencyFromMSIRange>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e380      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800690e:	f000 fcc1 	bl	8007294 <HAL_RCC_GetSysClockFreq>
 8006912:	4602      	mov	r2, r0
 8006914:	4b51      	ldr	r3, [pc, #324]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	091b      	lsrs	r3, r3, #4
 800691a:	f003 030f 	and.w	r3, r3, #15
 800691e:	4950      	ldr	r1, [pc, #320]	; (8006a60 <HAL_RCC_OscConfig+0x274>)
 8006920:	5ccb      	ldrb	r3, [r1, r3]
 8006922:	f003 031f 	and.w	r3, r3, #31
 8006926:	fa22 f303 	lsr.w	r3, r2, r3
 800692a:	4a4e      	ldr	r2, [pc, #312]	; (8006a64 <HAL_RCC_OscConfig+0x278>)
 800692c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800692e:	4b4e      	ldr	r3, [pc, #312]	; (8006a68 <HAL_RCC_OscConfig+0x27c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4618      	mov	r0, r3
 8006934:	f7fe f9b6 	bl	8004ca4 <HAL_InitTick>
 8006938:	4603      	mov	r3, r0
 800693a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800693c:	7bfb      	ldrb	r3, [r7, #15]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d052      	beq.n	80069e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006942:	7bfb      	ldrb	r3, [r7, #15]
 8006944:	e364      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d032      	beq.n	80069b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800694e:	4b43      	ldr	r3, [pc, #268]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a42      	ldr	r2, [pc, #264]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006954:	f043 0301 	orr.w	r3, r3, #1
 8006958:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800695a:	f7fe f9f3 	bl	8004d44 <HAL_GetTick>
 800695e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006960:	e008      	b.n	8006974 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006962:	f7fe f9ef 	bl	8004d44 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	2b02      	cmp	r3, #2
 800696e:	d901      	bls.n	8006974 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e34d      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006974:	4b39      	ldr	r3, [pc, #228]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d0f0      	beq.n	8006962 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006980:	4b36      	ldr	r3, [pc, #216]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a35      	ldr	r2, [pc, #212]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006986:	f043 0308 	orr.w	r3, r3, #8
 800698a:	6013      	str	r3, [r2, #0]
 800698c:	4b33      	ldr	r3, [pc, #204]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	4930      	ldr	r1, [pc, #192]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 800699a:	4313      	orrs	r3, r2
 800699c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800699e:	4b2f      	ldr	r3, [pc, #188]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	021b      	lsls	r3, r3, #8
 80069ac:	492b      	ldr	r1, [pc, #172]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	604b      	str	r3, [r1, #4]
 80069b2:	e01a      	b.n	80069ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80069b4:	4b29      	ldr	r3, [pc, #164]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a28      	ldr	r2, [pc, #160]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 80069ba:	f023 0301 	bic.w	r3, r3, #1
 80069be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80069c0:	f7fe f9c0 	bl	8004d44 <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80069c6:	e008      	b.n	80069da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80069c8:	f7fe f9bc 	bl	8004d44 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e31a      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80069da:	4b20      	ldr	r3, [pc, #128]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1f0      	bne.n	80069c8 <HAL_RCC_OscConfig+0x1dc>
 80069e6:	e000      	b.n	80069ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80069e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d073      	beq.n	8006ade <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	d005      	beq.n	8006a08 <HAL_RCC_OscConfig+0x21c>
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	2b0c      	cmp	r3, #12
 8006a00:	d10e      	bne.n	8006a20 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	2b03      	cmp	r3, #3
 8006a06:	d10b      	bne.n	8006a20 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a08:	4b14      	ldr	r3, [pc, #80]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d063      	beq.n	8006adc <HAL_RCC_OscConfig+0x2f0>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d15f      	bne.n	8006adc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e2f7      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a28:	d106      	bne.n	8006a38 <HAL_RCC_OscConfig+0x24c>
 8006a2a:	4b0c      	ldr	r3, [pc, #48]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a0b      	ldr	r2, [pc, #44]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a34:	6013      	str	r3, [r2, #0]
 8006a36:	e025      	b.n	8006a84 <HAL_RCC_OscConfig+0x298>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a40:	d114      	bne.n	8006a6c <HAL_RCC_OscConfig+0x280>
 8006a42:	4b06      	ldr	r3, [pc, #24]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a05      	ldr	r2, [pc, #20]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	4b03      	ldr	r3, [pc, #12]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a02      	ldr	r2, [pc, #8]	; (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a58:	6013      	str	r3, [r2, #0]
 8006a5a:	e013      	b.n	8006a84 <HAL_RCC_OscConfig+0x298>
 8006a5c:	40021000 	.word	0x40021000
 8006a60:	0800e4ac 	.word	0x0800e4ac
 8006a64:	20000048 	.word	0x20000048
 8006a68:	2000004c 	.word	0x2000004c
 8006a6c:	4ba0      	ldr	r3, [pc, #640]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a9f      	ldr	r2, [pc, #636]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a76:	6013      	str	r3, [r2, #0]
 8006a78:	4b9d      	ldr	r3, [pc, #628]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a9c      	ldr	r2, [pc, #624]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d013      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a8c:	f7fe f95a 	bl	8004d44 <HAL_GetTick>
 8006a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a92:	e008      	b.n	8006aa6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a94:	f7fe f956 	bl	8004d44 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b64      	cmp	r3, #100	; 0x64
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e2b4      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006aa6:	4b92      	ldr	r3, [pc, #584]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0f0      	beq.n	8006a94 <HAL_RCC_OscConfig+0x2a8>
 8006ab2:	e014      	b.n	8006ade <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab4:	f7fe f946 	bl	8004d44 <HAL_GetTick>
 8006ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006aba:	e008      	b.n	8006ace <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006abc:	f7fe f942 	bl	8004d44 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b64      	cmp	r3, #100	; 0x64
 8006ac8:	d901      	bls.n	8006ace <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e2a0      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ace:	4b88      	ldr	r3, [pc, #544]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1f0      	bne.n	8006abc <HAL_RCC_OscConfig+0x2d0>
 8006ada:	e000      	b.n	8006ade <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d060      	beq.n	8006bac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d005      	beq.n	8006afc <HAL_RCC_OscConfig+0x310>
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	2b0c      	cmp	r3, #12
 8006af4:	d119      	bne.n	8006b2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d116      	bne.n	8006b2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006afc:	4b7c      	ldr	r3, [pc, #496]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d005      	beq.n	8006b14 <HAL_RCC_OscConfig+0x328>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e27d      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b14:	4b76      	ldr	r3, [pc, #472]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	061b      	lsls	r3, r3, #24
 8006b22:	4973      	ldr	r1, [pc, #460]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b28:	e040      	b.n	8006bac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d023      	beq.n	8006b7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b32:	4b6f      	ldr	r3, [pc, #444]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a6e      	ldr	r2, [pc, #440]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b3e:	f7fe f901 	bl	8004d44 <HAL_GetTick>
 8006b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b44:	e008      	b.n	8006b58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b46:	f7fe f8fd 	bl	8004d44 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d901      	bls.n	8006b58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e25b      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b58:	4b65      	ldr	r3, [pc, #404]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d0f0      	beq.n	8006b46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b64:	4b62      	ldr	r3, [pc, #392]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	061b      	lsls	r3, r3, #24
 8006b72:	495f      	ldr	r1, [pc, #380]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	604b      	str	r3, [r1, #4]
 8006b78:	e018      	b.n	8006bac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b7a:	4b5d      	ldr	r3, [pc, #372]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a5c      	ldr	r2, [pc, #368]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b86:	f7fe f8dd 	bl	8004d44 <HAL_GetTick>
 8006b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b8c:	e008      	b.n	8006ba0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b8e:	f7fe f8d9 	bl	8004d44 <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d901      	bls.n	8006ba0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e237      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ba0:	4b53      	ldr	r3, [pc, #332]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1f0      	bne.n	8006b8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0308 	and.w	r3, r3, #8
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d03c      	beq.n	8006c32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d01c      	beq.n	8006bfa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bc0:	4b4b      	ldr	r3, [pc, #300]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bc6:	4a4a      	ldr	r2, [pc, #296]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006bc8:	f043 0301 	orr.w	r3, r3, #1
 8006bcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bd0:	f7fe f8b8 	bl	8004d44 <HAL_GetTick>
 8006bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006bd6:	e008      	b.n	8006bea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bd8:	f7fe f8b4 	bl	8004d44 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d901      	bls.n	8006bea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e212      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006bea:	4b41      	ldr	r3, [pc, #260]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d0ef      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x3ec>
 8006bf8:	e01b      	b.n	8006c32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bfa:	4b3d      	ldr	r3, [pc, #244]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c00:	4a3b      	ldr	r2, [pc, #236]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006c02:	f023 0301 	bic.w	r3, r3, #1
 8006c06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c0a:	f7fe f89b 	bl	8004d44 <HAL_GetTick>
 8006c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c10:	e008      	b.n	8006c24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c12:	f7fe f897 	bl	8004d44 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d901      	bls.n	8006c24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e1f5      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c24:	4b32      	ldr	r3, [pc, #200]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1ef      	bne.n	8006c12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0304 	and.w	r3, r3, #4
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 80a6 	beq.w	8006d8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c40:	2300      	movs	r3, #0
 8006c42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006c44:	4b2a      	ldr	r3, [pc, #168]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10d      	bne.n	8006c6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c50:	4b27      	ldr	r3, [pc, #156]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c54:	4a26      	ldr	r2, [pc, #152]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8006c5c:	4b24      	ldr	r3, [pc, #144]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c64:	60bb      	str	r3, [r7, #8]
 8006c66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c6c:	4b21      	ldr	r3, [pc, #132]	; (8006cf4 <HAL_RCC_OscConfig+0x508>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d118      	bne.n	8006caa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c78:	4b1e      	ldr	r3, [pc, #120]	; (8006cf4 <HAL_RCC_OscConfig+0x508>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a1d      	ldr	r2, [pc, #116]	; (8006cf4 <HAL_RCC_OscConfig+0x508>)
 8006c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c84:	f7fe f85e 	bl	8004d44 <HAL_GetTick>
 8006c88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c8a:	e008      	b.n	8006c9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c8c:	f7fe f85a 	bl	8004d44 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e1b8      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c9e:	4b15      	ldr	r3, [pc, #84]	; (8006cf4 <HAL_RCC_OscConfig+0x508>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0f0      	beq.n	8006c8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d108      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x4d8>
 8006cb2:	4b0f      	ldr	r3, [pc, #60]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb8:	4a0d      	ldr	r2, [pc, #52]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006cba:	f043 0301 	orr.w	r3, r3, #1
 8006cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006cc2:	e029      	b.n	8006d18 <HAL_RCC_OscConfig+0x52c>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	2b05      	cmp	r3, #5
 8006cca:	d115      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x50c>
 8006ccc:	4b08      	ldr	r3, [pc, #32]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd2:	4a07      	ldr	r2, [pc, #28]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006cd4:	f043 0304 	orr.w	r3, r3, #4
 8006cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006cdc:	4b04      	ldr	r3, [pc, #16]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce2:	4a03      	ldr	r2, [pc, #12]	; (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006ce4:	f043 0301 	orr.w	r3, r3, #1
 8006ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006cec:	e014      	b.n	8006d18 <HAL_RCC_OscConfig+0x52c>
 8006cee:	bf00      	nop
 8006cf0:	40021000 	.word	0x40021000
 8006cf4:	40007000 	.word	0x40007000
 8006cf8:	4b9d      	ldr	r3, [pc, #628]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cfe:	4a9c      	ldr	r2, [pc, #624]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006d00:	f023 0301 	bic.w	r3, r3, #1
 8006d04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d08:	4b99      	ldr	r3, [pc, #612]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d0e:	4a98      	ldr	r2, [pc, #608]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006d10:	f023 0304 	bic.w	r3, r3, #4
 8006d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d016      	beq.n	8006d4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d20:	f7fe f810 	bl	8004d44 <HAL_GetTick>
 8006d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d26:	e00a      	b.n	8006d3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d28:	f7fe f80c 	bl	8004d44 <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d901      	bls.n	8006d3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e168      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d3e:	4b8c      	ldr	r3, [pc, #560]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d0ed      	beq.n	8006d28 <HAL_RCC_OscConfig+0x53c>
 8006d4c:	e015      	b.n	8006d7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d4e:	f7fd fff9 	bl	8004d44 <HAL_GetTick>
 8006d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d54:	e00a      	b.n	8006d6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d56:	f7fd fff5 	bl	8004d44 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d901      	bls.n	8006d6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e151      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d6c:	4b80      	ldr	r3, [pc, #512]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1ed      	bne.n	8006d56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d7a:	7ffb      	ldrb	r3, [r7, #31]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d105      	bne.n	8006d8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d80:	4b7b      	ldr	r3, [pc, #492]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d84:	4a7a      	ldr	r2, [pc, #488]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006d86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d8a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0320 	and.w	r3, r3, #32
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d03c      	beq.n	8006e12 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d01c      	beq.n	8006dda <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006da0:	4b73      	ldr	r3, [pc, #460]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006da2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006da6:	4a72      	ldr	r2, [pc, #456]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006da8:	f043 0301 	orr.w	r3, r3, #1
 8006dac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006db0:	f7fd ffc8 	bl	8004d44 <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006db8:	f7fd ffc4 	bl	8004d44 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e122      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006dca:	4b69      	ldr	r3, [pc, #420]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006dcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006dd0:	f003 0302 	and.w	r3, r3, #2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d0ef      	beq.n	8006db8 <HAL_RCC_OscConfig+0x5cc>
 8006dd8:	e01b      	b.n	8006e12 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006dda:	4b65      	ldr	r3, [pc, #404]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006ddc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006de0:	4a63      	ldr	r2, [pc, #396]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006de2:	f023 0301 	bic.w	r3, r3, #1
 8006de6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dea:	f7fd ffab 	bl	8004d44 <HAL_GetTick>
 8006dee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006df0:	e008      	b.n	8006e04 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006df2:	f7fd ffa7 	bl	8004d44 <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d901      	bls.n	8006e04 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e105      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e04:	4b5a      	ldr	r3, [pc, #360]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006e06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1ef      	bne.n	8006df2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 80f9 	beq.w	800700e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	f040 80cf 	bne.w	8006fc4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006e26:	4b52      	ldr	r3, [pc, #328]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f003 0203 	and.w	r2, r3, #3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d12c      	bne.n	8006e94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e44:	3b01      	subs	r3, #1
 8006e46:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d123      	bne.n	8006e94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e56:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d11b      	bne.n	8006e94 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e66:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d113      	bne.n	8006e94 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e76:	085b      	lsrs	r3, r3, #1
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d109      	bne.n	8006e94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8a:	085b      	lsrs	r3, r3, #1
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d071      	beq.n	8006f78 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	2b0c      	cmp	r3, #12
 8006e98:	d068      	beq.n	8006f6c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006e9a:	4b35      	ldr	r3, [pc, #212]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d105      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006ea6:	4b32      	ldr	r3, [pc, #200]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e0ac      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006eb6:	4b2e      	ldr	r3, [pc, #184]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a2d      	ldr	r2, [pc, #180]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006ebc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ec0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ec2:	f7fd ff3f 	bl	8004d44 <HAL_GetTick>
 8006ec6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ec8:	e008      	b.n	8006edc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eca:	f7fd ff3b 	bl	8004d44 <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d901      	bls.n	8006edc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e099      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006edc:	4b24      	ldr	r3, [pc, #144]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1f0      	bne.n	8006eca <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ee8:	4b21      	ldr	r3, [pc, #132]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006eea:	68da      	ldr	r2, [r3, #12]
 8006eec:	4b21      	ldr	r3, [pc, #132]	; (8006f74 <HAL_RCC_OscConfig+0x788>)
 8006eee:	4013      	ands	r3, r2
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006ef8:	3a01      	subs	r2, #1
 8006efa:	0112      	lsls	r2, r2, #4
 8006efc:	4311      	orrs	r1, r2
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006f02:	0212      	lsls	r2, r2, #8
 8006f04:	4311      	orrs	r1, r2
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006f0a:	0852      	lsrs	r2, r2, #1
 8006f0c:	3a01      	subs	r2, #1
 8006f0e:	0552      	lsls	r2, r2, #21
 8006f10:	4311      	orrs	r1, r2
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006f16:	0852      	lsrs	r2, r2, #1
 8006f18:	3a01      	subs	r2, #1
 8006f1a:	0652      	lsls	r2, r2, #25
 8006f1c:	4311      	orrs	r1, r2
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f22:	06d2      	lsls	r2, r2, #27
 8006f24:	430a      	orrs	r2, r1
 8006f26:	4912      	ldr	r1, [pc, #72]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006f2c:	4b10      	ldr	r3, [pc, #64]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a0f      	ldr	r2, [pc, #60]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006f32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f38:	4b0d      	ldr	r3, [pc, #52]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	4a0c      	ldr	r2, [pc, #48]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006f44:	f7fd fefe 	bl	8004d44 <HAL_GetTick>
 8006f48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f4a:	e008      	b.n	8006f5e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f4c:	f7fd fefa 	bl	8004d44 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d901      	bls.n	8006f5e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e058      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f5e:	4b04      	ldr	r3, [pc, #16]	; (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d0f0      	beq.n	8006f4c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006f6a:	e050      	b.n	800700e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e04f      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
 8006f70:	40021000 	.word	0x40021000
 8006f74:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f78:	4b27      	ldr	r3, [pc, #156]	; (8007018 <HAL_RCC_OscConfig+0x82c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d144      	bne.n	800700e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006f84:	4b24      	ldr	r3, [pc, #144]	; (8007018 <HAL_RCC_OscConfig+0x82c>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a23      	ldr	r2, [pc, #140]	; (8007018 <HAL_RCC_OscConfig+0x82c>)
 8006f8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f90:	4b21      	ldr	r3, [pc, #132]	; (8007018 <HAL_RCC_OscConfig+0x82c>)
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	4a20      	ldr	r2, [pc, #128]	; (8007018 <HAL_RCC_OscConfig+0x82c>)
 8006f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f9c:	f7fd fed2 	bl	8004d44 <HAL_GetTick>
 8006fa0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fa2:	e008      	b.n	8006fb6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fa4:	f7fd fece 	bl	8004d44 <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e02c      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fb6:	4b18      	ldr	r3, [pc, #96]	; (8007018 <HAL_RCC_OscConfig+0x82c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d0f0      	beq.n	8006fa4 <HAL_RCC_OscConfig+0x7b8>
 8006fc2:	e024      	b.n	800700e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	2b0c      	cmp	r3, #12
 8006fc8:	d01f      	beq.n	800700a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fca:	4b13      	ldr	r3, [pc, #76]	; (8007018 <HAL_RCC_OscConfig+0x82c>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a12      	ldr	r2, [pc, #72]	; (8007018 <HAL_RCC_OscConfig+0x82c>)
 8006fd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fd6:	f7fd feb5 	bl	8004d44 <HAL_GetTick>
 8006fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fdc:	e008      	b.n	8006ff0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fde:	f7fd feb1 	bl	8004d44 <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d901      	bls.n	8006ff0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e00f      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ff0:	4b09      	ldr	r3, [pc, #36]	; (8007018 <HAL_RCC_OscConfig+0x82c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1f0      	bne.n	8006fde <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006ffc:	4b06      	ldr	r3, [pc, #24]	; (8007018 <HAL_RCC_OscConfig+0x82c>)
 8006ffe:	68da      	ldr	r2, [r3, #12]
 8007000:	4905      	ldr	r1, [pc, #20]	; (8007018 <HAL_RCC_OscConfig+0x82c>)
 8007002:	4b06      	ldr	r3, [pc, #24]	; (800701c <HAL_RCC_OscConfig+0x830>)
 8007004:	4013      	ands	r3, r2
 8007006:	60cb      	str	r3, [r1, #12]
 8007008:	e001      	b.n	800700e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e000      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3720      	adds	r7, #32
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	40021000 	.word	0x40021000
 800701c:	feeefffc 	.word	0xfeeefffc

08007020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800702a:	2300      	movs	r3, #0
 800702c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e11d      	b.n	8007274 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007038:	4b90      	ldr	r3, [pc, #576]	; (800727c <HAL_RCC_ClockConfig+0x25c>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 030f 	and.w	r3, r3, #15
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	429a      	cmp	r2, r3
 8007044:	d910      	bls.n	8007068 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007046:	4b8d      	ldr	r3, [pc, #564]	; (800727c <HAL_RCC_ClockConfig+0x25c>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f023 020f 	bic.w	r2, r3, #15
 800704e:	498b      	ldr	r1, [pc, #556]	; (800727c <HAL_RCC_ClockConfig+0x25c>)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	4313      	orrs	r3, r2
 8007054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007056:	4b89      	ldr	r3, [pc, #548]	; (800727c <HAL_RCC_ClockConfig+0x25c>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 030f 	and.w	r3, r3, #15
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	429a      	cmp	r2, r3
 8007062:	d001      	beq.n	8007068 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e105      	b.n	8007274 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b00      	cmp	r3, #0
 8007072:	d010      	beq.n	8007096 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689a      	ldr	r2, [r3, #8]
 8007078:	4b81      	ldr	r3, [pc, #516]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007080:	429a      	cmp	r2, r3
 8007082:	d908      	bls.n	8007096 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007084:	4b7e      	ldr	r3, [pc, #504]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	497b      	ldr	r1, [pc, #492]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 8007092:	4313      	orrs	r3, r2
 8007094:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d079      	beq.n	8007196 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d11e      	bne.n	80070e8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070aa:	4b75      	ldr	r3, [pc, #468]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e0dc      	b.n	8007274 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80070ba:	f000 fa09 	bl	80074d0 <RCC_GetSysClockFreqFromPLLSource>
 80070be:	4603      	mov	r3, r0
 80070c0:	4a70      	ldr	r2, [pc, #448]	; (8007284 <HAL_RCC_ClockConfig+0x264>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d946      	bls.n	8007154 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80070c6:	4b6e      	ldr	r3, [pc, #440]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d140      	bne.n	8007154 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80070d2:	4b6b      	ldr	r3, [pc, #428]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070da:	4a69      	ldr	r2, [pc, #420]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 80070dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80070e2:	2380      	movs	r3, #128	; 0x80
 80070e4:	617b      	str	r3, [r7, #20]
 80070e6:	e035      	b.n	8007154 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d107      	bne.n	8007100 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070f0:	4b63      	ldr	r3, [pc, #396]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d115      	bne.n	8007128 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e0b9      	b.n	8007274 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d107      	bne.n	8007118 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007108:	4b5d      	ldr	r3, [pc, #372]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0302 	and.w	r3, r3, #2
 8007110:	2b00      	cmp	r3, #0
 8007112:	d109      	bne.n	8007128 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e0ad      	b.n	8007274 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007118:	4b59      	ldr	r3, [pc, #356]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e0a5      	b.n	8007274 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8007128:	f000 f8b4 	bl	8007294 <HAL_RCC_GetSysClockFreq>
 800712c:	4603      	mov	r3, r0
 800712e:	4a55      	ldr	r2, [pc, #340]	; (8007284 <HAL_RCC_ClockConfig+0x264>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d90f      	bls.n	8007154 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007134:	4b52      	ldr	r3, [pc, #328]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d109      	bne.n	8007154 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007140:	4b4f      	ldr	r3, [pc, #316]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007148:	4a4d      	ldr	r2, [pc, #308]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 800714a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800714e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007150:	2380      	movs	r3, #128	; 0x80
 8007152:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007154:	4b4a      	ldr	r3, [pc, #296]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f023 0203 	bic.w	r2, r3, #3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	4947      	ldr	r1, [pc, #284]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 8007162:	4313      	orrs	r3, r2
 8007164:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007166:	f7fd fded 	bl	8004d44 <HAL_GetTick>
 800716a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800716c:	e00a      	b.n	8007184 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800716e:	f7fd fde9 	bl	8004d44 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	f241 3288 	movw	r2, #5000	; 0x1388
 800717c:	4293      	cmp	r3, r2
 800717e:	d901      	bls.n	8007184 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e077      	b.n	8007274 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007184:	4b3e      	ldr	r3, [pc, #248]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f003 020c 	and.w	r2, r3, #12
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	429a      	cmp	r2, r3
 8007194:	d1eb      	bne.n	800716e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2b80      	cmp	r3, #128	; 0x80
 800719a:	d105      	bne.n	80071a8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800719c:	4b38      	ldr	r3, [pc, #224]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	4a37      	ldr	r2, [pc, #220]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 80071a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071a6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0302 	and.w	r3, r3, #2
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d010      	beq.n	80071d6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	689a      	ldr	r2, [r3, #8]
 80071b8:	4b31      	ldr	r3, [pc, #196]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d208      	bcs.n	80071d6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071c4:	4b2e      	ldr	r3, [pc, #184]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	492b      	ldr	r1, [pc, #172]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071d6:	4b29      	ldr	r3, [pc, #164]	; (800727c <HAL_RCC_ClockConfig+0x25c>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 030f 	and.w	r3, r3, #15
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d210      	bcs.n	8007206 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071e4:	4b25      	ldr	r3, [pc, #148]	; (800727c <HAL_RCC_ClockConfig+0x25c>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f023 020f 	bic.w	r2, r3, #15
 80071ec:	4923      	ldr	r1, [pc, #140]	; (800727c <HAL_RCC_ClockConfig+0x25c>)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071f4:	4b21      	ldr	r3, [pc, #132]	; (800727c <HAL_RCC_ClockConfig+0x25c>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 030f 	and.w	r3, r3, #15
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d001      	beq.n	8007206 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e036      	b.n	8007274 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0304 	and.w	r3, r3, #4
 800720e:	2b00      	cmp	r3, #0
 8007210:	d008      	beq.n	8007224 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007212:	4b1b      	ldr	r3, [pc, #108]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	4918      	ldr	r1, [pc, #96]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 8007220:	4313      	orrs	r3, r2
 8007222:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0308 	and.w	r3, r3, #8
 800722c:	2b00      	cmp	r3, #0
 800722e:	d009      	beq.n	8007244 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007230:	4b13      	ldr	r3, [pc, #76]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	00db      	lsls	r3, r3, #3
 800723e:	4910      	ldr	r1, [pc, #64]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 8007240:	4313      	orrs	r3, r2
 8007242:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007244:	f000 f826 	bl	8007294 <HAL_RCC_GetSysClockFreq>
 8007248:	4602      	mov	r2, r0
 800724a:	4b0d      	ldr	r3, [pc, #52]	; (8007280 <HAL_RCC_ClockConfig+0x260>)
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	091b      	lsrs	r3, r3, #4
 8007250:	f003 030f 	and.w	r3, r3, #15
 8007254:	490c      	ldr	r1, [pc, #48]	; (8007288 <HAL_RCC_ClockConfig+0x268>)
 8007256:	5ccb      	ldrb	r3, [r1, r3]
 8007258:	f003 031f 	and.w	r3, r3, #31
 800725c:	fa22 f303 	lsr.w	r3, r2, r3
 8007260:	4a0a      	ldr	r2, [pc, #40]	; (800728c <HAL_RCC_ClockConfig+0x26c>)
 8007262:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007264:	4b0a      	ldr	r3, [pc, #40]	; (8007290 <HAL_RCC_ClockConfig+0x270>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4618      	mov	r0, r3
 800726a:	f7fd fd1b 	bl	8004ca4 <HAL_InitTick>
 800726e:	4603      	mov	r3, r0
 8007270:	73fb      	strb	r3, [r7, #15]

  return status;
 8007272:	7bfb      	ldrb	r3, [r7, #15]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3718      	adds	r7, #24
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	40022000 	.word	0x40022000
 8007280:	40021000 	.word	0x40021000
 8007284:	04c4b400 	.word	0x04c4b400
 8007288:	0800e4ac 	.word	0x0800e4ac
 800728c:	20000048 	.word	0x20000048
 8007290:	2000004c 	.word	0x2000004c

08007294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007294:	b480      	push	{r7}
 8007296:	b089      	sub	sp, #36	; 0x24
 8007298:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800729a:	2300      	movs	r3, #0
 800729c:	61fb      	str	r3, [r7, #28]
 800729e:	2300      	movs	r3, #0
 80072a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072a2:	4b3e      	ldr	r3, [pc, #248]	; (800739c <HAL_RCC_GetSysClockFreq+0x108>)
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f003 030c 	and.w	r3, r3, #12
 80072aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80072ac:	4b3b      	ldr	r3, [pc, #236]	; (800739c <HAL_RCC_GetSysClockFreq+0x108>)
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	f003 0303 	and.w	r3, r3, #3
 80072b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d005      	beq.n	80072c8 <HAL_RCC_GetSysClockFreq+0x34>
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	2b0c      	cmp	r3, #12
 80072c0:	d121      	bne.n	8007306 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d11e      	bne.n	8007306 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80072c8:	4b34      	ldr	r3, [pc, #208]	; (800739c <HAL_RCC_GetSysClockFreq+0x108>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0308 	and.w	r3, r3, #8
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d107      	bne.n	80072e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80072d4:	4b31      	ldr	r3, [pc, #196]	; (800739c <HAL_RCC_GetSysClockFreq+0x108>)
 80072d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072da:	0a1b      	lsrs	r3, r3, #8
 80072dc:	f003 030f 	and.w	r3, r3, #15
 80072e0:	61fb      	str	r3, [r7, #28]
 80072e2:	e005      	b.n	80072f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80072e4:	4b2d      	ldr	r3, [pc, #180]	; (800739c <HAL_RCC_GetSysClockFreq+0x108>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	091b      	lsrs	r3, r3, #4
 80072ea:	f003 030f 	and.w	r3, r3, #15
 80072ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80072f0:	4a2b      	ldr	r2, [pc, #172]	; (80073a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10d      	bne.n	800731c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007304:	e00a      	b.n	800731c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	2b04      	cmp	r3, #4
 800730a:	d102      	bne.n	8007312 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800730c:	4b25      	ldr	r3, [pc, #148]	; (80073a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800730e:	61bb      	str	r3, [r7, #24]
 8007310:	e004      	b.n	800731c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	2b08      	cmp	r3, #8
 8007316:	d101      	bne.n	800731c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007318:	4b23      	ldr	r3, [pc, #140]	; (80073a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800731a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	2b0c      	cmp	r3, #12
 8007320:	d134      	bne.n	800738c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007322:	4b1e      	ldr	r3, [pc, #120]	; (800739c <HAL_RCC_GetSysClockFreq+0x108>)
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	f003 0303 	and.w	r3, r3, #3
 800732a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2b02      	cmp	r3, #2
 8007330:	d003      	beq.n	800733a <HAL_RCC_GetSysClockFreq+0xa6>
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	2b03      	cmp	r3, #3
 8007336:	d003      	beq.n	8007340 <HAL_RCC_GetSysClockFreq+0xac>
 8007338:	e005      	b.n	8007346 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800733a:	4b1a      	ldr	r3, [pc, #104]	; (80073a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800733c:	617b      	str	r3, [r7, #20]
      break;
 800733e:	e005      	b.n	800734c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007340:	4b19      	ldr	r3, [pc, #100]	; (80073a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8007342:	617b      	str	r3, [r7, #20]
      break;
 8007344:	e002      	b.n	800734c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	617b      	str	r3, [r7, #20]
      break;
 800734a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800734c:	4b13      	ldr	r3, [pc, #76]	; (800739c <HAL_RCC_GetSysClockFreq+0x108>)
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	091b      	lsrs	r3, r3, #4
 8007352:	f003 030f 	and.w	r3, r3, #15
 8007356:	3301      	adds	r3, #1
 8007358:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800735a:	4b10      	ldr	r3, [pc, #64]	; (800739c <HAL_RCC_GetSysClockFreq+0x108>)
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	0a1b      	lsrs	r3, r3, #8
 8007360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	fb03 f202 	mul.w	r2, r3, r2
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007370:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007372:	4b0a      	ldr	r3, [pc, #40]	; (800739c <HAL_RCC_GetSysClockFreq+0x108>)
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	0e5b      	lsrs	r3, r3, #25
 8007378:	f003 0303 	and.w	r3, r3, #3
 800737c:	3301      	adds	r3, #1
 800737e:	005b      	lsls	r3, r3, #1
 8007380:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	fbb2 f3f3 	udiv	r3, r2, r3
 800738a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800738c:	69bb      	ldr	r3, [r7, #24]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3724      	adds	r7, #36	; 0x24
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	40021000 	.word	0x40021000
 80073a0:	0800e4c4 	.word	0x0800e4c4
 80073a4:	00f42400 	.word	0x00f42400
 80073a8:	007a1200 	.word	0x007a1200

080073ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073ac:	b480      	push	{r7}
 80073ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073b0:	4b03      	ldr	r3, [pc, #12]	; (80073c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80073b2:	681b      	ldr	r3, [r3, #0]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	20000048 	.word	0x20000048

080073c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80073c8:	f7ff fff0 	bl	80073ac <HAL_RCC_GetHCLKFreq>
 80073cc:	4602      	mov	r2, r0
 80073ce:	4b06      	ldr	r3, [pc, #24]	; (80073e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	0a1b      	lsrs	r3, r3, #8
 80073d4:	f003 0307 	and.w	r3, r3, #7
 80073d8:	4904      	ldr	r1, [pc, #16]	; (80073ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80073da:	5ccb      	ldrb	r3, [r1, r3]
 80073dc:	f003 031f 	and.w	r3, r3, #31
 80073e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	40021000 	.word	0x40021000
 80073ec:	0800e4bc 	.word	0x0800e4bc

080073f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80073f4:	f7ff ffda 	bl	80073ac <HAL_RCC_GetHCLKFreq>
 80073f8:	4602      	mov	r2, r0
 80073fa:	4b06      	ldr	r3, [pc, #24]	; (8007414 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	0adb      	lsrs	r3, r3, #11
 8007400:	f003 0307 	and.w	r3, r3, #7
 8007404:	4904      	ldr	r1, [pc, #16]	; (8007418 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007406:	5ccb      	ldrb	r3, [r1, r3]
 8007408:	f003 031f 	and.w	r3, r3, #31
 800740c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007410:	4618      	mov	r0, r3
 8007412:	bd80      	pop	{r7, pc}
 8007414:	40021000 	.word	0x40021000
 8007418:	0800e4bc 	.word	0x0800e4bc

0800741c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007424:	2300      	movs	r3, #0
 8007426:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007428:	4b27      	ldr	r3, [pc, #156]	; (80074c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800742a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800742c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d003      	beq.n	800743c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007434:	f7ff f906 	bl	8006644 <HAL_PWREx_GetVoltageRange>
 8007438:	6178      	str	r0, [r7, #20]
 800743a:	e014      	b.n	8007466 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800743c:	4b22      	ldr	r3, [pc, #136]	; (80074c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800743e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007440:	4a21      	ldr	r2, [pc, #132]	; (80074c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007446:	6593      	str	r3, [r2, #88]	; 0x58
 8007448:	4b1f      	ldr	r3, [pc, #124]	; (80074c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800744a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800744c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007450:	60fb      	str	r3, [r7, #12]
 8007452:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007454:	f7ff f8f6 	bl	8006644 <HAL_PWREx_GetVoltageRange>
 8007458:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800745a:	4b1b      	ldr	r3, [pc, #108]	; (80074c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800745c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800745e:	4a1a      	ldr	r2, [pc, #104]	; (80074c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007464:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800746c:	d10b      	bne.n	8007486 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2b80      	cmp	r3, #128	; 0x80
 8007472:	d913      	bls.n	800749c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2ba0      	cmp	r3, #160	; 0xa0
 8007478:	d902      	bls.n	8007480 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800747a:	2302      	movs	r3, #2
 800747c:	613b      	str	r3, [r7, #16]
 800747e:	e00d      	b.n	800749c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007480:	2301      	movs	r3, #1
 8007482:	613b      	str	r3, [r7, #16]
 8007484:	e00a      	b.n	800749c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b7f      	cmp	r3, #127	; 0x7f
 800748a:	d902      	bls.n	8007492 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800748c:	2302      	movs	r3, #2
 800748e:	613b      	str	r3, [r7, #16]
 8007490:	e004      	b.n	800749c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b70      	cmp	r3, #112	; 0x70
 8007496:	d101      	bne.n	800749c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007498:	2301      	movs	r3, #1
 800749a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800749c:	4b0b      	ldr	r3, [pc, #44]	; (80074cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f023 020f 	bic.w	r2, r3, #15
 80074a4:	4909      	ldr	r1, [pc, #36]	; (80074cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80074ac:	4b07      	ldr	r3, [pc, #28]	; (80074cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 030f 	and.w	r3, r3, #15
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d001      	beq.n	80074be <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e000      	b.n	80074c0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3718      	adds	r7, #24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	40021000 	.word	0x40021000
 80074cc:	40022000 	.word	0x40022000

080074d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b087      	sub	sp, #28
 80074d4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80074d6:	4b2d      	ldr	r3, [pc, #180]	; (800758c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	f003 0303 	and.w	r3, r3, #3
 80074de:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d00b      	beq.n	80074fe <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2b03      	cmp	r3, #3
 80074ea:	d825      	bhi.n	8007538 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d008      	beq.n	8007504 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d11f      	bne.n	8007538 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80074f8:	4b25      	ldr	r3, [pc, #148]	; (8007590 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80074fa:	613b      	str	r3, [r7, #16]
    break;
 80074fc:	e01f      	b.n	800753e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80074fe:	4b25      	ldr	r3, [pc, #148]	; (8007594 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8007500:	613b      	str	r3, [r7, #16]
    break;
 8007502:	e01c      	b.n	800753e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007504:	4b21      	ldr	r3, [pc, #132]	; (800758c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0308 	and.w	r3, r3, #8
 800750c:	2b00      	cmp	r3, #0
 800750e:	d107      	bne.n	8007520 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007510:	4b1e      	ldr	r3, [pc, #120]	; (800758c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007516:	0a1b      	lsrs	r3, r3, #8
 8007518:	f003 030f 	and.w	r3, r3, #15
 800751c:	617b      	str	r3, [r7, #20]
 800751e:	e005      	b.n	800752c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007520:	4b1a      	ldr	r3, [pc, #104]	; (800758c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	091b      	lsrs	r3, r3, #4
 8007526:	f003 030f 	and.w	r3, r3, #15
 800752a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800752c:	4a1a      	ldr	r2, [pc, #104]	; (8007598 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007534:	613b      	str	r3, [r7, #16]
    break;
 8007536:	e002      	b.n	800753e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8007538:	2300      	movs	r3, #0
 800753a:	613b      	str	r3, [r7, #16]
    break;
 800753c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800753e:	4b13      	ldr	r3, [pc, #76]	; (800758c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	091b      	lsrs	r3, r3, #4
 8007544:	f003 030f 	and.w	r3, r3, #15
 8007548:	3301      	adds	r3, #1
 800754a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800754c:	4b0f      	ldr	r3, [pc, #60]	; (800758c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	0a1b      	lsrs	r3, r3, #8
 8007552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	fb03 f202 	mul.w	r2, r3, r2
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007562:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007564:	4b09      	ldr	r3, [pc, #36]	; (800758c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	0e5b      	lsrs	r3, r3, #25
 800756a:	f003 0303 	and.w	r3, r3, #3
 800756e:	3301      	adds	r3, #1
 8007570:	005b      	lsls	r3, r3, #1
 8007572:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	fbb2 f3f3 	udiv	r3, r2, r3
 800757c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800757e:	683b      	ldr	r3, [r7, #0]
}
 8007580:	4618      	mov	r0, r3
 8007582:	371c      	adds	r7, #28
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	40021000 	.word	0x40021000
 8007590:	00f42400 	.word	0x00f42400
 8007594:	007a1200 	.word	0x007a1200
 8007598:	0800e4c4 	.word	0x0800e4c4

0800759c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80075a4:	2300      	movs	r3, #0
 80075a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80075a8:	2300      	movs	r3, #0
 80075aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d040      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075bc:	2b80      	cmp	r3, #128	; 0x80
 80075be:	d02a      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80075c0:	2b80      	cmp	r3, #128	; 0x80
 80075c2:	d825      	bhi.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80075c4:	2b60      	cmp	r3, #96	; 0x60
 80075c6:	d026      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80075c8:	2b60      	cmp	r3, #96	; 0x60
 80075ca:	d821      	bhi.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80075cc:	2b40      	cmp	r3, #64	; 0x40
 80075ce:	d006      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x42>
 80075d0:	2b40      	cmp	r3, #64	; 0x40
 80075d2:	d81d      	bhi.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d009      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x50>
 80075d8:	2b20      	cmp	r3, #32
 80075da:	d010      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x62>
 80075dc:	e018      	b.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80075de:	4b89      	ldr	r3, [pc, #548]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	4a88      	ldr	r2, [pc, #544]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80075e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075e8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80075ea:	e015      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	3304      	adds	r3, #4
 80075f0:	2100      	movs	r1, #0
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 fb02 	bl	8007bfc <RCCEx_PLLSAI1_Config>
 80075f8:	4603      	mov	r3, r0
 80075fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80075fc:	e00c      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	3320      	adds	r3, #32
 8007602:	2100      	movs	r1, #0
 8007604:	4618      	mov	r0, r3
 8007606:	f000 fbed 	bl	8007de4 <RCCEx_PLLSAI2_Config>
 800760a:	4603      	mov	r3, r0
 800760c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800760e:	e003      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	74fb      	strb	r3, [r7, #19]
      break;
 8007614:	e000      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8007616:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007618:	7cfb      	ldrb	r3, [r7, #19]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10b      	bne.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800761e:	4b79      	ldr	r3, [pc, #484]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007620:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007624:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800762c:	4975      	ldr	r1, [pc, #468]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800762e:	4313      	orrs	r3, r2
 8007630:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007634:	e001      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007636:	7cfb      	ldrb	r3, [r7, #19]
 8007638:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d047      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800764a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800764e:	d030      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007654:	d82a      	bhi.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007656:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800765a:	d02a      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800765c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007660:	d824      	bhi.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007666:	d008      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800766c:	d81e      	bhi.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00a      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007676:	d010      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007678:	e018      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800767a:	4b62      	ldr	r3, [pc, #392]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	4a61      	ldr	r2, [pc, #388]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007684:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007686:	e015      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3304      	adds	r3, #4
 800768c:	2100      	movs	r1, #0
 800768e:	4618      	mov	r0, r3
 8007690:	f000 fab4 	bl	8007bfc <RCCEx_PLLSAI1_Config>
 8007694:	4603      	mov	r3, r0
 8007696:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007698:	e00c      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	3320      	adds	r3, #32
 800769e:	2100      	movs	r1, #0
 80076a0:	4618      	mov	r0, r3
 80076a2:	f000 fb9f 	bl	8007de4 <RCCEx_PLLSAI2_Config>
 80076a6:	4603      	mov	r3, r0
 80076a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80076aa:	e003      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	74fb      	strb	r3, [r7, #19]
      break;
 80076b0:	e000      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80076b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076b4:	7cfb      	ldrb	r3, [r7, #19]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10b      	bne.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80076ba:	4b52      	ldr	r3, [pc, #328]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80076bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076c8:	494e      	ldr	r1, [pc, #312]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80076ca:	4313      	orrs	r3, r2
 80076cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80076d0:	e001      	b.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076d2:	7cfb      	ldrb	r3, [r7, #19]
 80076d4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f000 809f 	beq.w	8007822 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076e4:	2300      	movs	r3, #0
 80076e6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80076e8:	4b46      	ldr	r3, [pc, #280]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80076ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80076f4:	2301      	movs	r3, #1
 80076f6:	e000      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80076f8:	2300      	movs	r3, #0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00d      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076fe:	4b41      	ldr	r3, [pc, #260]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007702:	4a40      	ldr	r2, [pc, #256]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007708:	6593      	str	r3, [r2, #88]	; 0x58
 800770a:	4b3e      	ldr	r3, [pc, #248]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800770c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800770e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007712:	60bb      	str	r3, [r7, #8]
 8007714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007716:	2301      	movs	r3, #1
 8007718:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800771a:	4b3b      	ldr	r3, [pc, #236]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a3a      	ldr	r2, [pc, #232]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007724:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007726:	f7fd fb0d 	bl	8004d44 <HAL_GetTick>
 800772a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800772c:	e009      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800772e:	f7fd fb09 	bl	8004d44 <HAL_GetTick>
 8007732:	4602      	mov	r2, r0
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	2b02      	cmp	r3, #2
 800773a:	d902      	bls.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	74fb      	strb	r3, [r7, #19]
        break;
 8007740:	e005      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007742:	4b31      	ldr	r3, [pc, #196]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800774a:	2b00      	cmp	r3, #0
 800774c:	d0ef      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800774e:	7cfb      	ldrb	r3, [r7, #19]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d15b      	bne.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007754:	4b2b      	ldr	r3, [pc, #172]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800775a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800775e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d01f      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	429a      	cmp	r2, r3
 8007770:	d019      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007772:	4b24      	ldr	r3, [pc, #144]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800777c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800777e:	4b21      	ldr	r3, [pc, #132]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007784:	4a1f      	ldr	r2, [pc, #124]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800778a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800778e:	4b1d      	ldr	r3, [pc, #116]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007794:	4a1b      	ldr	r2, [pc, #108]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800779a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800779e:	4a19      	ldr	r2, [pc, #100]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f003 0301 	and.w	r3, r3, #1
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d016      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077b0:	f7fd fac8 	bl	8004d44 <HAL_GetTick>
 80077b4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077b6:	e00b      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077b8:	f7fd fac4 	bl	8004d44 <HAL_GetTick>
 80077bc:	4602      	mov	r2, r0
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d902      	bls.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	74fb      	strb	r3, [r7, #19]
            break;
 80077ce:	e006      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077d0:	4b0c      	ldr	r3, [pc, #48]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80077d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d0ec      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80077de:	7cfb      	ldrb	r3, [r7, #19]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10c      	bne.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077e4:	4b07      	ldr	r3, [pc, #28]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80077e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f4:	4903      	ldr	r1, [pc, #12]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80077fc:	e008      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80077fe:	7cfb      	ldrb	r3, [r7, #19]
 8007800:	74bb      	strb	r3, [r7, #18]
 8007802:	e005      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8007804:	40021000 	.word	0x40021000
 8007808:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800780c:	7cfb      	ldrb	r3, [r7, #19]
 800780e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007810:	7c7b      	ldrb	r3, [r7, #17]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d105      	bne.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007816:	4ba0      	ldr	r3, [pc, #640]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800781a:	4a9f      	ldr	r2, [pc, #636]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800781c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007820:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800782e:	4b9a      	ldr	r3, [pc, #616]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007834:	f023 0203 	bic.w	r2, r3, #3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800783c:	4996      	ldr	r1, [pc, #600]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800783e:	4313      	orrs	r3, r2
 8007840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0302 	and.w	r3, r3, #2
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00a      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007850:	4b91      	ldr	r3, [pc, #580]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007856:	f023 020c 	bic.w	r2, r3, #12
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785e:	498e      	ldr	r1, [pc, #568]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007860:	4313      	orrs	r3, r2
 8007862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0304 	and.w	r3, r3, #4
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00a      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007872:	4b89      	ldr	r3, [pc, #548]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007878:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007880:	4985      	ldr	r1, [pc, #532]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007882:	4313      	orrs	r3, r2
 8007884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0308 	and.w	r3, r3, #8
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00a      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007894:	4b80      	ldr	r3, [pc, #512]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800789a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078a2:	497d      	ldr	r1, [pc, #500]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0310 	and.w	r3, r3, #16
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00a      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80078b6:	4b78      	ldr	r3, [pc, #480]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80078b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078c4:	4974      	ldr	r1, [pc, #464]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0320 	and.w	r3, r3, #32
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00a      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80078d8:	4b6f      	ldr	r3, [pc, #444]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80078da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078e6:	496c      	ldr	r1, [pc, #432]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00a      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078fa:	4b67      	ldr	r3, [pc, #412]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80078fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007900:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007908:	4963      	ldr	r1, [pc, #396]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800790a:	4313      	orrs	r3, r2
 800790c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00a      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800791c:	4b5e      	ldr	r3, [pc, #376]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800791e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007922:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800792a:	495b      	ldr	r1, [pc, #364]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800792c:	4313      	orrs	r3, r2
 800792e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800793e:	4b56      	ldr	r3, [pc, #344]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007944:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800794c:	4952      	ldr	r1, [pc, #328]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800794e:	4313      	orrs	r3, r2
 8007950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00a      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007960:	4b4d      	ldr	r3, [pc, #308]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007966:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800796e:	494a      	ldr	r1, [pc, #296]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007970:	4313      	orrs	r3, r2
 8007972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00a      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007982:	4b45      	ldr	r3, [pc, #276]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007988:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007990:	4941      	ldr	r1, [pc, #260]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007992:	4313      	orrs	r3, r2
 8007994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00a      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80079a4:	4b3c      	ldr	r3, [pc, #240]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80079a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079aa:	f023 0203 	bic.w	r2, r3, #3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079b2:	4939      	ldr	r1, [pc, #228]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d028      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80079c6:	4b34      	ldr	r3, [pc, #208]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80079c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079d4:	4930      	ldr	r1, [pc, #192]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80079d6:	4313      	orrs	r3, r2
 80079d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079e4:	d106      	bne.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079e6:	4b2c      	ldr	r3, [pc, #176]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	4a2b      	ldr	r2, [pc, #172]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80079ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079f0:	60d3      	str	r3, [r2, #12]
 80079f2:	e011      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079fc:	d10c      	bne.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	3304      	adds	r3, #4
 8007a02:	2101      	movs	r1, #1
 8007a04:	4618      	mov	r0, r3
 8007a06:	f000 f8f9 	bl	8007bfc <RCCEx_PLLSAI1_Config>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007a0e:	7cfb      	ldrb	r3, [r7, #19]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8007a14:	7cfb      	ldrb	r3, [r7, #19]
 8007a16:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d04d      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a2c:	d108      	bne.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007a2e:	4b1a      	ldr	r3, [pc, #104]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a34:	4a18      	ldr	r2, [pc, #96]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a3a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007a3e:	e012      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007a40:	4b15      	ldr	r3, [pc, #84]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a46:	4a14      	ldr	r2, [pc, #80]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a4c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007a50:	4b11      	ldr	r3, [pc, #68]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a5e:	490e      	ldr	r1, [pc, #56]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a6e:	d106      	bne.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a70:	4b09      	ldr	r3, [pc, #36]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	4a08      	ldr	r2, [pc, #32]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a7a:	60d3      	str	r3, [r2, #12]
 8007a7c:	e020      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a86:	d109      	bne.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007a88:	4b03      	ldr	r3, [pc, #12]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	4a02      	ldr	r2, [pc, #8]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a92:	60d3      	str	r3, [r2, #12]
 8007a94:	e014      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007a96:	bf00      	nop
 8007a98:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007aa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007aa4:	d10c      	bne.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	2101      	movs	r1, #1
 8007aac:	4618      	mov	r0, r3
 8007aae:	f000 f8a5 	bl	8007bfc <RCCEx_PLLSAI1_Config>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ab6:	7cfb      	ldrb	r3, [r7, #19]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d001      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007abc:	7cfb      	ldrb	r3, [r7, #19]
 8007abe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d028      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007acc:	4b4a      	ldr	r3, [pc, #296]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ad2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ada:	4947      	ldr	r1, [pc, #284]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007adc:	4313      	orrs	r3, r2
 8007ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007aea:	d106      	bne.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007aec:	4b42      	ldr	r3, [pc, #264]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	4a41      	ldr	r2, [pc, #260]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007af6:	60d3      	str	r3, [r2, #12]
 8007af8:	e011      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007afe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b02:	d10c      	bne.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	3304      	adds	r3, #4
 8007b08:	2101      	movs	r1, #1
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 f876 	bl	8007bfc <RCCEx_PLLSAI1_Config>
 8007b10:	4603      	mov	r3, r0
 8007b12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007b14:	7cfb      	ldrb	r3, [r7, #19]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d001      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8007b1a:	7cfb      	ldrb	r3, [r7, #19]
 8007b1c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d01e      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b2a:	4b33      	ldr	r3, [pc, #204]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b30:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b3a:	492f      	ldr	r1, [pc, #188]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b4c:	d10c      	bne.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	3304      	adds	r3, #4
 8007b52:	2102      	movs	r1, #2
 8007b54:	4618      	mov	r0, r3
 8007b56:	f000 f851 	bl	8007bfc <RCCEx_PLLSAI1_Config>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007b5e:	7cfb      	ldrb	r3, [r7, #19]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8007b64:	7cfb      	ldrb	r3, [r7, #19]
 8007b66:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00b      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b74:	4b20      	ldr	r3, [pc, #128]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b7a:	f023 0204 	bic.w	r2, r3, #4
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b84:	491c      	ldr	r1, [pc, #112]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00b      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007b98:	4b17      	ldr	r3, [pc, #92]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b9e:	f023 0218 	bic.w	r2, r3, #24
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba8:	4913      	ldr	r1, [pc, #76]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d017      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007bbc:	4b0e      	ldr	r3, [pc, #56]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007bc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bcc:	490a      	ldr	r1, [pc, #40]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bde:	d105      	bne.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007be0:	4b05      	ldr	r3, [pc, #20]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	4a04      	ldr	r2, [pc, #16]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007be6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007bec:	7cbb      	ldrb	r3, [r7, #18]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3718      	adds	r7, #24
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	40021000 	.word	0x40021000

08007bfc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c06:	2300      	movs	r3, #0
 8007c08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007c0a:	4b72      	ldr	r3, [pc, #456]	; (8007dd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	f003 0303 	and.w	r3, r3, #3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00e      	beq.n	8007c34 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007c16:	4b6f      	ldr	r3, [pc, #444]	; (8007dd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	f003 0203 	and.w	r2, r3, #3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d103      	bne.n	8007c2e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
       ||
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d142      	bne.n	8007cb4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	73fb      	strb	r3, [r7, #15]
 8007c32:	e03f      	b.n	8007cb4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b03      	cmp	r3, #3
 8007c3a:	d018      	beq.n	8007c6e <RCCEx_PLLSAI1_Config+0x72>
 8007c3c:	2b03      	cmp	r3, #3
 8007c3e:	d825      	bhi.n	8007c8c <RCCEx_PLLSAI1_Config+0x90>
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d002      	beq.n	8007c4a <RCCEx_PLLSAI1_Config+0x4e>
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d009      	beq.n	8007c5c <RCCEx_PLLSAI1_Config+0x60>
 8007c48:	e020      	b.n	8007c8c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007c4a:	4b62      	ldr	r3, [pc, #392]	; (8007dd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0302 	and.w	r3, r3, #2
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d11d      	bne.n	8007c92 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c5a:	e01a      	b.n	8007c92 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007c5c:	4b5d      	ldr	r3, [pc, #372]	; (8007dd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d116      	bne.n	8007c96 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c6c:	e013      	b.n	8007c96 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007c6e:	4b59      	ldr	r3, [pc, #356]	; (8007dd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10f      	bne.n	8007c9a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007c7a:	4b56      	ldr	r3, [pc, #344]	; (8007dd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d109      	bne.n	8007c9a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c8a:	e006      	b.n	8007c9a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c90:	e004      	b.n	8007c9c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007c92:	bf00      	nop
 8007c94:	e002      	b.n	8007c9c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007c96:	bf00      	nop
 8007c98:	e000      	b.n	8007c9c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007c9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d108      	bne.n	8007cb4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007ca2:	4b4c      	ldr	r3, [pc, #304]	; (8007dd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	f023 0203 	bic.w	r2, r3, #3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4949      	ldr	r1, [pc, #292]	; (8007dd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f040 8086 	bne.w	8007dc8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007cbc:	4b45      	ldr	r3, [pc, #276]	; (8007dd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a44      	ldr	r2, [pc, #272]	; (8007dd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007cc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cc8:	f7fd f83c 	bl	8004d44 <HAL_GetTick>
 8007ccc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007cce:	e009      	b.n	8007ce4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007cd0:	f7fd f838 	bl	8004d44 <HAL_GetTick>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d902      	bls.n	8007ce4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	73fb      	strb	r3, [r7, #15]
        break;
 8007ce2:	e005      	b.n	8007cf0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007ce4:	4b3b      	ldr	r3, [pc, #236]	; (8007dd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1ef      	bne.n	8007cd0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d168      	bne.n	8007dc8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d113      	bne.n	8007d24 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007cfc:	4b35      	ldr	r3, [pc, #212]	; (8007dd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cfe:	691a      	ldr	r2, [r3, #16]
 8007d00:	4b35      	ldr	r3, [pc, #212]	; (8007dd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007d02:	4013      	ands	r3, r2
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	6892      	ldr	r2, [r2, #8]
 8007d08:	0211      	lsls	r1, r2, #8
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	68d2      	ldr	r2, [r2, #12]
 8007d0e:	06d2      	lsls	r2, r2, #27
 8007d10:	4311      	orrs	r1, r2
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	6852      	ldr	r2, [r2, #4]
 8007d16:	3a01      	subs	r2, #1
 8007d18:	0112      	lsls	r2, r2, #4
 8007d1a:	430a      	orrs	r2, r1
 8007d1c:	492d      	ldr	r1, [pc, #180]	; (8007dd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	610b      	str	r3, [r1, #16]
 8007d22:	e02d      	b.n	8007d80 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d115      	bne.n	8007d56 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007d2a:	4b2a      	ldr	r3, [pc, #168]	; (8007dd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d2c:	691a      	ldr	r2, [r3, #16]
 8007d2e:	4b2b      	ldr	r3, [pc, #172]	; (8007ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d30:	4013      	ands	r3, r2
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	6892      	ldr	r2, [r2, #8]
 8007d36:	0211      	lsls	r1, r2, #8
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	6912      	ldr	r2, [r2, #16]
 8007d3c:	0852      	lsrs	r2, r2, #1
 8007d3e:	3a01      	subs	r2, #1
 8007d40:	0552      	lsls	r2, r2, #21
 8007d42:	4311      	orrs	r1, r2
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	6852      	ldr	r2, [r2, #4]
 8007d48:	3a01      	subs	r2, #1
 8007d4a:	0112      	lsls	r2, r2, #4
 8007d4c:	430a      	orrs	r2, r1
 8007d4e:	4921      	ldr	r1, [pc, #132]	; (8007dd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d50:	4313      	orrs	r3, r2
 8007d52:	610b      	str	r3, [r1, #16]
 8007d54:	e014      	b.n	8007d80 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007d56:	4b1f      	ldr	r3, [pc, #124]	; (8007dd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d58:	691a      	ldr	r2, [r3, #16]
 8007d5a:	4b21      	ldr	r3, [pc, #132]	; (8007de0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	6892      	ldr	r2, [r2, #8]
 8007d62:	0211      	lsls	r1, r2, #8
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	6952      	ldr	r2, [r2, #20]
 8007d68:	0852      	lsrs	r2, r2, #1
 8007d6a:	3a01      	subs	r2, #1
 8007d6c:	0652      	lsls	r2, r2, #25
 8007d6e:	4311      	orrs	r1, r2
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	6852      	ldr	r2, [r2, #4]
 8007d74:	3a01      	subs	r2, #1
 8007d76:	0112      	lsls	r2, r2, #4
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	4916      	ldr	r1, [pc, #88]	; (8007dd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007d80:	4b14      	ldr	r3, [pc, #80]	; (8007dd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a13      	ldr	r2, [pc, #76]	; (8007dd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d8c:	f7fc ffda 	bl	8004d44 <HAL_GetTick>
 8007d90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007d92:	e009      	b.n	8007da8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007d94:	f7fc ffd6 	bl	8004d44 <HAL_GetTick>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d902      	bls.n	8007da8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	73fb      	strb	r3, [r7, #15]
          break;
 8007da6:	e005      	b.n	8007db4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007da8:	4b0a      	ldr	r3, [pc, #40]	; (8007dd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d0ef      	beq.n	8007d94 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d106      	bne.n	8007dc8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007dba:	4b06      	ldr	r3, [pc, #24]	; (8007dd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007dbc:	691a      	ldr	r2, [r3, #16]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	4904      	ldr	r1, [pc, #16]	; (8007dd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	40021000 	.word	0x40021000
 8007dd8:	07ff800f 	.word	0x07ff800f
 8007ddc:	ff9f800f 	.word	0xff9f800f
 8007de0:	f9ff800f 	.word	0xf9ff800f

08007de4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007df2:	4b72      	ldr	r3, [pc, #456]	; (8007fbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	f003 0303 	and.w	r3, r3, #3
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00e      	beq.n	8007e1c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007dfe:	4b6f      	ldr	r3, [pc, #444]	; (8007fbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	f003 0203 	and.w	r2, r3, #3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d103      	bne.n	8007e16 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
       ||
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d142      	bne.n	8007e9c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	73fb      	strb	r3, [r7, #15]
 8007e1a:	e03f      	b.n	8007e9c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b03      	cmp	r3, #3
 8007e22:	d018      	beq.n	8007e56 <RCCEx_PLLSAI2_Config+0x72>
 8007e24:	2b03      	cmp	r3, #3
 8007e26:	d825      	bhi.n	8007e74 <RCCEx_PLLSAI2_Config+0x90>
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d002      	beq.n	8007e32 <RCCEx_PLLSAI2_Config+0x4e>
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d009      	beq.n	8007e44 <RCCEx_PLLSAI2_Config+0x60>
 8007e30:	e020      	b.n	8007e74 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007e32:	4b62      	ldr	r3, [pc, #392]	; (8007fbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0302 	and.w	r3, r3, #2
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d11d      	bne.n	8007e7a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e42:	e01a      	b.n	8007e7a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007e44:	4b5d      	ldr	r3, [pc, #372]	; (8007fbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d116      	bne.n	8007e7e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e54:	e013      	b.n	8007e7e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007e56:	4b59      	ldr	r3, [pc, #356]	; (8007fbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d10f      	bne.n	8007e82 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007e62:	4b56      	ldr	r3, [pc, #344]	; (8007fbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d109      	bne.n	8007e82 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007e72:	e006      	b.n	8007e82 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	73fb      	strb	r3, [r7, #15]
      break;
 8007e78:	e004      	b.n	8007e84 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007e7a:	bf00      	nop
 8007e7c:	e002      	b.n	8007e84 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007e7e:	bf00      	nop
 8007e80:	e000      	b.n	8007e84 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007e82:	bf00      	nop
    }

    if(status == HAL_OK)
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d108      	bne.n	8007e9c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007e8a:	4b4c      	ldr	r3, [pc, #304]	; (8007fbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	f023 0203 	bic.w	r2, r3, #3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4949      	ldr	r1, [pc, #292]	; (8007fbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f040 8086 	bne.w	8007fb0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007ea4:	4b45      	ldr	r3, [pc, #276]	; (8007fbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a44      	ldr	r2, [pc, #272]	; (8007fbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007eaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007eae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007eb0:	f7fc ff48 	bl	8004d44 <HAL_GetTick>
 8007eb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007eb6:	e009      	b.n	8007ecc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007eb8:	f7fc ff44 	bl	8004d44 <HAL_GetTick>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d902      	bls.n	8007ecc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	73fb      	strb	r3, [r7, #15]
        break;
 8007eca:	e005      	b.n	8007ed8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007ecc:	4b3b      	ldr	r3, [pc, #236]	; (8007fbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1ef      	bne.n	8007eb8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d168      	bne.n	8007fb0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d113      	bne.n	8007f0c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007ee4:	4b35      	ldr	r3, [pc, #212]	; (8007fbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ee6:	695a      	ldr	r2, [r3, #20]
 8007ee8:	4b35      	ldr	r3, [pc, #212]	; (8007fc0 <RCCEx_PLLSAI2_Config+0x1dc>)
 8007eea:	4013      	ands	r3, r2
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	6892      	ldr	r2, [r2, #8]
 8007ef0:	0211      	lsls	r1, r2, #8
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	68d2      	ldr	r2, [r2, #12]
 8007ef6:	06d2      	lsls	r2, r2, #27
 8007ef8:	4311      	orrs	r1, r2
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	6852      	ldr	r2, [r2, #4]
 8007efe:	3a01      	subs	r2, #1
 8007f00:	0112      	lsls	r2, r2, #4
 8007f02:	430a      	orrs	r2, r1
 8007f04:	492d      	ldr	r1, [pc, #180]	; (8007fbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f06:	4313      	orrs	r3, r2
 8007f08:	614b      	str	r3, [r1, #20]
 8007f0a:	e02d      	b.n	8007f68 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d115      	bne.n	8007f3e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007f12:	4b2a      	ldr	r3, [pc, #168]	; (8007fbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f14:	695a      	ldr	r2, [r3, #20]
 8007f16:	4b2b      	ldr	r3, [pc, #172]	; (8007fc4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8007f18:	4013      	ands	r3, r2
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	6892      	ldr	r2, [r2, #8]
 8007f1e:	0211      	lsls	r1, r2, #8
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	6912      	ldr	r2, [r2, #16]
 8007f24:	0852      	lsrs	r2, r2, #1
 8007f26:	3a01      	subs	r2, #1
 8007f28:	0552      	lsls	r2, r2, #21
 8007f2a:	4311      	orrs	r1, r2
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	6852      	ldr	r2, [r2, #4]
 8007f30:	3a01      	subs	r2, #1
 8007f32:	0112      	lsls	r2, r2, #4
 8007f34:	430a      	orrs	r2, r1
 8007f36:	4921      	ldr	r1, [pc, #132]	; (8007fbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	614b      	str	r3, [r1, #20]
 8007f3c:	e014      	b.n	8007f68 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007f3e:	4b1f      	ldr	r3, [pc, #124]	; (8007fbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f40:	695a      	ldr	r2, [r3, #20]
 8007f42:	4b21      	ldr	r3, [pc, #132]	; (8007fc8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8007f44:	4013      	ands	r3, r2
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	6892      	ldr	r2, [r2, #8]
 8007f4a:	0211      	lsls	r1, r2, #8
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	6952      	ldr	r2, [r2, #20]
 8007f50:	0852      	lsrs	r2, r2, #1
 8007f52:	3a01      	subs	r2, #1
 8007f54:	0652      	lsls	r2, r2, #25
 8007f56:	4311      	orrs	r1, r2
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	6852      	ldr	r2, [r2, #4]
 8007f5c:	3a01      	subs	r2, #1
 8007f5e:	0112      	lsls	r2, r2, #4
 8007f60:	430a      	orrs	r2, r1
 8007f62:	4916      	ldr	r1, [pc, #88]	; (8007fbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f64:	4313      	orrs	r3, r2
 8007f66:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007f68:	4b14      	ldr	r3, [pc, #80]	; (8007fbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a13      	ldr	r2, [pc, #76]	; (8007fbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f74:	f7fc fee6 	bl	8004d44 <HAL_GetTick>
 8007f78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007f7a:	e009      	b.n	8007f90 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007f7c:	f7fc fee2 	bl	8004d44 <HAL_GetTick>
 8007f80:	4602      	mov	r2, r0
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d902      	bls.n	8007f90 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	73fb      	strb	r3, [r7, #15]
          break;
 8007f8e:	e005      	b.n	8007f9c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007f90:	4b0a      	ldr	r3, [pc, #40]	; (8007fbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d0ef      	beq.n	8007f7c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d106      	bne.n	8007fb0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007fa2:	4b06      	ldr	r3, [pc, #24]	; (8007fbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007fa4:	695a      	ldr	r2, [r3, #20]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	4904      	ldr	r1, [pc, #16]	; (8007fbc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007fac:	4313      	orrs	r3, r2
 8007fae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	40021000 	.word	0x40021000
 8007fc0:	07ff800f 	.word	0x07ff800f
 8007fc4:	ff9f800f 	.word	0xff9f800f
 8007fc8:	f9ff800f 	.word	0xf9ff800f

08007fcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e049      	b.n	8008072 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d106      	bne.n	8007ff8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7fc fc5c 	bl	80048b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	3304      	adds	r3, #4
 8008008:	4619      	mov	r1, r3
 800800a:	4610      	mov	r0, r2
 800800c:	f000 fbec 	bl	80087e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
	...

0800807c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800808a:	b2db      	uxtb	r3, r3
 800808c:	2b01      	cmp	r3, #1
 800808e:	d001      	beq.n	8008094 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e04f      	b.n	8008134 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2202      	movs	r2, #2
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68da      	ldr	r2, [r3, #12]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f042 0201 	orr.w	r2, r2, #1
 80080aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a23      	ldr	r2, [pc, #140]	; (8008140 <HAL_TIM_Base_Start_IT+0xc4>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d01d      	beq.n	80080f2 <HAL_TIM_Base_Start_IT+0x76>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080be:	d018      	beq.n	80080f2 <HAL_TIM_Base_Start_IT+0x76>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a1f      	ldr	r2, [pc, #124]	; (8008144 <HAL_TIM_Base_Start_IT+0xc8>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d013      	beq.n	80080f2 <HAL_TIM_Base_Start_IT+0x76>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a1e      	ldr	r2, [pc, #120]	; (8008148 <HAL_TIM_Base_Start_IT+0xcc>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d00e      	beq.n	80080f2 <HAL_TIM_Base_Start_IT+0x76>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a1c      	ldr	r2, [pc, #112]	; (800814c <HAL_TIM_Base_Start_IT+0xd0>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d009      	beq.n	80080f2 <HAL_TIM_Base_Start_IT+0x76>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a1b      	ldr	r2, [pc, #108]	; (8008150 <HAL_TIM_Base_Start_IT+0xd4>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d004      	beq.n	80080f2 <HAL_TIM_Base_Start_IT+0x76>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a19      	ldr	r2, [pc, #100]	; (8008154 <HAL_TIM_Base_Start_IT+0xd8>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d115      	bne.n	800811e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	689a      	ldr	r2, [r3, #8]
 80080f8:	4b17      	ldr	r3, [pc, #92]	; (8008158 <HAL_TIM_Base_Start_IT+0xdc>)
 80080fa:	4013      	ands	r3, r2
 80080fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2b06      	cmp	r3, #6
 8008102:	d015      	beq.n	8008130 <HAL_TIM_Base_Start_IT+0xb4>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800810a:	d011      	beq.n	8008130 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f042 0201 	orr.w	r2, r2, #1
 800811a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800811c:	e008      	b.n	8008130 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f042 0201 	orr.w	r2, r2, #1
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	e000      	b.n	8008132 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008130:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	40012c00 	.word	0x40012c00
 8008144:	40000400 	.word	0x40000400
 8008148:	40000800 	.word	0x40000800
 800814c:	40000c00 	.word	0x40000c00
 8008150:	40013400 	.word	0x40013400
 8008154:	40014000 	.word	0x40014000
 8008158:	00010007 	.word	0x00010007

0800815c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e049      	b.n	8008202 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	d106      	bne.n	8008188 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f841 	bl	800820a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2202      	movs	r2, #2
 800818c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	3304      	adds	r3, #4
 8008198:	4619      	mov	r1, r3
 800819a:	4610      	mov	r0, r2
 800819c:	f000 fb24 	bl	80087e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800820a:	b480      	push	{r7}
 800820c:	b083      	sub	sp, #12
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008212:	bf00      	nop
 8008214:	370c      	adds	r7, #12
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
	...

08008220 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d109      	bne.n	8008244 <HAL_TIM_PWM_Start+0x24>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b01      	cmp	r3, #1
 800823a:	bf14      	ite	ne
 800823c:	2301      	movne	r3, #1
 800823e:	2300      	moveq	r3, #0
 8008240:	b2db      	uxtb	r3, r3
 8008242:	e03c      	b.n	80082be <HAL_TIM_PWM_Start+0x9e>
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	2b04      	cmp	r3, #4
 8008248:	d109      	bne.n	800825e <HAL_TIM_PWM_Start+0x3e>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b01      	cmp	r3, #1
 8008254:	bf14      	ite	ne
 8008256:	2301      	movne	r3, #1
 8008258:	2300      	moveq	r3, #0
 800825a:	b2db      	uxtb	r3, r3
 800825c:	e02f      	b.n	80082be <HAL_TIM_PWM_Start+0x9e>
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b08      	cmp	r3, #8
 8008262:	d109      	bne.n	8008278 <HAL_TIM_PWM_Start+0x58>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800826a:	b2db      	uxtb	r3, r3
 800826c:	2b01      	cmp	r3, #1
 800826e:	bf14      	ite	ne
 8008270:	2301      	movne	r3, #1
 8008272:	2300      	moveq	r3, #0
 8008274:	b2db      	uxtb	r3, r3
 8008276:	e022      	b.n	80082be <HAL_TIM_PWM_Start+0x9e>
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	2b0c      	cmp	r3, #12
 800827c:	d109      	bne.n	8008292 <HAL_TIM_PWM_Start+0x72>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b01      	cmp	r3, #1
 8008288:	bf14      	ite	ne
 800828a:	2301      	movne	r3, #1
 800828c:	2300      	moveq	r3, #0
 800828e:	b2db      	uxtb	r3, r3
 8008290:	e015      	b.n	80082be <HAL_TIM_PWM_Start+0x9e>
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	2b10      	cmp	r3, #16
 8008296:	d109      	bne.n	80082ac <HAL_TIM_PWM_Start+0x8c>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	bf14      	ite	ne
 80082a4:	2301      	movne	r3, #1
 80082a6:	2300      	moveq	r3, #0
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	e008      	b.n	80082be <HAL_TIM_PWM_Start+0x9e>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	bf14      	ite	ne
 80082b8:	2301      	movne	r3, #1
 80082ba:	2300      	moveq	r3, #0
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d001      	beq.n	80082c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e09c      	b.n	8008400 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d104      	bne.n	80082d6 <HAL_TIM_PWM_Start+0xb6>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2202      	movs	r2, #2
 80082d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082d4:	e023      	b.n	800831e <HAL_TIM_PWM_Start+0xfe>
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	2b04      	cmp	r3, #4
 80082da:	d104      	bne.n	80082e6 <HAL_TIM_PWM_Start+0xc6>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2202      	movs	r2, #2
 80082e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082e4:	e01b      	b.n	800831e <HAL_TIM_PWM_Start+0xfe>
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	2b08      	cmp	r3, #8
 80082ea:	d104      	bne.n	80082f6 <HAL_TIM_PWM_Start+0xd6>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2202      	movs	r2, #2
 80082f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082f4:	e013      	b.n	800831e <HAL_TIM_PWM_Start+0xfe>
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	2b0c      	cmp	r3, #12
 80082fa:	d104      	bne.n	8008306 <HAL_TIM_PWM_Start+0xe6>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2202      	movs	r2, #2
 8008300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008304:	e00b      	b.n	800831e <HAL_TIM_PWM_Start+0xfe>
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	2b10      	cmp	r3, #16
 800830a:	d104      	bne.n	8008316 <HAL_TIM_PWM_Start+0xf6>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2202      	movs	r2, #2
 8008310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008314:	e003      	b.n	800831e <HAL_TIM_PWM_Start+0xfe>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2202      	movs	r2, #2
 800831a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2201      	movs	r2, #1
 8008324:	6839      	ldr	r1, [r7, #0]
 8008326:	4618      	mov	r0, r3
 8008328:	f000 fe68 	bl	8008ffc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a35      	ldr	r2, [pc, #212]	; (8008408 <HAL_TIM_PWM_Start+0x1e8>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d013      	beq.n	800835e <HAL_TIM_PWM_Start+0x13e>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a34      	ldr	r2, [pc, #208]	; (800840c <HAL_TIM_PWM_Start+0x1ec>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d00e      	beq.n	800835e <HAL_TIM_PWM_Start+0x13e>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a32      	ldr	r2, [pc, #200]	; (8008410 <HAL_TIM_PWM_Start+0x1f0>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d009      	beq.n	800835e <HAL_TIM_PWM_Start+0x13e>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a31      	ldr	r2, [pc, #196]	; (8008414 <HAL_TIM_PWM_Start+0x1f4>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d004      	beq.n	800835e <HAL_TIM_PWM_Start+0x13e>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a2f      	ldr	r2, [pc, #188]	; (8008418 <HAL_TIM_PWM_Start+0x1f8>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d101      	bne.n	8008362 <HAL_TIM_PWM_Start+0x142>
 800835e:	2301      	movs	r3, #1
 8008360:	e000      	b.n	8008364 <HAL_TIM_PWM_Start+0x144>
 8008362:	2300      	movs	r3, #0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d007      	beq.n	8008378 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008376:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a22      	ldr	r2, [pc, #136]	; (8008408 <HAL_TIM_PWM_Start+0x1e8>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d01d      	beq.n	80083be <HAL_TIM_PWM_Start+0x19e>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800838a:	d018      	beq.n	80083be <HAL_TIM_PWM_Start+0x19e>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a22      	ldr	r2, [pc, #136]	; (800841c <HAL_TIM_PWM_Start+0x1fc>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d013      	beq.n	80083be <HAL_TIM_PWM_Start+0x19e>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a21      	ldr	r2, [pc, #132]	; (8008420 <HAL_TIM_PWM_Start+0x200>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d00e      	beq.n	80083be <HAL_TIM_PWM_Start+0x19e>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a1f      	ldr	r2, [pc, #124]	; (8008424 <HAL_TIM_PWM_Start+0x204>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d009      	beq.n	80083be <HAL_TIM_PWM_Start+0x19e>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a17      	ldr	r2, [pc, #92]	; (800840c <HAL_TIM_PWM_Start+0x1ec>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d004      	beq.n	80083be <HAL_TIM_PWM_Start+0x19e>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a15      	ldr	r2, [pc, #84]	; (8008410 <HAL_TIM_PWM_Start+0x1f0>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d115      	bne.n	80083ea <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	689a      	ldr	r2, [r3, #8]
 80083c4:	4b18      	ldr	r3, [pc, #96]	; (8008428 <HAL_TIM_PWM_Start+0x208>)
 80083c6:	4013      	ands	r3, r2
 80083c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b06      	cmp	r3, #6
 80083ce:	d015      	beq.n	80083fc <HAL_TIM_PWM_Start+0x1dc>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083d6:	d011      	beq.n	80083fc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f042 0201 	orr.w	r2, r2, #1
 80083e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083e8:	e008      	b.n	80083fc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f042 0201 	orr.w	r2, r2, #1
 80083f8:	601a      	str	r2, [r3, #0]
 80083fa:	e000      	b.n	80083fe <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	40012c00 	.word	0x40012c00
 800840c:	40013400 	.word	0x40013400
 8008410:	40014000 	.word	0x40014000
 8008414:	40014400 	.word	0x40014400
 8008418:	40014800 	.word	0x40014800
 800841c:	40000400 	.word	0x40000400
 8008420:	40000800 	.word	0x40000800
 8008424:	40000c00 	.word	0x40000c00
 8008428:	00010007 	.word	0x00010007

0800842c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008438:	2300      	movs	r3, #0
 800843a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008442:	2b01      	cmp	r3, #1
 8008444:	d101      	bne.n	800844a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008446:	2302      	movs	r3, #2
 8008448:	e0ff      	b.n	800864a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b14      	cmp	r3, #20
 8008456:	f200 80f0 	bhi.w	800863a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800845a:	a201      	add	r2, pc, #4	; (adr r2, 8008460 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800845c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008460:	080084b5 	.word	0x080084b5
 8008464:	0800863b 	.word	0x0800863b
 8008468:	0800863b 	.word	0x0800863b
 800846c:	0800863b 	.word	0x0800863b
 8008470:	080084f5 	.word	0x080084f5
 8008474:	0800863b 	.word	0x0800863b
 8008478:	0800863b 	.word	0x0800863b
 800847c:	0800863b 	.word	0x0800863b
 8008480:	08008537 	.word	0x08008537
 8008484:	0800863b 	.word	0x0800863b
 8008488:	0800863b 	.word	0x0800863b
 800848c:	0800863b 	.word	0x0800863b
 8008490:	08008577 	.word	0x08008577
 8008494:	0800863b 	.word	0x0800863b
 8008498:	0800863b 	.word	0x0800863b
 800849c:	0800863b 	.word	0x0800863b
 80084a0:	080085b9 	.word	0x080085b9
 80084a4:	0800863b 	.word	0x0800863b
 80084a8:	0800863b 	.word	0x0800863b
 80084ac:	0800863b 	.word	0x0800863b
 80084b0:	080085f9 	.word	0x080085f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68b9      	ldr	r1, [r7, #8]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f000 fa2e 	bl	800891c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	699a      	ldr	r2, [r3, #24]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f042 0208 	orr.w	r2, r2, #8
 80084ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	699a      	ldr	r2, [r3, #24]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f022 0204 	bic.w	r2, r2, #4
 80084de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6999      	ldr	r1, [r3, #24]
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	691a      	ldr	r2, [r3, #16]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	430a      	orrs	r2, r1
 80084f0:	619a      	str	r2, [r3, #24]
      break;
 80084f2:	e0a5      	b.n	8008640 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68b9      	ldr	r1, [r7, #8]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 fa9e 	bl	8008a3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	699a      	ldr	r2, [r3, #24]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800850e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	699a      	ldr	r2, [r3, #24]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800851e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	6999      	ldr	r1, [r3, #24]
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	021a      	lsls	r2, r3, #8
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	430a      	orrs	r2, r1
 8008532:	619a      	str	r2, [r3, #24]
      break;
 8008534:	e084      	b.n	8008640 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68b9      	ldr	r1, [r7, #8]
 800853c:	4618      	mov	r0, r3
 800853e:	f000 fb07 	bl	8008b50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	69da      	ldr	r2, [r3, #28]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f042 0208 	orr.w	r2, r2, #8
 8008550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	69da      	ldr	r2, [r3, #28]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f022 0204 	bic.w	r2, r2, #4
 8008560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	69d9      	ldr	r1, [r3, #28]
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	691a      	ldr	r2, [r3, #16]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	430a      	orrs	r2, r1
 8008572:	61da      	str	r2, [r3, #28]
      break;
 8008574:	e064      	b.n	8008640 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68b9      	ldr	r1, [r7, #8]
 800857c:	4618      	mov	r0, r3
 800857e:	f000 fb6f 	bl	8008c60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	69da      	ldr	r2, [r3, #28]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	69da      	ldr	r2, [r3, #28]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	69d9      	ldr	r1, [r3, #28]
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	021a      	lsls	r2, r3, #8
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	430a      	orrs	r2, r1
 80085b4:	61da      	str	r2, [r3, #28]
      break;
 80085b6:	e043      	b.n	8008640 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68b9      	ldr	r1, [r7, #8]
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fbb8 	bl	8008d34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f042 0208 	orr.w	r2, r2, #8
 80085d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f022 0204 	bic.w	r2, r2, #4
 80085e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	691a      	ldr	r2, [r3, #16]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	430a      	orrs	r2, r1
 80085f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80085f6:	e023      	b.n	8008640 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68b9      	ldr	r1, [r7, #8]
 80085fe:	4618      	mov	r0, r3
 8008600:	f000 fbfc 	bl	8008dfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008612:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008622:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	021a      	lsls	r2, r3, #8
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	430a      	orrs	r2, r1
 8008636:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008638:	e002      	b.n	8008640 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	75fb      	strb	r3, [r7, #23]
      break;
 800863e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008648:	7dfb      	ldrb	r3, [r7, #23]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3718      	adds	r7, #24
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop

08008654 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008668:	2b01      	cmp	r3, #1
 800866a:	d101      	bne.n	8008670 <HAL_TIM_ConfigClockSource+0x1c>
 800866c:	2302      	movs	r3, #2
 800866e:	e0b6      	b.n	80087de <HAL_TIM_ConfigClockSource+0x18a>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2202      	movs	r2, #2
 800867c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800868e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800869a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086ac:	d03e      	beq.n	800872c <HAL_TIM_ConfigClockSource+0xd8>
 80086ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086b2:	f200 8087 	bhi.w	80087c4 <HAL_TIM_ConfigClockSource+0x170>
 80086b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ba:	f000 8086 	beq.w	80087ca <HAL_TIM_ConfigClockSource+0x176>
 80086be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086c2:	d87f      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x170>
 80086c4:	2b70      	cmp	r3, #112	; 0x70
 80086c6:	d01a      	beq.n	80086fe <HAL_TIM_ConfigClockSource+0xaa>
 80086c8:	2b70      	cmp	r3, #112	; 0x70
 80086ca:	d87b      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x170>
 80086cc:	2b60      	cmp	r3, #96	; 0x60
 80086ce:	d050      	beq.n	8008772 <HAL_TIM_ConfigClockSource+0x11e>
 80086d0:	2b60      	cmp	r3, #96	; 0x60
 80086d2:	d877      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x170>
 80086d4:	2b50      	cmp	r3, #80	; 0x50
 80086d6:	d03c      	beq.n	8008752 <HAL_TIM_ConfigClockSource+0xfe>
 80086d8:	2b50      	cmp	r3, #80	; 0x50
 80086da:	d873      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x170>
 80086dc:	2b40      	cmp	r3, #64	; 0x40
 80086de:	d058      	beq.n	8008792 <HAL_TIM_ConfigClockSource+0x13e>
 80086e0:	2b40      	cmp	r3, #64	; 0x40
 80086e2:	d86f      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x170>
 80086e4:	2b30      	cmp	r3, #48	; 0x30
 80086e6:	d064      	beq.n	80087b2 <HAL_TIM_ConfigClockSource+0x15e>
 80086e8:	2b30      	cmp	r3, #48	; 0x30
 80086ea:	d86b      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x170>
 80086ec:	2b20      	cmp	r3, #32
 80086ee:	d060      	beq.n	80087b2 <HAL_TIM_ConfigClockSource+0x15e>
 80086f0:	2b20      	cmp	r3, #32
 80086f2:	d867      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x170>
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d05c      	beq.n	80087b2 <HAL_TIM_ConfigClockSource+0x15e>
 80086f8:	2b10      	cmp	r3, #16
 80086fa:	d05a      	beq.n	80087b2 <HAL_TIM_ConfigClockSource+0x15e>
 80086fc:	e062      	b.n	80087c4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6818      	ldr	r0, [r3, #0]
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	6899      	ldr	r1, [r3, #8]
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	685a      	ldr	r2, [r3, #4]
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	f000 fc55 	bl	8008fbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008720:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	609a      	str	r2, [r3, #8]
      break;
 800872a:	e04f      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6818      	ldr	r0, [r3, #0]
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	6899      	ldr	r1, [r3, #8]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	f000 fc3e 	bl	8008fbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	689a      	ldr	r2, [r3, #8]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800874e:	609a      	str	r2, [r3, #8]
      break;
 8008750:	e03c      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6818      	ldr	r0, [r3, #0]
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	6859      	ldr	r1, [r3, #4]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	461a      	mov	r2, r3
 8008760:	f000 fbb2 	bl	8008ec8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2150      	movs	r1, #80	; 0x50
 800876a:	4618      	mov	r0, r3
 800876c:	f000 fc0b 	bl	8008f86 <TIM_ITRx_SetConfig>
      break;
 8008770:	e02c      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6818      	ldr	r0, [r3, #0]
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	6859      	ldr	r1, [r3, #4]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	461a      	mov	r2, r3
 8008780:	f000 fbd1 	bl	8008f26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2160      	movs	r1, #96	; 0x60
 800878a:	4618      	mov	r0, r3
 800878c:	f000 fbfb 	bl	8008f86 <TIM_ITRx_SetConfig>
      break;
 8008790:	e01c      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6818      	ldr	r0, [r3, #0]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	6859      	ldr	r1, [r3, #4]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	461a      	mov	r2, r3
 80087a0:	f000 fb92 	bl	8008ec8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2140      	movs	r1, #64	; 0x40
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 fbeb 	bl	8008f86 <TIM_ITRx_SetConfig>
      break;
 80087b0:	e00c      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4619      	mov	r1, r3
 80087bc:	4610      	mov	r0, r2
 80087be:	f000 fbe2 	bl	8008f86 <TIM_ITRx_SetConfig>
      break;
 80087c2:	e003      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	73fb      	strb	r3, [r7, #15]
      break;
 80087c8:	e000      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80087ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
	...

080087e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a40      	ldr	r2, [pc, #256]	; (80088fc <TIM_Base_SetConfig+0x114>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d013      	beq.n	8008828 <TIM_Base_SetConfig+0x40>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008806:	d00f      	beq.n	8008828 <TIM_Base_SetConfig+0x40>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a3d      	ldr	r2, [pc, #244]	; (8008900 <TIM_Base_SetConfig+0x118>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d00b      	beq.n	8008828 <TIM_Base_SetConfig+0x40>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a3c      	ldr	r2, [pc, #240]	; (8008904 <TIM_Base_SetConfig+0x11c>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d007      	beq.n	8008828 <TIM_Base_SetConfig+0x40>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a3b      	ldr	r2, [pc, #236]	; (8008908 <TIM_Base_SetConfig+0x120>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d003      	beq.n	8008828 <TIM_Base_SetConfig+0x40>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a3a      	ldr	r2, [pc, #232]	; (800890c <TIM_Base_SetConfig+0x124>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d108      	bne.n	800883a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800882e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	4313      	orrs	r3, r2
 8008838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a2f      	ldr	r2, [pc, #188]	; (80088fc <TIM_Base_SetConfig+0x114>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d01f      	beq.n	8008882 <TIM_Base_SetConfig+0x9a>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008848:	d01b      	beq.n	8008882 <TIM_Base_SetConfig+0x9a>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a2c      	ldr	r2, [pc, #176]	; (8008900 <TIM_Base_SetConfig+0x118>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d017      	beq.n	8008882 <TIM_Base_SetConfig+0x9a>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a2b      	ldr	r2, [pc, #172]	; (8008904 <TIM_Base_SetConfig+0x11c>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d013      	beq.n	8008882 <TIM_Base_SetConfig+0x9a>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a2a      	ldr	r2, [pc, #168]	; (8008908 <TIM_Base_SetConfig+0x120>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d00f      	beq.n	8008882 <TIM_Base_SetConfig+0x9a>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a29      	ldr	r2, [pc, #164]	; (800890c <TIM_Base_SetConfig+0x124>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d00b      	beq.n	8008882 <TIM_Base_SetConfig+0x9a>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a28      	ldr	r2, [pc, #160]	; (8008910 <TIM_Base_SetConfig+0x128>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d007      	beq.n	8008882 <TIM_Base_SetConfig+0x9a>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a27      	ldr	r2, [pc, #156]	; (8008914 <TIM_Base_SetConfig+0x12c>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d003      	beq.n	8008882 <TIM_Base_SetConfig+0x9a>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a26      	ldr	r2, [pc, #152]	; (8008918 <TIM_Base_SetConfig+0x130>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d108      	bne.n	8008894 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	4313      	orrs	r3, r2
 8008892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	4313      	orrs	r3, r2
 80088a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	689a      	ldr	r2, [r3, #8]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a10      	ldr	r2, [pc, #64]	; (80088fc <TIM_Base_SetConfig+0x114>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d00f      	beq.n	80088e0 <TIM_Base_SetConfig+0xf8>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a12      	ldr	r2, [pc, #72]	; (800890c <TIM_Base_SetConfig+0x124>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d00b      	beq.n	80088e0 <TIM_Base_SetConfig+0xf8>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a11      	ldr	r2, [pc, #68]	; (8008910 <TIM_Base_SetConfig+0x128>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d007      	beq.n	80088e0 <TIM_Base_SetConfig+0xf8>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a10      	ldr	r2, [pc, #64]	; (8008914 <TIM_Base_SetConfig+0x12c>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d003      	beq.n	80088e0 <TIM_Base_SetConfig+0xf8>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a0f      	ldr	r2, [pc, #60]	; (8008918 <TIM_Base_SetConfig+0x130>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d103      	bne.n	80088e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	691a      	ldr	r2, [r3, #16]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	615a      	str	r2, [r3, #20]
}
 80088ee:	bf00      	nop
 80088f0:	3714      	adds	r7, #20
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	40012c00 	.word	0x40012c00
 8008900:	40000400 	.word	0x40000400
 8008904:	40000800 	.word	0x40000800
 8008908:	40000c00 	.word	0x40000c00
 800890c:	40013400 	.word	0x40013400
 8008910:	40014000 	.word	0x40014000
 8008914:	40014400 	.word	0x40014400
 8008918:	40014800 	.word	0x40014800

0800891c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800891c:	b480      	push	{r7}
 800891e:	b087      	sub	sp, #28
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	f023 0201 	bic.w	r2, r3, #1
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800894a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800894e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f023 0303 	bic.w	r3, r3, #3
 8008956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	4313      	orrs	r3, r2
 8008960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	f023 0302 	bic.w	r3, r3, #2
 8008968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	4313      	orrs	r3, r2
 8008972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4a2c      	ldr	r2, [pc, #176]	; (8008a28 <TIM_OC1_SetConfig+0x10c>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d00f      	beq.n	800899c <TIM_OC1_SetConfig+0x80>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a2b      	ldr	r2, [pc, #172]	; (8008a2c <TIM_OC1_SetConfig+0x110>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d00b      	beq.n	800899c <TIM_OC1_SetConfig+0x80>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a2a      	ldr	r2, [pc, #168]	; (8008a30 <TIM_OC1_SetConfig+0x114>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d007      	beq.n	800899c <TIM_OC1_SetConfig+0x80>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a29      	ldr	r2, [pc, #164]	; (8008a34 <TIM_OC1_SetConfig+0x118>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d003      	beq.n	800899c <TIM_OC1_SetConfig+0x80>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a28      	ldr	r2, [pc, #160]	; (8008a38 <TIM_OC1_SetConfig+0x11c>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d10c      	bne.n	80089b6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	f023 0308 	bic.w	r3, r3, #8
 80089a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	697a      	ldr	r2, [r7, #20]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	f023 0304 	bic.w	r3, r3, #4
 80089b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a1b      	ldr	r2, [pc, #108]	; (8008a28 <TIM_OC1_SetConfig+0x10c>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d00f      	beq.n	80089de <TIM_OC1_SetConfig+0xc2>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a1a      	ldr	r2, [pc, #104]	; (8008a2c <TIM_OC1_SetConfig+0x110>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d00b      	beq.n	80089de <TIM_OC1_SetConfig+0xc2>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a19      	ldr	r2, [pc, #100]	; (8008a30 <TIM_OC1_SetConfig+0x114>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d007      	beq.n	80089de <TIM_OC1_SetConfig+0xc2>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a18      	ldr	r2, [pc, #96]	; (8008a34 <TIM_OC1_SetConfig+0x118>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d003      	beq.n	80089de <TIM_OC1_SetConfig+0xc2>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a17      	ldr	r2, [pc, #92]	; (8008a38 <TIM_OC1_SetConfig+0x11c>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d111      	bne.n	8008a02 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	693a      	ldr	r2, [r7, #16]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	693a      	ldr	r2, [r7, #16]
 8008a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	697a      	ldr	r2, [r7, #20]
 8008a1a:	621a      	str	r2, [r3, #32]
}
 8008a1c:	bf00      	nop
 8008a1e:	371c      	adds	r7, #28
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	40012c00 	.word	0x40012c00
 8008a2c:	40013400 	.word	0x40013400
 8008a30:	40014000 	.word	0x40014000
 8008a34:	40014400 	.word	0x40014400
 8008a38:	40014800 	.word	0x40014800

08008a3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b087      	sub	sp, #28
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	f023 0210 	bic.w	r2, r3, #16
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a1b      	ldr	r3, [r3, #32]
 8008a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	699b      	ldr	r3, [r3, #24]
 8008a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	021b      	lsls	r3, r3, #8
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	f023 0320 	bic.w	r3, r3, #32
 8008a8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	011b      	lsls	r3, r3, #4
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a28      	ldr	r2, [pc, #160]	; (8008b3c <TIM_OC2_SetConfig+0x100>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d003      	beq.n	8008aa8 <TIM_OC2_SetConfig+0x6c>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a27      	ldr	r2, [pc, #156]	; (8008b40 <TIM_OC2_SetConfig+0x104>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d10d      	bne.n	8008ac4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008aae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	011b      	lsls	r3, r3, #4
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ac2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a1d      	ldr	r2, [pc, #116]	; (8008b3c <TIM_OC2_SetConfig+0x100>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d00f      	beq.n	8008aec <TIM_OC2_SetConfig+0xb0>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a1c      	ldr	r2, [pc, #112]	; (8008b40 <TIM_OC2_SetConfig+0x104>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d00b      	beq.n	8008aec <TIM_OC2_SetConfig+0xb0>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a1b      	ldr	r2, [pc, #108]	; (8008b44 <TIM_OC2_SetConfig+0x108>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d007      	beq.n	8008aec <TIM_OC2_SetConfig+0xb0>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a1a      	ldr	r2, [pc, #104]	; (8008b48 <TIM_OC2_SetConfig+0x10c>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d003      	beq.n	8008aec <TIM_OC2_SetConfig+0xb0>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a19      	ldr	r2, [pc, #100]	; (8008b4c <TIM_OC2_SetConfig+0x110>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d113      	bne.n	8008b14 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008af2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008afa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	695b      	ldr	r3, [r3, #20]
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	693a      	ldr	r2, [r7, #16]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	693a      	ldr	r2, [r7, #16]
 8008b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	685a      	ldr	r2, [r3, #4]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	621a      	str	r2, [r3, #32]
}
 8008b2e:	bf00      	nop
 8008b30:	371c      	adds	r7, #28
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	40012c00 	.word	0x40012c00
 8008b40:	40013400 	.word	0x40013400
 8008b44:	40014000 	.word	0x40014000
 8008b48:	40014400 	.word	0x40014400
 8008b4c:	40014800 	.word	0x40014800

08008b50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b087      	sub	sp, #28
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a1b      	ldr	r3, [r3, #32]
 8008b6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	69db      	ldr	r3, [r3, #28]
 8008b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f023 0303 	bic.w	r3, r3, #3
 8008b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	021b      	lsls	r3, r3, #8
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a27      	ldr	r2, [pc, #156]	; (8008c4c <TIM_OC3_SetConfig+0xfc>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d003      	beq.n	8008bba <TIM_OC3_SetConfig+0x6a>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a26      	ldr	r2, [pc, #152]	; (8008c50 <TIM_OC3_SetConfig+0x100>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d10d      	bne.n	8008bd6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008bc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	021b      	lsls	r3, r3, #8
 8008bc8:	697a      	ldr	r2, [r7, #20]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a1c      	ldr	r2, [pc, #112]	; (8008c4c <TIM_OC3_SetConfig+0xfc>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d00f      	beq.n	8008bfe <TIM_OC3_SetConfig+0xae>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a1b      	ldr	r2, [pc, #108]	; (8008c50 <TIM_OC3_SetConfig+0x100>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d00b      	beq.n	8008bfe <TIM_OC3_SetConfig+0xae>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a1a      	ldr	r2, [pc, #104]	; (8008c54 <TIM_OC3_SetConfig+0x104>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d007      	beq.n	8008bfe <TIM_OC3_SetConfig+0xae>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a19      	ldr	r2, [pc, #100]	; (8008c58 <TIM_OC3_SetConfig+0x108>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d003      	beq.n	8008bfe <TIM_OC3_SetConfig+0xae>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a18      	ldr	r2, [pc, #96]	; (8008c5c <TIM_OC3_SetConfig+0x10c>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d113      	bne.n	8008c26 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	695b      	ldr	r3, [r3, #20]
 8008c12:	011b      	lsls	r3, r3, #4
 8008c14:	693a      	ldr	r2, [r7, #16]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	699b      	ldr	r3, [r3, #24]
 8008c1e:	011b      	lsls	r3, r3, #4
 8008c20:	693a      	ldr	r2, [r7, #16]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	693a      	ldr	r2, [r7, #16]
 8008c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	685a      	ldr	r2, [r3, #4]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	697a      	ldr	r2, [r7, #20]
 8008c3e:	621a      	str	r2, [r3, #32]
}
 8008c40:	bf00      	nop
 8008c42:	371c      	adds	r7, #28
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr
 8008c4c:	40012c00 	.word	0x40012c00
 8008c50:	40013400 	.word	0x40013400
 8008c54:	40014000 	.word	0x40014000
 8008c58:	40014400 	.word	0x40014400
 8008c5c:	40014800 	.word	0x40014800

08008c60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a1b      	ldr	r3, [r3, #32]
 8008c7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	021b      	lsls	r3, r3, #8
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	031b      	lsls	r3, r3, #12
 8008cb6:	693a      	ldr	r2, [r7, #16]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a18      	ldr	r2, [pc, #96]	; (8008d20 <TIM_OC4_SetConfig+0xc0>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d00f      	beq.n	8008ce4 <TIM_OC4_SetConfig+0x84>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a17      	ldr	r2, [pc, #92]	; (8008d24 <TIM_OC4_SetConfig+0xc4>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d00b      	beq.n	8008ce4 <TIM_OC4_SetConfig+0x84>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a16      	ldr	r2, [pc, #88]	; (8008d28 <TIM_OC4_SetConfig+0xc8>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d007      	beq.n	8008ce4 <TIM_OC4_SetConfig+0x84>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a15      	ldr	r2, [pc, #84]	; (8008d2c <TIM_OC4_SetConfig+0xcc>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d003      	beq.n	8008ce4 <TIM_OC4_SetConfig+0x84>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a14      	ldr	r2, [pc, #80]	; (8008d30 <TIM_OC4_SetConfig+0xd0>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d109      	bne.n	8008cf8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	695b      	ldr	r3, [r3, #20]
 8008cf0:	019b      	lsls	r3, r3, #6
 8008cf2:	697a      	ldr	r2, [r7, #20]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	697a      	ldr	r2, [r7, #20]
 8008cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	621a      	str	r2, [r3, #32]
}
 8008d12:	bf00      	nop
 8008d14:	371c      	adds	r7, #28
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	40012c00 	.word	0x40012c00
 8008d24:	40013400 	.word	0x40013400
 8008d28:	40014000 	.word	0x40014000
 8008d2c:	40014400 	.word	0x40014400
 8008d30:	40014800 	.word	0x40014800

08008d34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b087      	sub	sp, #28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a1b      	ldr	r3, [r3, #32]
 8008d4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008d78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	041b      	lsls	r3, r3, #16
 8008d80:	693a      	ldr	r2, [r7, #16]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a17      	ldr	r2, [pc, #92]	; (8008de8 <TIM_OC5_SetConfig+0xb4>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d00f      	beq.n	8008dae <TIM_OC5_SetConfig+0x7a>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a16      	ldr	r2, [pc, #88]	; (8008dec <TIM_OC5_SetConfig+0xb8>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d00b      	beq.n	8008dae <TIM_OC5_SetConfig+0x7a>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a15      	ldr	r2, [pc, #84]	; (8008df0 <TIM_OC5_SetConfig+0xbc>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d007      	beq.n	8008dae <TIM_OC5_SetConfig+0x7a>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a14      	ldr	r2, [pc, #80]	; (8008df4 <TIM_OC5_SetConfig+0xc0>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d003      	beq.n	8008dae <TIM_OC5_SetConfig+0x7a>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a13      	ldr	r2, [pc, #76]	; (8008df8 <TIM_OC5_SetConfig+0xc4>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d109      	bne.n	8008dc2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008db4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	695b      	ldr	r3, [r3, #20]
 8008dba:	021b      	lsls	r3, r3, #8
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	697a      	ldr	r2, [r7, #20]
 8008dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	693a      	ldr	r2, [r7, #16]
 8008dda:	621a      	str	r2, [r3, #32]
}
 8008ddc:	bf00      	nop
 8008dde:	371c      	adds	r7, #28
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	40012c00 	.word	0x40012c00
 8008dec:	40013400 	.word	0x40013400
 8008df0:	40014000 	.word	0x40014000
 8008df4:	40014400 	.word	0x40014400
 8008df8:	40014800 	.word	0x40014800

08008dfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b087      	sub	sp, #28
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a1b      	ldr	r3, [r3, #32]
 8008e0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a1b      	ldr	r3, [r3, #32]
 8008e16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	021b      	lsls	r3, r3, #8
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	051b      	lsls	r3, r3, #20
 8008e4a:	693a      	ldr	r2, [r7, #16]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a18      	ldr	r2, [pc, #96]	; (8008eb4 <TIM_OC6_SetConfig+0xb8>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d00f      	beq.n	8008e78 <TIM_OC6_SetConfig+0x7c>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a17      	ldr	r2, [pc, #92]	; (8008eb8 <TIM_OC6_SetConfig+0xbc>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d00b      	beq.n	8008e78 <TIM_OC6_SetConfig+0x7c>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a16      	ldr	r2, [pc, #88]	; (8008ebc <TIM_OC6_SetConfig+0xc0>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d007      	beq.n	8008e78 <TIM_OC6_SetConfig+0x7c>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a15      	ldr	r2, [pc, #84]	; (8008ec0 <TIM_OC6_SetConfig+0xc4>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d003      	beq.n	8008e78 <TIM_OC6_SetConfig+0x7c>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a14      	ldr	r2, [pc, #80]	; (8008ec4 <TIM_OC6_SetConfig+0xc8>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d109      	bne.n	8008e8c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	029b      	lsls	r3, r3, #10
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	697a      	ldr	r2, [r7, #20]
 8008e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	685a      	ldr	r2, [r3, #4]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	621a      	str	r2, [r3, #32]
}
 8008ea6:	bf00      	nop
 8008ea8:	371c      	adds	r7, #28
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	40012c00 	.word	0x40012c00
 8008eb8:	40013400 	.word	0x40013400
 8008ebc:	40014000 	.word	0x40014000
 8008ec0:	40014400 	.word	0x40014400
 8008ec4:	40014800 	.word	0x40014800

08008ec8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b087      	sub	sp, #28
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6a1b      	ldr	r3, [r3, #32]
 8008ed8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6a1b      	ldr	r3, [r3, #32]
 8008ede:	f023 0201 	bic.w	r2, r3, #1
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	699b      	ldr	r3, [r3, #24]
 8008eea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	011b      	lsls	r3, r3, #4
 8008ef8:	693a      	ldr	r2, [r7, #16]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	f023 030a 	bic.w	r3, r3, #10
 8008f04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f06:	697a      	ldr	r2, [r7, #20]
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	693a      	ldr	r2, [r7, #16]
 8008f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	621a      	str	r2, [r3, #32]
}
 8008f1a:	bf00      	nop
 8008f1c:	371c      	adds	r7, #28
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr

08008f26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f26:	b480      	push	{r7}
 8008f28:	b087      	sub	sp, #28
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	60f8      	str	r0, [r7, #12]
 8008f2e:	60b9      	str	r1, [r7, #8]
 8008f30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	f023 0210 	bic.w	r2, r3, #16
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	699b      	ldr	r3, [r3, #24]
 8008f42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6a1b      	ldr	r3, [r3, #32]
 8008f48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	031b      	lsls	r3, r3, #12
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	011b      	lsls	r3, r3, #4
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	697a      	ldr	r2, [r7, #20]
 8008f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	621a      	str	r2, [r3, #32]
}
 8008f7a:	bf00      	nop
 8008f7c:	371c      	adds	r7, #28
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr

08008f86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f86:	b480      	push	{r7}
 8008f88:	b085      	sub	sp, #20
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
 8008f8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	f043 0307 	orr.w	r3, r3, #7
 8008fa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	609a      	str	r2, [r3, #8]
}
 8008fb0:	bf00      	nop
 8008fb2:	3714      	adds	r7, #20
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b087      	sub	sp, #28
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
 8008fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	021a      	lsls	r2, r3, #8
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	431a      	orrs	r2, r3
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	697a      	ldr	r2, [r7, #20]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	697a      	ldr	r2, [r7, #20]
 8008fee:	609a      	str	r2, [r3, #8]
}
 8008ff0:	bf00      	nop
 8008ff2:	371c      	adds	r7, #28
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	f003 031f 	and.w	r3, r3, #31
 800900e:	2201      	movs	r2, #1
 8009010:	fa02 f303 	lsl.w	r3, r2, r3
 8009014:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6a1a      	ldr	r2, [r3, #32]
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	43db      	mvns	r3, r3
 800901e:	401a      	ands	r2, r3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	6a1a      	ldr	r2, [r3, #32]
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	f003 031f 	and.w	r3, r3, #31
 800902e:	6879      	ldr	r1, [r7, #4]
 8009030:	fa01 f303 	lsl.w	r3, r1, r3
 8009034:	431a      	orrs	r2, r3
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	621a      	str	r2, [r3, #32]
}
 800903a:	bf00      	nop
 800903c:	371c      	adds	r7, #28
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
	...

08009048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009058:	2b01      	cmp	r3, #1
 800905a:	d101      	bne.n	8009060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800905c:	2302      	movs	r3, #2
 800905e:	e068      	b.n	8009132 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2202      	movs	r2, #2
 800906c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a2e      	ldr	r2, [pc, #184]	; (8009140 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d004      	beq.n	8009094 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a2d      	ldr	r2, [pc, #180]	; (8009144 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d108      	bne.n	80090a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800909a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	4313      	orrs	r3, r2
 80090a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	68fa      	ldr	r2, [r7, #12]
 80090b4:	4313      	orrs	r3, r2
 80090b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	68fa      	ldr	r2, [r7, #12]
 80090be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a1e      	ldr	r2, [pc, #120]	; (8009140 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d01d      	beq.n	8009106 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090d2:	d018      	beq.n	8009106 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a1b      	ldr	r2, [pc, #108]	; (8009148 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d013      	beq.n	8009106 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a1a      	ldr	r2, [pc, #104]	; (800914c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d00e      	beq.n	8009106 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a18      	ldr	r2, [pc, #96]	; (8009150 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d009      	beq.n	8009106 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a13      	ldr	r2, [pc, #76]	; (8009144 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d004      	beq.n	8009106 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a14      	ldr	r2, [pc, #80]	; (8009154 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d10c      	bne.n	8009120 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800910c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	4313      	orrs	r3, r2
 8009116:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68ba      	ldr	r2, [r7, #8]
 800911e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3714      	adds	r7, #20
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	40012c00 	.word	0x40012c00
 8009144:	40013400 	.word	0x40013400
 8009148:	40000400 	.word	0x40000400
 800914c:	40000800 	.word	0x40000800
 8009150:	40000c00 	.word	0x40000c00
 8009154:	40014000 	.word	0x40014000

08009158 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d101      	bne.n	800916a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e042      	b.n	80091f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009170:	2b00      	cmp	r3, #0
 8009172:	d106      	bne.n	8009182 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f7fb faa1 	bl	80046c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2224      	movs	r2, #36	; 0x24
 8009186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f022 0201 	bic.w	r2, r2, #1
 8009198:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f93a 	bl	8009414 <UART_SetConfig>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d101      	bne.n	80091aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e022      	b.n	80091f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d002      	beq.n	80091b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fc2a 	bl	8009a0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	685a      	ldr	r2, [r3, #4]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	689a      	ldr	r2, [r3, #8]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f042 0201 	orr.w	r2, r2, #1
 80091e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 fcb1 	bl	8009b50 <UART_CheckIdleState>
 80091ee:	4603      	mov	r3, r0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b08a      	sub	sp, #40	; 0x28
 80091fc:	af02      	add	r7, sp, #8
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	603b      	str	r3, [r7, #0]
 8009204:	4613      	mov	r3, r2
 8009206:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800920e:	2b20      	cmp	r3, #32
 8009210:	f040 8084 	bne.w	800931c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d002      	beq.n	8009220 <HAL_UART_Transmit+0x28>
 800921a:	88fb      	ldrh	r3, [r7, #6]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d101      	bne.n	8009224 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	e07c      	b.n	800931e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800922a:	2b01      	cmp	r3, #1
 800922c:	d101      	bne.n	8009232 <HAL_UART_Transmit+0x3a>
 800922e:	2302      	movs	r3, #2
 8009230:	e075      	b.n	800931e <HAL_UART_Transmit+0x126>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2200      	movs	r2, #0
 800923e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2221      	movs	r2, #33	; 0x21
 8009246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800924a:	f7fb fd7b 	bl	8004d44 <HAL_GetTick>
 800924e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	88fa      	ldrh	r2, [r7, #6]
 8009254:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	88fa      	ldrh	r2, [r7, #6]
 800925c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009268:	d108      	bne.n	800927c <HAL_UART_Transmit+0x84>
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d104      	bne.n	800927c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009272:	2300      	movs	r3, #0
 8009274:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	61bb      	str	r3, [r7, #24]
 800927a:	e003      	b.n	8009284 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009280:	2300      	movs	r3, #0
 8009282:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800928c:	e02d      	b.n	80092ea <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	2200      	movs	r2, #0
 8009296:	2180      	movs	r1, #128	; 0x80
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f000 fca4 	bl	8009be6 <UART_WaitOnFlagUntilTimeout>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d001      	beq.n	80092a8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80092a4:	2303      	movs	r3, #3
 80092a6:	e03a      	b.n	800931e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d10b      	bne.n	80092c6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	881a      	ldrh	r2, [r3, #0]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092ba:	b292      	uxth	r2, r2
 80092bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	3302      	adds	r3, #2
 80092c2:	61bb      	str	r3, [r7, #24]
 80092c4:	e008      	b.n	80092d8 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	781a      	ldrb	r2, [r3, #0]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	b292      	uxth	r2, r2
 80092d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	3301      	adds	r3, #1
 80092d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80092de:	b29b      	uxth	r3, r3
 80092e0:	3b01      	subs	r3, #1
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1cb      	bne.n	800928e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	2200      	movs	r2, #0
 80092fe:	2140      	movs	r1, #64	; 0x40
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f000 fc70 	bl	8009be6 <UART_WaitOnFlagUntilTimeout>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d001      	beq.n	8009310 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800930c:	2303      	movs	r3, #3
 800930e:	e006      	b.n	800931e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2220      	movs	r2, #32
 8009314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009318:	2300      	movs	r3, #0
 800931a:	e000      	b.n	800931e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800931c:	2302      	movs	r3, #2
  }
}
 800931e:	4618      	mov	r0, r3
 8009320:	3720      	adds	r7, #32
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
	...

08009328 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b08a      	sub	sp, #40	; 0x28
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	4613      	mov	r3, r2
 8009334:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800933c:	2b20      	cmp	r3, #32
 800933e:	d142      	bne.n	80093c6 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d002      	beq.n	800934c <HAL_UART_Receive_DMA+0x24>
 8009346:	88fb      	ldrh	r3, [r7, #6]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d101      	bne.n	8009350 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	e03b      	b.n	80093c8 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009356:	2b01      	cmp	r3, #1
 8009358:	d101      	bne.n	800935e <HAL_UART_Receive_DMA+0x36>
 800935a:	2302      	movs	r3, #2
 800935c:	e034      	b.n	80093c8 <HAL_UART_Receive_DMA+0xa0>
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2201      	movs	r2, #1
 8009362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a17      	ldr	r2, [pc, #92]	; (80093d0 <HAL_UART_Receive_DMA+0xa8>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d01f      	beq.n	80093b6 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009380:	2b00      	cmp	r3, #0
 8009382:	d018      	beq.n	80093b6 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	e853 3f00 	ldrex	r3, [r3]
 8009390:	613b      	str	r3, [r7, #16]
   return(result);
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009398:	627b      	str	r3, [r7, #36]	; 0x24
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	461a      	mov	r2, r3
 80093a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a2:	623b      	str	r3, [r7, #32]
 80093a4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a6:	69f9      	ldr	r1, [r7, #28]
 80093a8:	6a3a      	ldr	r2, [r7, #32]
 80093aa:	e841 2300 	strex	r3, r2, [r1]
 80093ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1e6      	bne.n	8009384 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80093b6:	88fb      	ldrh	r3, [r7, #6]
 80093b8:	461a      	mov	r2, r3
 80093ba:	68b9      	ldr	r1, [r7, #8]
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f000 fcdb 	bl	8009d78 <UART_Start_Receive_DMA>
 80093c2:	4603      	mov	r3, r0
 80093c4:	e000      	b.n	80093c8 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80093c6:	2302      	movs	r3, #2
  }
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3728      	adds	r7, #40	; 0x28
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	40008000 	.word	0x40008000

080093d4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80093dc:	bf00      	nop
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80093f0:	bf00      	nop
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	460b      	mov	r3, r1
 8009406:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009418:	b08c      	sub	sp, #48	; 0x30
 800941a:	af00      	add	r7, sp, #0
 800941c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800941e:	2300      	movs	r3, #0
 8009420:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	689a      	ldr	r2, [r3, #8]
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	431a      	orrs	r2, r3
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	695b      	ldr	r3, [r3, #20]
 8009432:	431a      	orrs	r2, r3
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	69db      	ldr	r3, [r3, #28]
 8009438:	4313      	orrs	r3, r2
 800943a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	4baa      	ldr	r3, [pc, #680]	; (80096ec <UART_SetConfig+0x2d8>)
 8009444:	4013      	ands	r3, r2
 8009446:	697a      	ldr	r2, [r7, #20]
 8009448:	6812      	ldr	r2, [r2, #0]
 800944a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800944c:	430b      	orrs	r3, r1
 800944e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	68da      	ldr	r2, [r3, #12]
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	430a      	orrs	r2, r1
 8009464:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	699b      	ldr	r3, [r3, #24]
 800946a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a9f      	ldr	r2, [pc, #636]	; (80096f0 <UART_SetConfig+0x2dc>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d004      	beq.n	8009480 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	6a1b      	ldr	r3, [r3, #32]
 800947a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800947c:	4313      	orrs	r3, r2
 800947e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800948a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800948e:	697a      	ldr	r2, [r7, #20]
 8009490:	6812      	ldr	r2, [r2, #0]
 8009492:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009494:	430b      	orrs	r3, r1
 8009496:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800949e:	f023 010f 	bic.w	r1, r3, #15
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	430a      	orrs	r2, r1
 80094ac:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a90      	ldr	r2, [pc, #576]	; (80096f4 <UART_SetConfig+0x2e0>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d125      	bne.n	8009504 <UART_SetConfig+0xf0>
 80094b8:	4b8f      	ldr	r3, [pc, #572]	; (80096f8 <UART_SetConfig+0x2e4>)
 80094ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094be:	f003 0303 	and.w	r3, r3, #3
 80094c2:	2b03      	cmp	r3, #3
 80094c4:	d81a      	bhi.n	80094fc <UART_SetConfig+0xe8>
 80094c6:	a201      	add	r2, pc, #4	; (adr r2, 80094cc <UART_SetConfig+0xb8>)
 80094c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094cc:	080094dd 	.word	0x080094dd
 80094d0:	080094ed 	.word	0x080094ed
 80094d4:	080094e5 	.word	0x080094e5
 80094d8:	080094f5 	.word	0x080094f5
 80094dc:	2301      	movs	r3, #1
 80094de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094e2:	e116      	b.n	8009712 <UART_SetConfig+0x2fe>
 80094e4:	2302      	movs	r3, #2
 80094e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094ea:	e112      	b.n	8009712 <UART_SetConfig+0x2fe>
 80094ec:	2304      	movs	r3, #4
 80094ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094f2:	e10e      	b.n	8009712 <UART_SetConfig+0x2fe>
 80094f4:	2308      	movs	r3, #8
 80094f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094fa:	e10a      	b.n	8009712 <UART_SetConfig+0x2fe>
 80094fc:	2310      	movs	r3, #16
 80094fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009502:	e106      	b.n	8009712 <UART_SetConfig+0x2fe>
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a7c      	ldr	r2, [pc, #496]	; (80096fc <UART_SetConfig+0x2e8>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d138      	bne.n	8009580 <UART_SetConfig+0x16c>
 800950e:	4b7a      	ldr	r3, [pc, #488]	; (80096f8 <UART_SetConfig+0x2e4>)
 8009510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009514:	f003 030c 	and.w	r3, r3, #12
 8009518:	2b0c      	cmp	r3, #12
 800951a:	d82d      	bhi.n	8009578 <UART_SetConfig+0x164>
 800951c:	a201      	add	r2, pc, #4	; (adr r2, 8009524 <UART_SetConfig+0x110>)
 800951e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009522:	bf00      	nop
 8009524:	08009559 	.word	0x08009559
 8009528:	08009579 	.word	0x08009579
 800952c:	08009579 	.word	0x08009579
 8009530:	08009579 	.word	0x08009579
 8009534:	08009569 	.word	0x08009569
 8009538:	08009579 	.word	0x08009579
 800953c:	08009579 	.word	0x08009579
 8009540:	08009579 	.word	0x08009579
 8009544:	08009561 	.word	0x08009561
 8009548:	08009579 	.word	0x08009579
 800954c:	08009579 	.word	0x08009579
 8009550:	08009579 	.word	0x08009579
 8009554:	08009571 	.word	0x08009571
 8009558:	2300      	movs	r3, #0
 800955a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800955e:	e0d8      	b.n	8009712 <UART_SetConfig+0x2fe>
 8009560:	2302      	movs	r3, #2
 8009562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009566:	e0d4      	b.n	8009712 <UART_SetConfig+0x2fe>
 8009568:	2304      	movs	r3, #4
 800956a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800956e:	e0d0      	b.n	8009712 <UART_SetConfig+0x2fe>
 8009570:	2308      	movs	r3, #8
 8009572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009576:	e0cc      	b.n	8009712 <UART_SetConfig+0x2fe>
 8009578:	2310      	movs	r3, #16
 800957a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800957e:	e0c8      	b.n	8009712 <UART_SetConfig+0x2fe>
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a5e      	ldr	r2, [pc, #376]	; (8009700 <UART_SetConfig+0x2ec>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d125      	bne.n	80095d6 <UART_SetConfig+0x1c2>
 800958a:	4b5b      	ldr	r3, [pc, #364]	; (80096f8 <UART_SetConfig+0x2e4>)
 800958c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009590:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009594:	2b30      	cmp	r3, #48	; 0x30
 8009596:	d016      	beq.n	80095c6 <UART_SetConfig+0x1b2>
 8009598:	2b30      	cmp	r3, #48	; 0x30
 800959a:	d818      	bhi.n	80095ce <UART_SetConfig+0x1ba>
 800959c:	2b20      	cmp	r3, #32
 800959e:	d00a      	beq.n	80095b6 <UART_SetConfig+0x1a2>
 80095a0:	2b20      	cmp	r3, #32
 80095a2:	d814      	bhi.n	80095ce <UART_SetConfig+0x1ba>
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d002      	beq.n	80095ae <UART_SetConfig+0x19a>
 80095a8:	2b10      	cmp	r3, #16
 80095aa:	d008      	beq.n	80095be <UART_SetConfig+0x1aa>
 80095ac:	e00f      	b.n	80095ce <UART_SetConfig+0x1ba>
 80095ae:	2300      	movs	r3, #0
 80095b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095b4:	e0ad      	b.n	8009712 <UART_SetConfig+0x2fe>
 80095b6:	2302      	movs	r3, #2
 80095b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095bc:	e0a9      	b.n	8009712 <UART_SetConfig+0x2fe>
 80095be:	2304      	movs	r3, #4
 80095c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095c4:	e0a5      	b.n	8009712 <UART_SetConfig+0x2fe>
 80095c6:	2308      	movs	r3, #8
 80095c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095cc:	e0a1      	b.n	8009712 <UART_SetConfig+0x2fe>
 80095ce:	2310      	movs	r3, #16
 80095d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095d4:	e09d      	b.n	8009712 <UART_SetConfig+0x2fe>
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a4a      	ldr	r2, [pc, #296]	; (8009704 <UART_SetConfig+0x2f0>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d125      	bne.n	800962c <UART_SetConfig+0x218>
 80095e0:	4b45      	ldr	r3, [pc, #276]	; (80096f8 <UART_SetConfig+0x2e4>)
 80095e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80095ea:	2bc0      	cmp	r3, #192	; 0xc0
 80095ec:	d016      	beq.n	800961c <UART_SetConfig+0x208>
 80095ee:	2bc0      	cmp	r3, #192	; 0xc0
 80095f0:	d818      	bhi.n	8009624 <UART_SetConfig+0x210>
 80095f2:	2b80      	cmp	r3, #128	; 0x80
 80095f4:	d00a      	beq.n	800960c <UART_SetConfig+0x1f8>
 80095f6:	2b80      	cmp	r3, #128	; 0x80
 80095f8:	d814      	bhi.n	8009624 <UART_SetConfig+0x210>
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d002      	beq.n	8009604 <UART_SetConfig+0x1f0>
 80095fe:	2b40      	cmp	r3, #64	; 0x40
 8009600:	d008      	beq.n	8009614 <UART_SetConfig+0x200>
 8009602:	e00f      	b.n	8009624 <UART_SetConfig+0x210>
 8009604:	2300      	movs	r3, #0
 8009606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800960a:	e082      	b.n	8009712 <UART_SetConfig+0x2fe>
 800960c:	2302      	movs	r3, #2
 800960e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009612:	e07e      	b.n	8009712 <UART_SetConfig+0x2fe>
 8009614:	2304      	movs	r3, #4
 8009616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800961a:	e07a      	b.n	8009712 <UART_SetConfig+0x2fe>
 800961c:	2308      	movs	r3, #8
 800961e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009622:	e076      	b.n	8009712 <UART_SetConfig+0x2fe>
 8009624:	2310      	movs	r3, #16
 8009626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800962a:	e072      	b.n	8009712 <UART_SetConfig+0x2fe>
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a35      	ldr	r2, [pc, #212]	; (8009708 <UART_SetConfig+0x2f4>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d12a      	bne.n	800968c <UART_SetConfig+0x278>
 8009636:	4b30      	ldr	r3, [pc, #192]	; (80096f8 <UART_SetConfig+0x2e4>)
 8009638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800963c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009644:	d01a      	beq.n	800967c <UART_SetConfig+0x268>
 8009646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800964a:	d81b      	bhi.n	8009684 <UART_SetConfig+0x270>
 800964c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009650:	d00c      	beq.n	800966c <UART_SetConfig+0x258>
 8009652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009656:	d815      	bhi.n	8009684 <UART_SetConfig+0x270>
 8009658:	2b00      	cmp	r3, #0
 800965a:	d003      	beq.n	8009664 <UART_SetConfig+0x250>
 800965c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009660:	d008      	beq.n	8009674 <UART_SetConfig+0x260>
 8009662:	e00f      	b.n	8009684 <UART_SetConfig+0x270>
 8009664:	2300      	movs	r3, #0
 8009666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800966a:	e052      	b.n	8009712 <UART_SetConfig+0x2fe>
 800966c:	2302      	movs	r3, #2
 800966e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009672:	e04e      	b.n	8009712 <UART_SetConfig+0x2fe>
 8009674:	2304      	movs	r3, #4
 8009676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800967a:	e04a      	b.n	8009712 <UART_SetConfig+0x2fe>
 800967c:	2308      	movs	r3, #8
 800967e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009682:	e046      	b.n	8009712 <UART_SetConfig+0x2fe>
 8009684:	2310      	movs	r3, #16
 8009686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800968a:	e042      	b.n	8009712 <UART_SetConfig+0x2fe>
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a17      	ldr	r2, [pc, #92]	; (80096f0 <UART_SetConfig+0x2dc>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d13a      	bne.n	800970c <UART_SetConfig+0x2f8>
 8009696:	4b18      	ldr	r3, [pc, #96]	; (80096f8 <UART_SetConfig+0x2e4>)
 8009698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800969c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80096a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80096a4:	d01a      	beq.n	80096dc <UART_SetConfig+0x2c8>
 80096a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80096aa:	d81b      	bhi.n	80096e4 <UART_SetConfig+0x2d0>
 80096ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096b0:	d00c      	beq.n	80096cc <UART_SetConfig+0x2b8>
 80096b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096b6:	d815      	bhi.n	80096e4 <UART_SetConfig+0x2d0>
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d003      	beq.n	80096c4 <UART_SetConfig+0x2b0>
 80096bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096c0:	d008      	beq.n	80096d4 <UART_SetConfig+0x2c0>
 80096c2:	e00f      	b.n	80096e4 <UART_SetConfig+0x2d0>
 80096c4:	2300      	movs	r3, #0
 80096c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096ca:	e022      	b.n	8009712 <UART_SetConfig+0x2fe>
 80096cc:	2302      	movs	r3, #2
 80096ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096d2:	e01e      	b.n	8009712 <UART_SetConfig+0x2fe>
 80096d4:	2304      	movs	r3, #4
 80096d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096da:	e01a      	b.n	8009712 <UART_SetConfig+0x2fe>
 80096dc:	2308      	movs	r3, #8
 80096de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096e2:	e016      	b.n	8009712 <UART_SetConfig+0x2fe>
 80096e4:	2310      	movs	r3, #16
 80096e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096ea:	e012      	b.n	8009712 <UART_SetConfig+0x2fe>
 80096ec:	cfff69f3 	.word	0xcfff69f3
 80096f0:	40008000 	.word	0x40008000
 80096f4:	40013800 	.word	0x40013800
 80096f8:	40021000 	.word	0x40021000
 80096fc:	40004400 	.word	0x40004400
 8009700:	40004800 	.word	0x40004800
 8009704:	40004c00 	.word	0x40004c00
 8009708:	40005000 	.word	0x40005000
 800970c:	2310      	movs	r3, #16
 800970e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4aae      	ldr	r2, [pc, #696]	; (80099d0 <UART_SetConfig+0x5bc>)
 8009718:	4293      	cmp	r3, r2
 800971a:	f040 8097 	bne.w	800984c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800971e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009722:	2b08      	cmp	r3, #8
 8009724:	d823      	bhi.n	800976e <UART_SetConfig+0x35a>
 8009726:	a201      	add	r2, pc, #4	; (adr r2, 800972c <UART_SetConfig+0x318>)
 8009728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972c:	08009751 	.word	0x08009751
 8009730:	0800976f 	.word	0x0800976f
 8009734:	08009759 	.word	0x08009759
 8009738:	0800976f 	.word	0x0800976f
 800973c:	0800975f 	.word	0x0800975f
 8009740:	0800976f 	.word	0x0800976f
 8009744:	0800976f 	.word	0x0800976f
 8009748:	0800976f 	.word	0x0800976f
 800974c:	08009767 	.word	0x08009767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009750:	f7fd fe38 	bl	80073c4 <HAL_RCC_GetPCLK1Freq>
 8009754:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009756:	e010      	b.n	800977a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009758:	4b9e      	ldr	r3, [pc, #632]	; (80099d4 <UART_SetConfig+0x5c0>)
 800975a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800975c:	e00d      	b.n	800977a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800975e:	f7fd fd99 	bl	8007294 <HAL_RCC_GetSysClockFreq>
 8009762:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009764:	e009      	b.n	800977a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800976a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800976c:	e005      	b.n	800977a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800976e:	2300      	movs	r3, #0
 8009770:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009778:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800977a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977c:	2b00      	cmp	r3, #0
 800977e:	f000 8130 	beq.w	80099e2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009786:	4a94      	ldr	r2, [pc, #592]	; (80099d8 <UART_SetConfig+0x5c4>)
 8009788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800978c:	461a      	mov	r2, r3
 800978e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009790:	fbb3 f3f2 	udiv	r3, r3, r2
 8009794:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	685a      	ldr	r2, [r3, #4]
 800979a:	4613      	mov	r3, r2
 800979c:	005b      	lsls	r3, r3, #1
 800979e:	4413      	add	r3, r2
 80097a0:	69ba      	ldr	r2, [r7, #24]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d305      	bcc.n	80097b2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097ac:	69ba      	ldr	r2, [r7, #24]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d903      	bls.n	80097ba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80097b8:	e113      	b.n	80099e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097bc:	2200      	movs	r2, #0
 80097be:	60bb      	str	r3, [r7, #8]
 80097c0:	60fa      	str	r2, [r7, #12]
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c6:	4a84      	ldr	r2, [pc, #528]	; (80099d8 <UART_SetConfig+0x5c4>)
 80097c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	2200      	movs	r2, #0
 80097d0:	603b      	str	r3, [r7, #0]
 80097d2:	607a      	str	r2, [r7, #4]
 80097d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80097dc:	f7f7 fa4c 	bl	8000c78 <__aeabi_uldivmod>
 80097e0:	4602      	mov	r2, r0
 80097e2:	460b      	mov	r3, r1
 80097e4:	4610      	mov	r0, r2
 80097e6:	4619      	mov	r1, r3
 80097e8:	f04f 0200 	mov.w	r2, #0
 80097ec:	f04f 0300 	mov.w	r3, #0
 80097f0:	020b      	lsls	r3, r1, #8
 80097f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80097f6:	0202      	lsls	r2, r0, #8
 80097f8:	6979      	ldr	r1, [r7, #20]
 80097fa:	6849      	ldr	r1, [r1, #4]
 80097fc:	0849      	lsrs	r1, r1, #1
 80097fe:	2000      	movs	r0, #0
 8009800:	460c      	mov	r4, r1
 8009802:	4605      	mov	r5, r0
 8009804:	eb12 0804 	adds.w	r8, r2, r4
 8009808:	eb43 0905 	adc.w	r9, r3, r5
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	469a      	mov	sl, r3
 8009814:	4693      	mov	fp, r2
 8009816:	4652      	mov	r2, sl
 8009818:	465b      	mov	r3, fp
 800981a:	4640      	mov	r0, r8
 800981c:	4649      	mov	r1, r9
 800981e:	f7f7 fa2b 	bl	8000c78 <__aeabi_uldivmod>
 8009822:	4602      	mov	r2, r0
 8009824:	460b      	mov	r3, r1
 8009826:	4613      	mov	r3, r2
 8009828:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800982a:	6a3b      	ldr	r3, [r7, #32]
 800982c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009830:	d308      	bcc.n	8009844 <UART_SetConfig+0x430>
 8009832:	6a3b      	ldr	r3, [r7, #32]
 8009834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009838:	d204      	bcs.n	8009844 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	6a3a      	ldr	r2, [r7, #32]
 8009840:	60da      	str	r2, [r3, #12]
 8009842:	e0ce      	b.n	80099e2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800984a:	e0ca      	b.n	80099e2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	69db      	ldr	r3, [r3, #28]
 8009850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009854:	d166      	bne.n	8009924 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009856:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800985a:	2b08      	cmp	r3, #8
 800985c:	d827      	bhi.n	80098ae <UART_SetConfig+0x49a>
 800985e:	a201      	add	r2, pc, #4	; (adr r2, 8009864 <UART_SetConfig+0x450>)
 8009860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009864:	08009889 	.word	0x08009889
 8009868:	08009891 	.word	0x08009891
 800986c:	08009899 	.word	0x08009899
 8009870:	080098af 	.word	0x080098af
 8009874:	0800989f 	.word	0x0800989f
 8009878:	080098af 	.word	0x080098af
 800987c:	080098af 	.word	0x080098af
 8009880:	080098af 	.word	0x080098af
 8009884:	080098a7 	.word	0x080098a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009888:	f7fd fd9c 	bl	80073c4 <HAL_RCC_GetPCLK1Freq>
 800988c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800988e:	e014      	b.n	80098ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009890:	f7fd fdae 	bl	80073f0 <HAL_RCC_GetPCLK2Freq>
 8009894:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009896:	e010      	b.n	80098ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009898:	4b4e      	ldr	r3, [pc, #312]	; (80099d4 <UART_SetConfig+0x5c0>)
 800989a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800989c:	e00d      	b.n	80098ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800989e:	f7fd fcf9 	bl	8007294 <HAL_RCC_GetSysClockFreq>
 80098a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80098a4:	e009      	b.n	80098ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80098ac:	e005      	b.n	80098ba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80098ae:	2300      	movs	r3, #0
 80098b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80098b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80098ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f000 8090 	beq.w	80099e2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c6:	4a44      	ldr	r2, [pc, #272]	; (80099d8 <UART_SetConfig+0x5c4>)
 80098c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098cc:	461a      	mov	r2, r3
 80098ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80098d4:	005a      	lsls	r2, r3, #1
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	085b      	lsrs	r3, r3, #1
 80098dc:	441a      	add	r2, r3
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80098e6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098e8:	6a3b      	ldr	r3, [r7, #32]
 80098ea:	2b0f      	cmp	r3, #15
 80098ec:	d916      	bls.n	800991c <UART_SetConfig+0x508>
 80098ee:	6a3b      	ldr	r3, [r7, #32]
 80098f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098f4:	d212      	bcs.n	800991c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80098f6:	6a3b      	ldr	r3, [r7, #32]
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	f023 030f 	bic.w	r3, r3, #15
 80098fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009900:	6a3b      	ldr	r3, [r7, #32]
 8009902:	085b      	lsrs	r3, r3, #1
 8009904:	b29b      	uxth	r3, r3
 8009906:	f003 0307 	and.w	r3, r3, #7
 800990a:	b29a      	uxth	r2, r3
 800990c:	8bfb      	ldrh	r3, [r7, #30]
 800990e:	4313      	orrs	r3, r2
 8009910:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	8bfa      	ldrh	r2, [r7, #30]
 8009918:	60da      	str	r2, [r3, #12]
 800991a:	e062      	b.n	80099e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009922:	e05e      	b.n	80099e2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009924:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009928:	2b08      	cmp	r3, #8
 800992a:	d828      	bhi.n	800997e <UART_SetConfig+0x56a>
 800992c:	a201      	add	r2, pc, #4	; (adr r2, 8009934 <UART_SetConfig+0x520>)
 800992e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009932:	bf00      	nop
 8009934:	08009959 	.word	0x08009959
 8009938:	08009961 	.word	0x08009961
 800993c:	08009969 	.word	0x08009969
 8009940:	0800997f 	.word	0x0800997f
 8009944:	0800996f 	.word	0x0800996f
 8009948:	0800997f 	.word	0x0800997f
 800994c:	0800997f 	.word	0x0800997f
 8009950:	0800997f 	.word	0x0800997f
 8009954:	08009977 	.word	0x08009977
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009958:	f7fd fd34 	bl	80073c4 <HAL_RCC_GetPCLK1Freq>
 800995c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800995e:	e014      	b.n	800998a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009960:	f7fd fd46 	bl	80073f0 <HAL_RCC_GetPCLK2Freq>
 8009964:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009966:	e010      	b.n	800998a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009968:	4b1a      	ldr	r3, [pc, #104]	; (80099d4 <UART_SetConfig+0x5c0>)
 800996a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800996c:	e00d      	b.n	800998a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800996e:	f7fd fc91 	bl	8007294 <HAL_RCC_GetSysClockFreq>
 8009972:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009974:	e009      	b.n	800998a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800997a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800997c:	e005      	b.n	800998a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800997e:	2300      	movs	r3, #0
 8009980:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009988:	bf00      	nop
    }

    if (pclk != 0U)
 800998a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998c:	2b00      	cmp	r3, #0
 800998e:	d028      	beq.n	80099e2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009994:	4a10      	ldr	r2, [pc, #64]	; (80099d8 <UART_SetConfig+0x5c4>)
 8009996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800999a:	461a      	mov	r2, r3
 800999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999e:	fbb3 f2f2 	udiv	r2, r3, r2
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	085b      	lsrs	r3, r3, #1
 80099a8:	441a      	add	r2, r3
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80099b2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099b4:	6a3b      	ldr	r3, [r7, #32]
 80099b6:	2b0f      	cmp	r3, #15
 80099b8:	d910      	bls.n	80099dc <UART_SetConfig+0x5c8>
 80099ba:	6a3b      	ldr	r3, [r7, #32]
 80099bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099c0:	d20c      	bcs.n	80099dc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80099c2:	6a3b      	ldr	r3, [r7, #32]
 80099c4:	b29a      	uxth	r2, r3
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	60da      	str	r2, [r3, #12]
 80099cc:	e009      	b.n	80099e2 <UART_SetConfig+0x5ce>
 80099ce:	bf00      	nop
 80099d0:	40008000 	.word	0x40008000
 80099d4:	00f42400 	.word	0x00f42400
 80099d8:	0800e4f4 	.word	0x0800e4f4
      }
      else
      {
        ret = HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	2200      	movs	r2, #0
 80099f6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	2200      	movs	r2, #0
 80099fc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80099fe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3730      	adds	r7, #48	; 0x30
 8009a06:	46bd      	mov	sp, r7
 8009a08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009a0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a18:	f003 0301 	and.w	r3, r3, #1
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00a      	beq.n	8009a36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	430a      	orrs	r2, r1
 8009a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3a:	f003 0302 	and.w	r3, r3, #2
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00a      	beq.n	8009a58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	430a      	orrs	r2, r1
 8009a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a5c:	f003 0304 	and.w	r3, r3, #4
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00a      	beq.n	8009a7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	430a      	orrs	r2, r1
 8009a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a7e:	f003 0308 	and.w	r3, r3, #8
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00a      	beq.n	8009a9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	430a      	orrs	r2, r1
 8009a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa0:	f003 0310 	and.w	r3, r3, #16
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d00a      	beq.n	8009abe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	430a      	orrs	r2, r1
 8009abc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac2:	f003 0320 	and.w	r3, r3, #32
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00a      	beq.n	8009ae0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	430a      	orrs	r2, r1
 8009ade:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d01a      	beq.n	8009b22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	430a      	orrs	r2, r1
 8009b00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b0a:	d10a      	bne.n	8009b22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	430a      	orrs	r2, r1
 8009b20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00a      	beq.n	8009b44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	430a      	orrs	r2, r1
 8009b42:	605a      	str	r2, [r3, #4]
  }
}
 8009b44:	bf00      	nop
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b086      	sub	sp, #24
 8009b54:	af02      	add	r7, sp, #8
 8009b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b60:	f7fb f8f0 	bl	8004d44 <HAL_GetTick>
 8009b64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f003 0308 	and.w	r3, r3, #8
 8009b70:	2b08      	cmp	r3, #8
 8009b72:	d10e      	bne.n	8009b92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f82f 	bl	8009be6 <UART_WaitOnFlagUntilTimeout>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d001      	beq.n	8009b92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e025      	b.n	8009bde <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f003 0304 	and.w	r3, r3, #4
 8009b9c:	2b04      	cmp	r3, #4
 8009b9e:	d10e      	bne.n	8009bbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ba0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f819 	bl	8009be6 <UART_WaitOnFlagUntilTimeout>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d001      	beq.n	8009bbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bba:	2303      	movs	r3, #3
 8009bbc:	e00f      	b.n	8009bde <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2220      	movs	r2, #32
 8009bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2220      	movs	r2, #32
 8009bca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b09c      	sub	sp, #112	; 0x70
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	60f8      	str	r0, [r7, #12]
 8009bee:	60b9      	str	r1, [r7, #8]
 8009bf0:	603b      	str	r3, [r7, #0]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bf6:	e0a9      	b.n	8009d4c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bfe:	f000 80a5 	beq.w	8009d4c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c02:	f7fb f89f 	bl	8004d44 <HAL_GetTick>
 8009c06:	4602      	mov	r2, r0
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	1ad3      	subs	r3, r2, r3
 8009c0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d302      	bcc.n	8009c18 <UART_WaitOnFlagUntilTimeout+0x32>
 8009c12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d140      	bne.n	8009c9a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c20:	e853 3f00 	ldrex	r3, [r3]
 8009c24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c2c:	667b      	str	r3, [r7, #100]	; 0x64
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	461a      	mov	r2, r3
 8009c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c38:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009c3e:	e841 2300 	strex	r3, r2, [r1]
 8009c42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d1e6      	bne.n	8009c18 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	3308      	adds	r3, #8
 8009c50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c54:	e853 3f00 	ldrex	r3, [r3]
 8009c58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5c:	f023 0301 	bic.w	r3, r3, #1
 8009c60:	663b      	str	r3, [r7, #96]	; 0x60
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	3308      	adds	r3, #8
 8009c68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8009c6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009c70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c72:	e841 2300 	strex	r3, r2, [r1]
 8009c76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1e5      	bne.n	8009c4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2220      	movs	r2, #32
 8009c82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2220      	movs	r2, #32
 8009c8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009c96:	2303      	movs	r3, #3
 8009c98:	e069      	b.n	8009d6e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f003 0304 	and.w	r3, r3, #4
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d051      	beq.n	8009d4c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	69db      	ldr	r3, [r3, #28]
 8009cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cb6:	d149      	bne.n	8009d4c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009cc0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cca:	e853 3f00 	ldrex	r3, [r3]
 8009cce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009cd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8009ce2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ce6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ce8:	e841 2300 	strex	r3, r2, [r1]
 8009cec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d1e6      	bne.n	8009cc2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	3308      	adds	r3, #8
 8009cfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	e853 3f00 	ldrex	r3, [r3]
 8009d02:	613b      	str	r3, [r7, #16]
   return(result);
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	f023 0301 	bic.w	r3, r3, #1
 8009d0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	3308      	adds	r3, #8
 8009d12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009d14:	623a      	str	r2, [r7, #32]
 8009d16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d18:	69f9      	ldr	r1, [r7, #28]
 8009d1a:	6a3a      	ldr	r2, [r7, #32]
 8009d1c:	e841 2300 	strex	r3, r2, [r1]
 8009d20:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1e5      	bne.n	8009cf4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2220      	movs	r2, #32
 8009d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2220      	movs	r2, #32
 8009d34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2220      	movs	r2, #32
 8009d3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009d48:	2303      	movs	r3, #3
 8009d4a:	e010      	b.n	8009d6e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	69da      	ldr	r2, [r3, #28]
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	4013      	ands	r3, r2
 8009d56:	68ba      	ldr	r2, [r7, #8]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	bf0c      	ite	eq
 8009d5c:	2301      	moveq	r3, #1
 8009d5e:	2300      	movne	r3, #0
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	461a      	mov	r2, r3
 8009d64:	79fb      	ldrb	r3, [r7, #7]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	f43f af46 	beq.w	8009bf8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3770      	adds	r7, #112	; 0x70
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
	...

08009d78 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b096      	sub	sp, #88	; 0x58
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	4613      	mov	r3, r2
 8009d84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	68ba      	ldr	r2, [r7, #8]
 8009d8a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	88fa      	ldrh	r2, [r7, #6]
 8009d90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2222      	movs	r2, #34	; 0x22
 8009da0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d02c      	beq.n	8009e06 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009db0:	4a42      	ldr	r2, [pc, #264]	; (8009ebc <UART_Start_Receive_DMA+0x144>)
 8009db2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009db8:	4a41      	ldr	r2, [pc, #260]	; (8009ec0 <UART_Start_Receive_DMA+0x148>)
 8009dba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dc0:	4a40      	ldr	r2, [pc, #256]	; (8009ec4 <UART_Start_Receive_DMA+0x14c>)
 8009dc2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dc8:	2200      	movs	r2, #0
 8009dca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	3324      	adds	r3, #36	; 0x24
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ddc:	461a      	mov	r2, r3
 8009dde:	88fb      	ldrh	r3, [r7, #6]
 8009de0:	f7fb f99a 	bl	8005118 <HAL_DMA_Start_IT>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00d      	beq.n	8009e06 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2210      	movs	r2, #16
 8009dee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2220      	movs	r2, #32
 8009dfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	e055      	b.n	8009eb2 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d018      	beq.n	8009e48 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e1e:	e853 3f00 	ldrex	r3, [r3]
 8009e22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e2a:	657b      	str	r3, [r7, #84]	; 0x54
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	461a      	mov	r2, r3
 8009e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e34:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e36:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e38:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009e3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e3c:	e841 2300 	strex	r3, r2, [r1]
 8009e40:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d1e6      	bne.n	8009e16 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	3308      	adds	r3, #8
 8009e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e52:	e853 3f00 	ldrex	r3, [r3]
 8009e56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5a:	f043 0301 	orr.w	r3, r3, #1
 8009e5e:	653b      	str	r3, [r7, #80]	; 0x50
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	3308      	adds	r3, #8
 8009e66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e68:	637a      	str	r2, [r7, #52]	; 0x34
 8009e6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e70:	e841 2300 	strex	r3, r2, [r1]
 8009e74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d1e5      	bne.n	8009e48 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	3308      	adds	r3, #8
 8009e82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	e853 3f00 	ldrex	r3, [r3]
 8009e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	3308      	adds	r3, #8
 8009e9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e9c:	623a      	str	r2, [r7, #32]
 8009e9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea0:	69f9      	ldr	r1, [r7, #28]
 8009ea2:	6a3a      	ldr	r2, [r7, #32]
 8009ea4:	e841 2300 	strex	r3, r2, [r1]
 8009ea8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d1e5      	bne.n	8009e7c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3758      	adds	r7, #88	; 0x58
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	0800a017 	.word	0x0800a017
 8009ec0:	0800a13d 	.word	0x0800a13d
 8009ec4:	0800a175 	.word	0x0800a175

08009ec8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b08f      	sub	sp, #60	; 0x3c
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed6:	6a3b      	ldr	r3, [r7, #32]
 8009ed8:	e853 3f00 	ldrex	r3, [r3]
 8009edc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	461a      	mov	r2, r3
 8009eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ef0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ef6:	e841 2300 	strex	r3, r2, [r1]
 8009efa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1e6      	bne.n	8009ed0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	3308      	adds	r3, #8
 8009f08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	e853 3f00 	ldrex	r3, [r3]
 8009f10:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009f18:	633b      	str	r3, [r7, #48]	; 0x30
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	3308      	adds	r3, #8
 8009f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f22:	61ba      	str	r2, [r7, #24]
 8009f24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f26:	6979      	ldr	r1, [r7, #20]
 8009f28:	69ba      	ldr	r2, [r7, #24]
 8009f2a:	e841 2300 	strex	r3, r2, [r1]
 8009f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d1e5      	bne.n	8009f02 <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2220      	movs	r2, #32
 8009f3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8009f3e:	bf00      	nop
 8009f40:	373c      	adds	r7, #60	; 0x3c
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr

08009f4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f4a:	b480      	push	{r7}
 8009f4c:	b095      	sub	sp, #84	; 0x54
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f5a:	e853 3f00 	ldrex	r3, [r3]
 8009f5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f70:	643b      	str	r3, [r7, #64]	; 0x40
 8009f72:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f78:	e841 2300 	strex	r3, r2, [r1]
 8009f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d1e6      	bne.n	8009f52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	3308      	adds	r3, #8
 8009f8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8c:	6a3b      	ldr	r3, [r7, #32]
 8009f8e:	e853 3f00 	ldrex	r3, [r3]
 8009f92:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f94:	69fb      	ldr	r3, [r7, #28]
 8009f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f9a:	f023 0301 	bic.w	r3, r3, #1
 8009f9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	3308      	adds	r3, #8
 8009fa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009fa8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009faa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fb0:	e841 2300 	strex	r3, r2, [r1]
 8009fb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d1e3      	bne.n	8009f84 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d118      	bne.n	8009ff6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	e853 3f00 	ldrex	r3, [r3]
 8009fd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	f023 0310 	bic.w	r3, r3, #16
 8009fd8:	647b      	str	r3, [r7, #68]	; 0x44
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fe2:	61bb      	str	r3, [r7, #24]
 8009fe4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe6:	6979      	ldr	r1, [r7, #20]
 8009fe8:	69ba      	ldr	r2, [r7, #24]
 8009fea:	e841 2300 	strex	r3, r2, [r1]
 8009fee:	613b      	str	r3, [r7, #16]
   return(result);
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d1e6      	bne.n	8009fc4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2220      	movs	r2, #32
 8009ffa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a00a:	bf00      	nop
 800a00c:	3754      	adds	r7, #84	; 0x54
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr

0800a016 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a016:	b580      	push	{r7, lr}
 800a018:	b09c      	sub	sp, #112	; 0x70
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a022:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f003 0320 	and.w	r3, r3, #32
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d171      	bne.n	800a116 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a034:	2200      	movs	r2, #0
 800a036:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a03a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a042:	e853 3f00 	ldrex	r3, [r3]
 800a046:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a04a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a04e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	461a      	mov	r2, r3
 800a056:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a058:	65bb      	str	r3, [r7, #88]	; 0x58
 800a05a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a05e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a060:	e841 2300 	strex	r3, r2, [r1]
 800a064:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d1e6      	bne.n	800a03a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a06c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	3308      	adds	r3, #8
 800a072:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a076:	e853 3f00 	ldrex	r3, [r3]
 800a07a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a07c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a07e:	f023 0301 	bic.w	r3, r3, #1
 800a082:	667b      	str	r3, [r7, #100]	; 0x64
 800a084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	3308      	adds	r3, #8
 800a08a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a08c:	647a      	str	r2, [r7, #68]	; 0x44
 800a08e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a090:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a092:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a094:	e841 2300 	strex	r3, r2, [r1]
 800a098:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d1e5      	bne.n	800a06c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	3308      	adds	r3, #8
 800a0a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0aa:	e853 3f00 	ldrex	r3, [r3]
 800a0ae:	623b      	str	r3, [r7, #32]
   return(result);
 800a0b0:	6a3b      	ldr	r3, [r7, #32]
 800a0b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0b6:	663b      	str	r3, [r7, #96]	; 0x60
 800a0b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3308      	adds	r3, #8
 800a0be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a0c0:	633a      	str	r2, [r7, #48]	; 0x30
 800a0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a0c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0c8:	e841 2300 	strex	r3, r2, [r1]
 800a0cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d1e5      	bne.n	800a0a0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a0d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0d6:	2220      	movs	r2, #32
 800a0d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d118      	bne.n	800a116 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	e853 3f00 	ldrex	r3, [r3]
 800a0f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f023 0310 	bic.w	r3, r3, #16
 800a0f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	461a      	mov	r2, r3
 800a100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a102:	61fb      	str	r3, [r7, #28]
 800a104:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a106:	69b9      	ldr	r1, [r7, #24]
 800a108:	69fa      	ldr	r2, [r7, #28]
 800a10a:	e841 2300 	strex	r3, r2, [r1]
 800a10e:	617b      	str	r3, [r7, #20]
   return(result);
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1e6      	bne.n	800a0e4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d107      	bne.n	800a12e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a11e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a120:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a124:	4619      	mov	r1, r3
 800a126:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a128:	f7ff f968 	bl	80093fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a12c:	e002      	b.n	800a134 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a12e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a130:	f7f9 fab4 	bl	800369c <HAL_UART_RxCpltCallback>
}
 800a134:	bf00      	nop
 800a136:	3770      	adds	r7, #112	; 0x70
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a148:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d109      	bne.n	800a166 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a158:	085b      	lsrs	r3, r3, #1
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	4619      	mov	r1, r3
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f7ff f94c 	bl	80093fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a164:	e002      	b.n	800a16c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f7ff f934 	bl	80093d4 <HAL_UART_RxHalfCpltCallback>
}
 800a16c:	bf00      	nop
 800a16e:	3710      	adds	r7, #16
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b086      	sub	sp, #24
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a180:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a188:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a190:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a19c:	2b80      	cmp	r3, #128	; 0x80
 800a19e:	d109      	bne.n	800a1b4 <UART_DMAError+0x40>
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	2b21      	cmp	r3, #33	; 0x21
 800a1a4:	d106      	bne.n	800a1b4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a1ae:	6978      	ldr	r0, [r7, #20]
 800a1b0:	f7ff fe8a 	bl	8009ec8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1be:	2b40      	cmp	r3, #64	; 0x40
 800a1c0:	d109      	bne.n	800a1d6 <UART_DMAError+0x62>
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2b22      	cmp	r3, #34	; 0x22
 800a1c6:	d106      	bne.n	800a1d6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a1d0:	6978      	ldr	r0, [r7, #20]
 800a1d2:	f7ff feba 	bl	8009f4a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1dc:	f043 0210 	orr.w	r2, r3, #16
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1e6:	6978      	ldr	r0, [r7, #20]
 800a1e8:	f7ff f8fe 	bl	80093e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1ec:	bf00      	nop
 800a1ee:	3718      	adds	r7, #24
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a202:	2b01      	cmp	r3, #1
 800a204:	d101      	bne.n	800a20a <HAL_UARTEx_EnableFifoMode+0x16>
 800a206:	2302      	movs	r3, #2
 800a208:	e02b      	b.n	800a262 <HAL_UARTEx_EnableFifoMode+0x6e>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2201      	movs	r2, #1
 800a20e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2224      	movs	r2, #36	; 0x24
 800a216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f022 0201 	bic.w	r2, r2, #1
 800a230:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a238:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800a240:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	68fa      	ldr	r2, [r7, #12]
 800a248:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 f8c2 	bl	800a3d4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2220      	movs	r2, #32
 800a254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a260:	2300      	movs	r3, #0
}
 800a262:	4618      	mov	r0, r3
 800a264:	3710      	adds	r7, #16
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a26a:	b480      	push	{r7}
 800a26c:	b085      	sub	sp, #20
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d101      	bne.n	800a280 <HAL_UARTEx_DisableFifoMode+0x16>
 800a27c:	2302      	movs	r3, #2
 800a27e:	e027      	b.n	800a2d0 <HAL_UARTEx_DisableFifoMode+0x66>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2201      	movs	r2, #1
 800a284:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2224      	movs	r2, #36	; 0x24
 800a28c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f022 0201 	bic.w	r2, r2, #1
 800a2a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a2ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2220      	movs	r2, #32
 800a2c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3714      	adds	r7, #20
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d101      	bne.n	800a2f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a2f0:	2302      	movs	r3, #2
 800a2f2:	e02d      	b.n	800a350 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2224      	movs	r2, #36	; 0x24
 800a300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f022 0201 	bic.w	r2, r2, #1
 800a31a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	683a      	ldr	r2, [r7, #0]
 800a32c:	430a      	orrs	r2, r1
 800a32e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 f84f 	bl	800a3d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2220      	movs	r2, #32
 800a342:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a34e:	2300      	movs	r3, #0
}
 800a350:	4618      	mov	r0, r3
 800a352:	3710      	adds	r7, #16
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b084      	sub	sp, #16
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d101      	bne.n	800a370 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a36c:	2302      	movs	r3, #2
 800a36e:	e02d      	b.n	800a3cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2201      	movs	r2, #1
 800a374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2224      	movs	r2, #36	; 0x24
 800a37c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f022 0201 	bic.w	r2, r2, #1
 800a396:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	689b      	ldr	r3, [r3, #8]
 800a39e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	683a      	ldr	r2, [r7, #0]
 800a3a8:	430a      	orrs	r2, r1
 800a3aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 f811 	bl	800a3d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	68fa      	ldr	r2, [r7, #12]
 800a3b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2220      	movs	r2, #32
 800a3be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a3ca:	2300      	movs	r3, #0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3710      	adds	r7, #16
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d108      	bne.n	800a3f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a3f4:	e031      	b.n	800a45a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a3f6:	2308      	movs	r3, #8
 800a3f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a3fa:	2308      	movs	r3, #8
 800a3fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	0e5b      	lsrs	r3, r3, #25
 800a406:	b2db      	uxtb	r3, r3
 800a408:	f003 0307 	and.w	r3, r3, #7
 800a40c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	0f5b      	lsrs	r3, r3, #29
 800a416:	b2db      	uxtb	r3, r3
 800a418:	f003 0307 	and.w	r3, r3, #7
 800a41c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a41e:	7bbb      	ldrb	r3, [r7, #14]
 800a420:	7b3a      	ldrb	r2, [r7, #12]
 800a422:	4911      	ldr	r1, [pc, #68]	; (800a468 <UARTEx_SetNbDataToProcess+0x94>)
 800a424:	5c8a      	ldrb	r2, [r1, r2]
 800a426:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a42a:	7b3a      	ldrb	r2, [r7, #12]
 800a42c:	490f      	ldr	r1, [pc, #60]	; (800a46c <UARTEx_SetNbDataToProcess+0x98>)
 800a42e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a430:	fb93 f3f2 	sdiv	r3, r3, r2
 800a434:	b29a      	uxth	r2, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a43c:	7bfb      	ldrb	r3, [r7, #15]
 800a43e:	7b7a      	ldrb	r2, [r7, #13]
 800a440:	4909      	ldr	r1, [pc, #36]	; (800a468 <UARTEx_SetNbDataToProcess+0x94>)
 800a442:	5c8a      	ldrb	r2, [r1, r2]
 800a444:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a448:	7b7a      	ldrb	r2, [r7, #13]
 800a44a:	4908      	ldr	r1, [pc, #32]	; (800a46c <UARTEx_SetNbDataToProcess+0x98>)
 800a44c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a44e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a452:	b29a      	uxth	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a45a:	bf00      	nop
 800a45c:	3714      	adds	r7, #20
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
 800a466:	bf00      	nop
 800a468:	0800e50c 	.word	0x0800e50c
 800a46c:	0800e514 	.word	0x0800e514

0800a470 <gcvt>:
 800a470:	b530      	push	{r4, r5, lr}
 800a472:	2200      	movs	r2, #0
 800a474:	b085      	sub	sp, #20
 800a476:	460c      	mov	r4, r1
 800a478:	4605      	mov	r5, r0
 800a47a:	2300      	movs	r3, #0
 800a47c:	ec51 0b10 	vmov	r0, r1, d0
 800a480:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a484:	f7f6 fb42 	bl	8000b0c <__aeabi_dcmplt>
 800a488:	ed9d 0b02 	vldr	d0, [sp, #8]
 800a48c:	4622      	mov	r2, r4
 800a48e:	b118      	cbz	r0, 800a498 <gcvt+0x28>
 800a490:	232d      	movs	r3, #45	; 0x2d
 800a492:	f802 3b01 	strb.w	r3, [r2], #1
 800a496:	3d01      	subs	r5, #1
 800a498:	2300      	movs	r3, #0
 800a49a:	4806      	ldr	r0, [pc, #24]	; (800a4b4 <gcvt+0x44>)
 800a49c:	9300      	str	r3, [sp, #0]
 800a49e:	4629      	mov	r1, r5
 800a4a0:	2367      	movs	r3, #103	; 0x67
 800a4a2:	6800      	ldr	r0, [r0, #0]
 800a4a4:	f001 fc1c 	bl	800bce0 <_gcvt>
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	bf14      	ite	ne
 800a4ac:	4620      	movne	r0, r4
 800a4ae:	2000      	moveq	r0, #0
 800a4b0:	b005      	add	sp, #20
 800a4b2:	bd30      	pop	{r4, r5, pc}
 800a4b4:	20000054 	.word	0x20000054

0800a4b8 <__errno>:
 800a4b8:	4b01      	ldr	r3, [pc, #4]	; (800a4c0 <__errno+0x8>)
 800a4ba:	6818      	ldr	r0, [r3, #0]
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	20000054 	.word	0x20000054

0800a4c4 <__libc_init_array>:
 800a4c4:	b570      	push	{r4, r5, r6, lr}
 800a4c6:	4d0d      	ldr	r5, [pc, #52]	; (800a4fc <__libc_init_array+0x38>)
 800a4c8:	4c0d      	ldr	r4, [pc, #52]	; (800a500 <__libc_init_array+0x3c>)
 800a4ca:	1b64      	subs	r4, r4, r5
 800a4cc:	10a4      	asrs	r4, r4, #2
 800a4ce:	2600      	movs	r6, #0
 800a4d0:	42a6      	cmp	r6, r4
 800a4d2:	d109      	bne.n	800a4e8 <__libc_init_array+0x24>
 800a4d4:	4d0b      	ldr	r5, [pc, #44]	; (800a504 <__libc_init_array+0x40>)
 800a4d6:	4c0c      	ldr	r4, [pc, #48]	; (800a508 <__libc_init_array+0x44>)
 800a4d8:	f002 ff8e 	bl	800d3f8 <_init>
 800a4dc:	1b64      	subs	r4, r4, r5
 800a4de:	10a4      	asrs	r4, r4, #2
 800a4e0:	2600      	movs	r6, #0
 800a4e2:	42a6      	cmp	r6, r4
 800a4e4:	d105      	bne.n	800a4f2 <__libc_init_array+0x2e>
 800a4e6:	bd70      	pop	{r4, r5, r6, pc}
 800a4e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4ec:	4798      	blx	r3
 800a4ee:	3601      	adds	r6, #1
 800a4f0:	e7ee      	b.n	800a4d0 <__libc_init_array+0xc>
 800a4f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4f6:	4798      	blx	r3
 800a4f8:	3601      	adds	r6, #1
 800a4fa:	e7f2      	b.n	800a4e2 <__libc_init_array+0x1e>
 800a4fc:	0800e924 	.word	0x0800e924
 800a500:	0800e924 	.word	0x0800e924
 800a504:	0800e924 	.word	0x0800e924
 800a508:	0800e928 	.word	0x0800e928

0800a50c <__itoa>:
 800a50c:	1e93      	subs	r3, r2, #2
 800a50e:	2b22      	cmp	r3, #34	; 0x22
 800a510:	b510      	push	{r4, lr}
 800a512:	460c      	mov	r4, r1
 800a514:	d904      	bls.n	800a520 <__itoa+0x14>
 800a516:	2300      	movs	r3, #0
 800a518:	700b      	strb	r3, [r1, #0]
 800a51a:	461c      	mov	r4, r3
 800a51c:	4620      	mov	r0, r4
 800a51e:	bd10      	pop	{r4, pc}
 800a520:	2a0a      	cmp	r2, #10
 800a522:	d109      	bne.n	800a538 <__itoa+0x2c>
 800a524:	2800      	cmp	r0, #0
 800a526:	da07      	bge.n	800a538 <__itoa+0x2c>
 800a528:	232d      	movs	r3, #45	; 0x2d
 800a52a:	700b      	strb	r3, [r1, #0]
 800a52c:	4240      	negs	r0, r0
 800a52e:	2101      	movs	r1, #1
 800a530:	4421      	add	r1, r4
 800a532:	f000 fc9d 	bl	800ae70 <__utoa>
 800a536:	e7f1      	b.n	800a51c <__itoa+0x10>
 800a538:	2100      	movs	r1, #0
 800a53a:	e7f9      	b.n	800a530 <__itoa+0x24>

0800a53c <itoa>:
 800a53c:	f7ff bfe6 	b.w	800a50c <__itoa>

0800a540 <memcpy>:
 800a540:	440a      	add	r2, r1
 800a542:	4291      	cmp	r1, r2
 800a544:	f100 33ff 	add.w	r3, r0, #4294967295
 800a548:	d100      	bne.n	800a54c <memcpy+0xc>
 800a54a:	4770      	bx	lr
 800a54c:	b510      	push	{r4, lr}
 800a54e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a552:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a556:	4291      	cmp	r1, r2
 800a558:	d1f9      	bne.n	800a54e <memcpy+0xe>
 800a55a:	bd10      	pop	{r4, pc}

0800a55c <memset>:
 800a55c:	4402      	add	r2, r0
 800a55e:	4603      	mov	r3, r0
 800a560:	4293      	cmp	r3, r2
 800a562:	d100      	bne.n	800a566 <memset+0xa>
 800a564:	4770      	bx	lr
 800a566:	f803 1b01 	strb.w	r1, [r3], #1
 800a56a:	e7f9      	b.n	800a560 <memset+0x4>

0800a56c <__cvt>:
 800a56c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a570:	ec55 4b10 	vmov	r4, r5, d0
 800a574:	2d00      	cmp	r5, #0
 800a576:	460e      	mov	r6, r1
 800a578:	4619      	mov	r1, r3
 800a57a:	462b      	mov	r3, r5
 800a57c:	bfbb      	ittet	lt
 800a57e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a582:	461d      	movlt	r5, r3
 800a584:	2300      	movge	r3, #0
 800a586:	232d      	movlt	r3, #45	; 0x2d
 800a588:	700b      	strb	r3, [r1, #0]
 800a58a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a58c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a590:	4691      	mov	r9, r2
 800a592:	f023 0820 	bic.w	r8, r3, #32
 800a596:	bfbc      	itt	lt
 800a598:	4622      	movlt	r2, r4
 800a59a:	4614      	movlt	r4, r2
 800a59c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a5a0:	d005      	beq.n	800a5ae <__cvt+0x42>
 800a5a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a5a6:	d100      	bne.n	800a5aa <__cvt+0x3e>
 800a5a8:	3601      	adds	r6, #1
 800a5aa:	2102      	movs	r1, #2
 800a5ac:	e000      	b.n	800a5b0 <__cvt+0x44>
 800a5ae:	2103      	movs	r1, #3
 800a5b0:	ab03      	add	r3, sp, #12
 800a5b2:	9301      	str	r3, [sp, #4]
 800a5b4:	ab02      	add	r3, sp, #8
 800a5b6:	9300      	str	r3, [sp, #0]
 800a5b8:	ec45 4b10 	vmov	d0, r4, r5
 800a5bc:	4653      	mov	r3, sl
 800a5be:	4632      	mov	r2, r6
 800a5c0:	f000 fd26 	bl	800b010 <_dtoa_r>
 800a5c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a5c8:	4607      	mov	r7, r0
 800a5ca:	d102      	bne.n	800a5d2 <__cvt+0x66>
 800a5cc:	f019 0f01 	tst.w	r9, #1
 800a5d0:	d022      	beq.n	800a618 <__cvt+0xac>
 800a5d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a5d6:	eb07 0906 	add.w	r9, r7, r6
 800a5da:	d110      	bne.n	800a5fe <__cvt+0x92>
 800a5dc:	783b      	ldrb	r3, [r7, #0]
 800a5de:	2b30      	cmp	r3, #48	; 0x30
 800a5e0:	d10a      	bne.n	800a5f8 <__cvt+0x8c>
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	4629      	mov	r1, r5
 800a5ea:	f7f6 fa85 	bl	8000af8 <__aeabi_dcmpeq>
 800a5ee:	b918      	cbnz	r0, 800a5f8 <__cvt+0x8c>
 800a5f0:	f1c6 0601 	rsb	r6, r6, #1
 800a5f4:	f8ca 6000 	str.w	r6, [sl]
 800a5f8:	f8da 3000 	ldr.w	r3, [sl]
 800a5fc:	4499      	add	r9, r3
 800a5fe:	2200      	movs	r2, #0
 800a600:	2300      	movs	r3, #0
 800a602:	4620      	mov	r0, r4
 800a604:	4629      	mov	r1, r5
 800a606:	f7f6 fa77 	bl	8000af8 <__aeabi_dcmpeq>
 800a60a:	b108      	cbz	r0, 800a610 <__cvt+0xa4>
 800a60c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a610:	2230      	movs	r2, #48	; 0x30
 800a612:	9b03      	ldr	r3, [sp, #12]
 800a614:	454b      	cmp	r3, r9
 800a616:	d307      	bcc.n	800a628 <__cvt+0xbc>
 800a618:	9b03      	ldr	r3, [sp, #12]
 800a61a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a61c:	1bdb      	subs	r3, r3, r7
 800a61e:	4638      	mov	r0, r7
 800a620:	6013      	str	r3, [r2, #0]
 800a622:	b004      	add	sp, #16
 800a624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a628:	1c59      	adds	r1, r3, #1
 800a62a:	9103      	str	r1, [sp, #12]
 800a62c:	701a      	strb	r2, [r3, #0]
 800a62e:	e7f0      	b.n	800a612 <__cvt+0xa6>

0800a630 <__exponent>:
 800a630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a632:	4603      	mov	r3, r0
 800a634:	2900      	cmp	r1, #0
 800a636:	bfb8      	it	lt
 800a638:	4249      	neglt	r1, r1
 800a63a:	f803 2b02 	strb.w	r2, [r3], #2
 800a63e:	bfb4      	ite	lt
 800a640:	222d      	movlt	r2, #45	; 0x2d
 800a642:	222b      	movge	r2, #43	; 0x2b
 800a644:	2909      	cmp	r1, #9
 800a646:	7042      	strb	r2, [r0, #1]
 800a648:	dd2a      	ble.n	800a6a0 <__exponent+0x70>
 800a64a:	f10d 0407 	add.w	r4, sp, #7
 800a64e:	46a4      	mov	ip, r4
 800a650:	270a      	movs	r7, #10
 800a652:	46a6      	mov	lr, r4
 800a654:	460a      	mov	r2, r1
 800a656:	fb91 f6f7 	sdiv	r6, r1, r7
 800a65a:	fb07 1516 	mls	r5, r7, r6, r1
 800a65e:	3530      	adds	r5, #48	; 0x30
 800a660:	2a63      	cmp	r2, #99	; 0x63
 800a662:	f104 34ff 	add.w	r4, r4, #4294967295
 800a666:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a66a:	4631      	mov	r1, r6
 800a66c:	dcf1      	bgt.n	800a652 <__exponent+0x22>
 800a66e:	3130      	adds	r1, #48	; 0x30
 800a670:	f1ae 0502 	sub.w	r5, lr, #2
 800a674:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a678:	1c44      	adds	r4, r0, #1
 800a67a:	4629      	mov	r1, r5
 800a67c:	4561      	cmp	r1, ip
 800a67e:	d30a      	bcc.n	800a696 <__exponent+0x66>
 800a680:	f10d 0209 	add.w	r2, sp, #9
 800a684:	eba2 020e 	sub.w	r2, r2, lr
 800a688:	4565      	cmp	r5, ip
 800a68a:	bf88      	it	hi
 800a68c:	2200      	movhi	r2, #0
 800a68e:	4413      	add	r3, r2
 800a690:	1a18      	subs	r0, r3, r0
 800a692:	b003      	add	sp, #12
 800a694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a696:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a69a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a69e:	e7ed      	b.n	800a67c <__exponent+0x4c>
 800a6a0:	2330      	movs	r3, #48	; 0x30
 800a6a2:	3130      	adds	r1, #48	; 0x30
 800a6a4:	7083      	strb	r3, [r0, #2]
 800a6a6:	70c1      	strb	r1, [r0, #3]
 800a6a8:	1d03      	adds	r3, r0, #4
 800a6aa:	e7f1      	b.n	800a690 <__exponent+0x60>

0800a6ac <_printf_float>:
 800a6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b0:	ed2d 8b02 	vpush	{d8}
 800a6b4:	b08d      	sub	sp, #52	; 0x34
 800a6b6:	460c      	mov	r4, r1
 800a6b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a6bc:	4616      	mov	r6, r2
 800a6be:	461f      	mov	r7, r3
 800a6c0:	4605      	mov	r5, r0
 800a6c2:	f001 fcc3 	bl	800c04c <_localeconv_r>
 800a6c6:	f8d0 a000 	ldr.w	sl, [r0]
 800a6ca:	4650      	mov	r0, sl
 800a6cc:	f7f5 fd98 	bl	8000200 <strlen>
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	930a      	str	r3, [sp, #40]	; 0x28
 800a6d4:	6823      	ldr	r3, [r4, #0]
 800a6d6:	9305      	str	r3, [sp, #20]
 800a6d8:	f8d8 3000 	ldr.w	r3, [r8]
 800a6dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a6e0:	3307      	adds	r3, #7
 800a6e2:	f023 0307 	bic.w	r3, r3, #7
 800a6e6:	f103 0208 	add.w	r2, r3, #8
 800a6ea:	f8c8 2000 	str.w	r2, [r8]
 800a6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a6f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a6fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a6fe:	9307      	str	r3, [sp, #28]
 800a700:	f8cd 8018 	str.w	r8, [sp, #24]
 800a704:	ee08 0a10 	vmov	s16, r0
 800a708:	4b9f      	ldr	r3, [pc, #636]	; (800a988 <_printf_float+0x2dc>)
 800a70a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a70e:	f04f 32ff 	mov.w	r2, #4294967295
 800a712:	f7f6 fa23 	bl	8000b5c <__aeabi_dcmpun>
 800a716:	bb88      	cbnz	r0, 800a77c <_printf_float+0xd0>
 800a718:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a71c:	4b9a      	ldr	r3, [pc, #616]	; (800a988 <_printf_float+0x2dc>)
 800a71e:	f04f 32ff 	mov.w	r2, #4294967295
 800a722:	f7f6 f9fd 	bl	8000b20 <__aeabi_dcmple>
 800a726:	bb48      	cbnz	r0, 800a77c <_printf_float+0xd0>
 800a728:	2200      	movs	r2, #0
 800a72a:	2300      	movs	r3, #0
 800a72c:	4640      	mov	r0, r8
 800a72e:	4649      	mov	r1, r9
 800a730:	f7f6 f9ec 	bl	8000b0c <__aeabi_dcmplt>
 800a734:	b110      	cbz	r0, 800a73c <_printf_float+0x90>
 800a736:	232d      	movs	r3, #45	; 0x2d
 800a738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a73c:	4b93      	ldr	r3, [pc, #588]	; (800a98c <_printf_float+0x2e0>)
 800a73e:	4894      	ldr	r0, [pc, #592]	; (800a990 <_printf_float+0x2e4>)
 800a740:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a744:	bf94      	ite	ls
 800a746:	4698      	movls	r8, r3
 800a748:	4680      	movhi	r8, r0
 800a74a:	2303      	movs	r3, #3
 800a74c:	6123      	str	r3, [r4, #16]
 800a74e:	9b05      	ldr	r3, [sp, #20]
 800a750:	f023 0204 	bic.w	r2, r3, #4
 800a754:	6022      	str	r2, [r4, #0]
 800a756:	f04f 0900 	mov.w	r9, #0
 800a75a:	9700      	str	r7, [sp, #0]
 800a75c:	4633      	mov	r3, r6
 800a75e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a760:	4621      	mov	r1, r4
 800a762:	4628      	mov	r0, r5
 800a764:	f000 f9d8 	bl	800ab18 <_printf_common>
 800a768:	3001      	adds	r0, #1
 800a76a:	f040 8090 	bne.w	800a88e <_printf_float+0x1e2>
 800a76e:	f04f 30ff 	mov.w	r0, #4294967295
 800a772:	b00d      	add	sp, #52	; 0x34
 800a774:	ecbd 8b02 	vpop	{d8}
 800a778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a77c:	4642      	mov	r2, r8
 800a77e:	464b      	mov	r3, r9
 800a780:	4640      	mov	r0, r8
 800a782:	4649      	mov	r1, r9
 800a784:	f7f6 f9ea 	bl	8000b5c <__aeabi_dcmpun>
 800a788:	b140      	cbz	r0, 800a79c <_printf_float+0xf0>
 800a78a:	464b      	mov	r3, r9
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	bfbc      	itt	lt
 800a790:	232d      	movlt	r3, #45	; 0x2d
 800a792:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a796:	487f      	ldr	r0, [pc, #508]	; (800a994 <_printf_float+0x2e8>)
 800a798:	4b7f      	ldr	r3, [pc, #508]	; (800a998 <_printf_float+0x2ec>)
 800a79a:	e7d1      	b.n	800a740 <_printf_float+0x94>
 800a79c:	6863      	ldr	r3, [r4, #4]
 800a79e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a7a2:	9206      	str	r2, [sp, #24]
 800a7a4:	1c5a      	adds	r2, r3, #1
 800a7a6:	d13f      	bne.n	800a828 <_printf_float+0x17c>
 800a7a8:	2306      	movs	r3, #6
 800a7aa:	6063      	str	r3, [r4, #4]
 800a7ac:	9b05      	ldr	r3, [sp, #20]
 800a7ae:	6861      	ldr	r1, [r4, #4]
 800a7b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	9303      	str	r3, [sp, #12]
 800a7b8:	ab0a      	add	r3, sp, #40	; 0x28
 800a7ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a7be:	ab09      	add	r3, sp, #36	; 0x24
 800a7c0:	ec49 8b10 	vmov	d0, r8, r9
 800a7c4:	9300      	str	r3, [sp, #0]
 800a7c6:	6022      	str	r2, [r4, #0]
 800a7c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	f7ff fecd 	bl	800a56c <__cvt>
 800a7d2:	9b06      	ldr	r3, [sp, #24]
 800a7d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7d6:	2b47      	cmp	r3, #71	; 0x47
 800a7d8:	4680      	mov	r8, r0
 800a7da:	d108      	bne.n	800a7ee <_printf_float+0x142>
 800a7dc:	1cc8      	adds	r0, r1, #3
 800a7de:	db02      	blt.n	800a7e6 <_printf_float+0x13a>
 800a7e0:	6863      	ldr	r3, [r4, #4]
 800a7e2:	4299      	cmp	r1, r3
 800a7e4:	dd41      	ble.n	800a86a <_printf_float+0x1be>
 800a7e6:	f1ab 0b02 	sub.w	fp, fp, #2
 800a7ea:	fa5f fb8b 	uxtb.w	fp, fp
 800a7ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a7f2:	d820      	bhi.n	800a836 <_printf_float+0x18a>
 800a7f4:	3901      	subs	r1, #1
 800a7f6:	465a      	mov	r2, fp
 800a7f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a7fc:	9109      	str	r1, [sp, #36]	; 0x24
 800a7fe:	f7ff ff17 	bl	800a630 <__exponent>
 800a802:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a804:	1813      	adds	r3, r2, r0
 800a806:	2a01      	cmp	r2, #1
 800a808:	4681      	mov	r9, r0
 800a80a:	6123      	str	r3, [r4, #16]
 800a80c:	dc02      	bgt.n	800a814 <_printf_float+0x168>
 800a80e:	6822      	ldr	r2, [r4, #0]
 800a810:	07d2      	lsls	r2, r2, #31
 800a812:	d501      	bpl.n	800a818 <_printf_float+0x16c>
 800a814:	3301      	adds	r3, #1
 800a816:	6123      	str	r3, [r4, #16]
 800a818:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d09c      	beq.n	800a75a <_printf_float+0xae>
 800a820:	232d      	movs	r3, #45	; 0x2d
 800a822:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a826:	e798      	b.n	800a75a <_printf_float+0xae>
 800a828:	9a06      	ldr	r2, [sp, #24]
 800a82a:	2a47      	cmp	r2, #71	; 0x47
 800a82c:	d1be      	bne.n	800a7ac <_printf_float+0x100>
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d1bc      	bne.n	800a7ac <_printf_float+0x100>
 800a832:	2301      	movs	r3, #1
 800a834:	e7b9      	b.n	800a7aa <_printf_float+0xfe>
 800a836:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a83a:	d118      	bne.n	800a86e <_printf_float+0x1c2>
 800a83c:	2900      	cmp	r1, #0
 800a83e:	6863      	ldr	r3, [r4, #4]
 800a840:	dd0b      	ble.n	800a85a <_printf_float+0x1ae>
 800a842:	6121      	str	r1, [r4, #16]
 800a844:	b913      	cbnz	r3, 800a84c <_printf_float+0x1a0>
 800a846:	6822      	ldr	r2, [r4, #0]
 800a848:	07d0      	lsls	r0, r2, #31
 800a84a:	d502      	bpl.n	800a852 <_printf_float+0x1a6>
 800a84c:	3301      	adds	r3, #1
 800a84e:	440b      	add	r3, r1
 800a850:	6123      	str	r3, [r4, #16]
 800a852:	65a1      	str	r1, [r4, #88]	; 0x58
 800a854:	f04f 0900 	mov.w	r9, #0
 800a858:	e7de      	b.n	800a818 <_printf_float+0x16c>
 800a85a:	b913      	cbnz	r3, 800a862 <_printf_float+0x1b6>
 800a85c:	6822      	ldr	r2, [r4, #0]
 800a85e:	07d2      	lsls	r2, r2, #31
 800a860:	d501      	bpl.n	800a866 <_printf_float+0x1ba>
 800a862:	3302      	adds	r3, #2
 800a864:	e7f4      	b.n	800a850 <_printf_float+0x1a4>
 800a866:	2301      	movs	r3, #1
 800a868:	e7f2      	b.n	800a850 <_printf_float+0x1a4>
 800a86a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a86e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a870:	4299      	cmp	r1, r3
 800a872:	db05      	blt.n	800a880 <_printf_float+0x1d4>
 800a874:	6823      	ldr	r3, [r4, #0]
 800a876:	6121      	str	r1, [r4, #16]
 800a878:	07d8      	lsls	r0, r3, #31
 800a87a:	d5ea      	bpl.n	800a852 <_printf_float+0x1a6>
 800a87c:	1c4b      	adds	r3, r1, #1
 800a87e:	e7e7      	b.n	800a850 <_printf_float+0x1a4>
 800a880:	2900      	cmp	r1, #0
 800a882:	bfd4      	ite	le
 800a884:	f1c1 0202 	rsble	r2, r1, #2
 800a888:	2201      	movgt	r2, #1
 800a88a:	4413      	add	r3, r2
 800a88c:	e7e0      	b.n	800a850 <_printf_float+0x1a4>
 800a88e:	6823      	ldr	r3, [r4, #0]
 800a890:	055a      	lsls	r2, r3, #21
 800a892:	d407      	bmi.n	800a8a4 <_printf_float+0x1f8>
 800a894:	6923      	ldr	r3, [r4, #16]
 800a896:	4642      	mov	r2, r8
 800a898:	4631      	mov	r1, r6
 800a89a:	4628      	mov	r0, r5
 800a89c:	47b8      	blx	r7
 800a89e:	3001      	adds	r0, #1
 800a8a0:	d12c      	bne.n	800a8fc <_printf_float+0x250>
 800a8a2:	e764      	b.n	800a76e <_printf_float+0xc2>
 800a8a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a8a8:	f240 80e0 	bls.w	800aa6c <_printf_float+0x3c0>
 800a8ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	f7f6 f920 	bl	8000af8 <__aeabi_dcmpeq>
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	d034      	beq.n	800a926 <_printf_float+0x27a>
 800a8bc:	4a37      	ldr	r2, [pc, #220]	; (800a99c <_printf_float+0x2f0>)
 800a8be:	2301      	movs	r3, #1
 800a8c0:	4631      	mov	r1, r6
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	47b8      	blx	r7
 800a8c6:	3001      	adds	r0, #1
 800a8c8:	f43f af51 	beq.w	800a76e <_printf_float+0xc2>
 800a8cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	db02      	blt.n	800a8da <_printf_float+0x22e>
 800a8d4:	6823      	ldr	r3, [r4, #0]
 800a8d6:	07d8      	lsls	r0, r3, #31
 800a8d8:	d510      	bpl.n	800a8fc <_printf_float+0x250>
 800a8da:	ee18 3a10 	vmov	r3, s16
 800a8de:	4652      	mov	r2, sl
 800a8e0:	4631      	mov	r1, r6
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	47b8      	blx	r7
 800a8e6:	3001      	adds	r0, #1
 800a8e8:	f43f af41 	beq.w	800a76e <_printf_float+0xc2>
 800a8ec:	f04f 0800 	mov.w	r8, #0
 800a8f0:	f104 091a 	add.w	r9, r4, #26
 800a8f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8f6:	3b01      	subs	r3, #1
 800a8f8:	4543      	cmp	r3, r8
 800a8fa:	dc09      	bgt.n	800a910 <_printf_float+0x264>
 800a8fc:	6823      	ldr	r3, [r4, #0]
 800a8fe:	079b      	lsls	r3, r3, #30
 800a900:	f100 8105 	bmi.w	800ab0e <_printf_float+0x462>
 800a904:	68e0      	ldr	r0, [r4, #12]
 800a906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a908:	4298      	cmp	r0, r3
 800a90a:	bfb8      	it	lt
 800a90c:	4618      	movlt	r0, r3
 800a90e:	e730      	b.n	800a772 <_printf_float+0xc6>
 800a910:	2301      	movs	r3, #1
 800a912:	464a      	mov	r2, r9
 800a914:	4631      	mov	r1, r6
 800a916:	4628      	mov	r0, r5
 800a918:	47b8      	blx	r7
 800a91a:	3001      	adds	r0, #1
 800a91c:	f43f af27 	beq.w	800a76e <_printf_float+0xc2>
 800a920:	f108 0801 	add.w	r8, r8, #1
 800a924:	e7e6      	b.n	800a8f4 <_printf_float+0x248>
 800a926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a928:	2b00      	cmp	r3, #0
 800a92a:	dc39      	bgt.n	800a9a0 <_printf_float+0x2f4>
 800a92c:	4a1b      	ldr	r2, [pc, #108]	; (800a99c <_printf_float+0x2f0>)
 800a92e:	2301      	movs	r3, #1
 800a930:	4631      	mov	r1, r6
 800a932:	4628      	mov	r0, r5
 800a934:	47b8      	blx	r7
 800a936:	3001      	adds	r0, #1
 800a938:	f43f af19 	beq.w	800a76e <_printf_float+0xc2>
 800a93c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a940:	4313      	orrs	r3, r2
 800a942:	d102      	bne.n	800a94a <_printf_float+0x29e>
 800a944:	6823      	ldr	r3, [r4, #0]
 800a946:	07d9      	lsls	r1, r3, #31
 800a948:	d5d8      	bpl.n	800a8fc <_printf_float+0x250>
 800a94a:	ee18 3a10 	vmov	r3, s16
 800a94e:	4652      	mov	r2, sl
 800a950:	4631      	mov	r1, r6
 800a952:	4628      	mov	r0, r5
 800a954:	47b8      	blx	r7
 800a956:	3001      	adds	r0, #1
 800a958:	f43f af09 	beq.w	800a76e <_printf_float+0xc2>
 800a95c:	f04f 0900 	mov.w	r9, #0
 800a960:	f104 0a1a 	add.w	sl, r4, #26
 800a964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a966:	425b      	negs	r3, r3
 800a968:	454b      	cmp	r3, r9
 800a96a:	dc01      	bgt.n	800a970 <_printf_float+0x2c4>
 800a96c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a96e:	e792      	b.n	800a896 <_printf_float+0x1ea>
 800a970:	2301      	movs	r3, #1
 800a972:	4652      	mov	r2, sl
 800a974:	4631      	mov	r1, r6
 800a976:	4628      	mov	r0, r5
 800a978:	47b8      	blx	r7
 800a97a:	3001      	adds	r0, #1
 800a97c:	f43f aef7 	beq.w	800a76e <_printf_float+0xc2>
 800a980:	f109 0901 	add.w	r9, r9, #1
 800a984:	e7ee      	b.n	800a964 <_printf_float+0x2b8>
 800a986:	bf00      	nop
 800a988:	7fefffff 	.word	0x7fefffff
 800a98c:	0800e520 	.word	0x0800e520
 800a990:	0800e524 	.word	0x0800e524
 800a994:	0800e52c 	.word	0x0800e52c
 800a998:	0800e528 	.word	0x0800e528
 800a99c:	0800e530 	.word	0x0800e530
 800a9a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	bfa8      	it	ge
 800a9a8:	461a      	movge	r2, r3
 800a9aa:	2a00      	cmp	r2, #0
 800a9ac:	4691      	mov	r9, r2
 800a9ae:	dc37      	bgt.n	800aa20 <_printf_float+0x374>
 800a9b0:	f04f 0b00 	mov.w	fp, #0
 800a9b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9b8:	f104 021a 	add.w	r2, r4, #26
 800a9bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a9be:	9305      	str	r3, [sp, #20]
 800a9c0:	eba3 0309 	sub.w	r3, r3, r9
 800a9c4:	455b      	cmp	r3, fp
 800a9c6:	dc33      	bgt.n	800aa30 <_printf_float+0x384>
 800a9c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	db3b      	blt.n	800aa48 <_printf_float+0x39c>
 800a9d0:	6823      	ldr	r3, [r4, #0]
 800a9d2:	07da      	lsls	r2, r3, #31
 800a9d4:	d438      	bmi.n	800aa48 <_printf_float+0x39c>
 800a9d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9d8:	9a05      	ldr	r2, [sp, #20]
 800a9da:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9dc:	1a9a      	subs	r2, r3, r2
 800a9de:	eba3 0901 	sub.w	r9, r3, r1
 800a9e2:	4591      	cmp	r9, r2
 800a9e4:	bfa8      	it	ge
 800a9e6:	4691      	movge	r9, r2
 800a9e8:	f1b9 0f00 	cmp.w	r9, #0
 800a9ec:	dc35      	bgt.n	800aa5a <_printf_float+0x3ae>
 800a9ee:	f04f 0800 	mov.w	r8, #0
 800a9f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9f6:	f104 0a1a 	add.w	sl, r4, #26
 800a9fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9fe:	1a9b      	subs	r3, r3, r2
 800aa00:	eba3 0309 	sub.w	r3, r3, r9
 800aa04:	4543      	cmp	r3, r8
 800aa06:	f77f af79 	ble.w	800a8fc <_printf_float+0x250>
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	4652      	mov	r2, sl
 800aa0e:	4631      	mov	r1, r6
 800aa10:	4628      	mov	r0, r5
 800aa12:	47b8      	blx	r7
 800aa14:	3001      	adds	r0, #1
 800aa16:	f43f aeaa 	beq.w	800a76e <_printf_float+0xc2>
 800aa1a:	f108 0801 	add.w	r8, r8, #1
 800aa1e:	e7ec      	b.n	800a9fa <_printf_float+0x34e>
 800aa20:	4613      	mov	r3, r2
 800aa22:	4631      	mov	r1, r6
 800aa24:	4642      	mov	r2, r8
 800aa26:	4628      	mov	r0, r5
 800aa28:	47b8      	blx	r7
 800aa2a:	3001      	adds	r0, #1
 800aa2c:	d1c0      	bne.n	800a9b0 <_printf_float+0x304>
 800aa2e:	e69e      	b.n	800a76e <_printf_float+0xc2>
 800aa30:	2301      	movs	r3, #1
 800aa32:	4631      	mov	r1, r6
 800aa34:	4628      	mov	r0, r5
 800aa36:	9205      	str	r2, [sp, #20]
 800aa38:	47b8      	blx	r7
 800aa3a:	3001      	adds	r0, #1
 800aa3c:	f43f ae97 	beq.w	800a76e <_printf_float+0xc2>
 800aa40:	9a05      	ldr	r2, [sp, #20]
 800aa42:	f10b 0b01 	add.w	fp, fp, #1
 800aa46:	e7b9      	b.n	800a9bc <_printf_float+0x310>
 800aa48:	ee18 3a10 	vmov	r3, s16
 800aa4c:	4652      	mov	r2, sl
 800aa4e:	4631      	mov	r1, r6
 800aa50:	4628      	mov	r0, r5
 800aa52:	47b8      	blx	r7
 800aa54:	3001      	adds	r0, #1
 800aa56:	d1be      	bne.n	800a9d6 <_printf_float+0x32a>
 800aa58:	e689      	b.n	800a76e <_printf_float+0xc2>
 800aa5a:	9a05      	ldr	r2, [sp, #20]
 800aa5c:	464b      	mov	r3, r9
 800aa5e:	4442      	add	r2, r8
 800aa60:	4631      	mov	r1, r6
 800aa62:	4628      	mov	r0, r5
 800aa64:	47b8      	blx	r7
 800aa66:	3001      	adds	r0, #1
 800aa68:	d1c1      	bne.n	800a9ee <_printf_float+0x342>
 800aa6a:	e680      	b.n	800a76e <_printf_float+0xc2>
 800aa6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa6e:	2a01      	cmp	r2, #1
 800aa70:	dc01      	bgt.n	800aa76 <_printf_float+0x3ca>
 800aa72:	07db      	lsls	r3, r3, #31
 800aa74:	d538      	bpl.n	800aae8 <_printf_float+0x43c>
 800aa76:	2301      	movs	r3, #1
 800aa78:	4642      	mov	r2, r8
 800aa7a:	4631      	mov	r1, r6
 800aa7c:	4628      	mov	r0, r5
 800aa7e:	47b8      	blx	r7
 800aa80:	3001      	adds	r0, #1
 800aa82:	f43f ae74 	beq.w	800a76e <_printf_float+0xc2>
 800aa86:	ee18 3a10 	vmov	r3, s16
 800aa8a:	4652      	mov	r2, sl
 800aa8c:	4631      	mov	r1, r6
 800aa8e:	4628      	mov	r0, r5
 800aa90:	47b8      	blx	r7
 800aa92:	3001      	adds	r0, #1
 800aa94:	f43f ae6b 	beq.w	800a76e <_printf_float+0xc2>
 800aa98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	f7f6 f82a 	bl	8000af8 <__aeabi_dcmpeq>
 800aaa4:	b9d8      	cbnz	r0, 800aade <_printf_float+0x432>
 800aaa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaa8:	f108 0201 	add.w	r2, r8, #1
 800aaac:	3b01      	subs	r3, #1
 800aaae:	4631      	mov	r1, r6
 800aab0:	4628      	mov	r0, r5
 800aab2:	47b8      	blx	r7
 800aab4:	3001      	adds	r0, #1
 800aab6:	d10e      	bne.n	800aad6 <_printf_float+0x42a>
 800aab8:	e659      	b.n	800a76e <_printf_float+0xc2>
 800aaba:	2301      	movs	r3, #1
 800aabc:	4652      	mov	r2, sl
 800aabe:	4631      	mov	r1, r6
 800aac0:	4628      	mov	r0, r5
 800aac2:	47b8      	blx	r7
 800aac4:	3001      	adds	r0, #1
 800aac6:	f43f ae52 	beq.w	800a76e <_printf_float+0xc2>
 800aaca:	f108 0801 	add.w	r8, r8, #1
 800aace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aad0:	3b01      	subs	r3, #1
 800aad2:	4543      	cmp	r3, r8
 800aad4:	dcf1      	bgt.n	800aaba <_printf_float+0x40e>
 800aad6:	464b      	mov	r3, r9
 800aad8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aadc:	e6dc      	b.n	800a898 <_printf_float+0x1ec>
 800aade:	f04f 0800 	mov.w	r8, #0
 800aae2:	f104 0a1a 	add.w	sl, r4, #26
 800aae6:	e7f2      	b.n	800aace <_printf_float+0x422>
 800aae8:	2301      	movs	r3, #1
 800aaea:	4642      	mov	r2, r8
 800aaec:	e7df      	b.n	800aaae <_printf_float+0x402>
 800aaee:	2301      	movs	r3, #1
 800aaf0:	464a      	mov	r2, r9
 800aaf2:	4631      	mov	r1, r6
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	47b8      	blx	r7
 800aaf8:	3001      	adds	r0, #1
 800aafa:	f43f ae38 	beq.w	800a76e <_printf_float+0xc2>
 800aafe:	f108 0801 	add.w	r8, r8, #1
 800ab02:	68e3      	ldr	r3, [r4, #12]
 800ab04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab06:	1a5b      	subs	r3, r3, r1
 800ab08:	4543      	cmp	r3, r8
 800ab0a:	dcf0      	bgt.n	800aaee <_printf_float+0x442>
 800ab0c:	e6fa      	b.n	800a904 <_printf_float+0x258>
 800ab0e:	f04f 0800 	mov.w	r8, #0
 800ab12:	f104 0919 	add.w	r9, r4, #25
 800ab16:	e7f4      	b.n	800ab02 <_printf_float+0x456>

0800ab18 <_printf_common>:
 800ab18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab1c:	4616      	mov	r6, r2
 800ab1e:	4699      	mov	r9, r3
 800ab20:	688a      	ldr	r2, [r1, #8]
 800ab22:	690b      	ldr	r3, [r1, #16]
 800ab24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	bfb8      	it	lt
 800ab2c:	4613      	movlt	r3, r2
 800ab2e:	6033      	str	r3, [r6, #0]
 800ab30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab34:	4607      	mov	r7, r0
 800ab36:	460c      	mov	r4, r1
 800ab38:	b10a      	cbz	r2, 800ab3e <_printf_common+0x26>
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	6033      	str	r3, [r6, #0]
 800ab3e:	6823      	ldr	r3, [r4, #0]
 800ab40:	0699      	lsls	r1, r3, #26
 800ab42:	bf42      	ittt	mi
 800ab44:	6833      	ldrmi	r3, [r6, #0]
 800ab46:	3302      	addmi	r3, #2
 800ab48:	6033      	strmi	r3, [r6, #0]
 800ab4a:	6825      	ldr	r5, [r4, #0]
 800ab4c:	f015 0506 	ands.w	r5, r5, #6
 800ab50:	d106      	bne.n	800ab60 <_printf_common+0x48>
 800ab52:	f104 0a19 	add.w	sl, r4, #25
 800ab56:	68e3      	ldr	r3, [r4, #12]
 800ab58:	6832      	ldr	r2, [r6, #0]
 800ab5a:	1a9b      	subs	r3, r3, r2
 800ab5c:	42ab      	cmp	r3, r5
 800ab5e:	dc26      	bgt.n	800abae <_printf_common+0x96>
 800ab60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab64:	1e13      	subs	r3, r2, #0
 800ab66:	6822      	ldr	r2, [r4, #0]
 800ab68:	bf18      	it	ne
 800ab6a:	2301      	movne	r3, #1
 800ab6c:	0692      	lsls	r2, r2, #26
 800ab6e:	d42b      	bmi.n	800abc8 <_printf_common+0xb0>
 800ab70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab74:	4649      	mov	r1, r9
 800ab76:	4638      	mov	r0, r7
 800ab78:	47c0      	blx	r8
 800ab7a:	3001      	adds	r0, #1
 800ab7c:	d01e      	beq.n	800abbc <_printf_common+0xa4>
 800ab7e:	6823      	ldr	r3, [r4, #0]
 800ab80:	68e5      	ldr	r5, [r4, #12]
 800ab82:	6832      	ldr	r2, [r6, #0]
 800ab84:	f003 0306 	and.w	r3, r3, #6
 800ab88:	2b04      	cmp	r3, #4
 800ab8a:	bf08      	it	eq
 800ab8c:	1aad      	subeq	r5, r5, r2
 800ab8e:	68a3      	ldr	r3, [r4, #8]
 800ab90:	6922      	ldr	r2, [r4, #16]
 800ab92:	bf0c      	ite	eq
 800ab94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab98:	2500      	movne	r5, #0
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	bfc4      	itt	gt
 800ab9e:	1a9b      	subgt	r3, r3, r2
 800aba0:	18ed      	addgt	r5, r5, r3
 800aba2:	2600      	movs	r6, #0
 800aba4:	341a      	adds	r4, #26
 800aba6:	42b5      	cmp	r5, r6
 800aba8:	d11a      	bne.n	800abe0 <_printf_common+0xc8>
 800abaa:	2000      	movs	r0, #0
 800abac:	e008      	b.n	800abc0 <_printf_common+0xa8>
 800abae:	2301      	movs	r3, #1
 800abb0:	4652      	mov	r2, sl
 800abb2:	4649      	mov	r1, r9
 800abb4:	4638      	mov	r0, r7
 800abb6:	47c0      	blx	r8
 800abb8:	3001      	adds	r0, #1
 800abba:	d103      	bne.n	800abc4 <_printf_common+0xac>
 800abbc:	f04f 30ff 	mov.w	r0, #4294967295
 800abc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc4:	3501      	adds	r5, #1
 800abc6:	e7c6      	b.n	800ab56 <_printf_common+0x3e>
 800abc8:	18e1      	adds	r1, r4, r3
 800abca:	1c5a      	adds	r2, r3, #1
 800abcc:	2030      	movs	r0, #48	; 0x30
 800abce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800abd2:	4422      	add	r2, r4
 800abd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800abd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800abdc:	3302      	adds	r3, #2
 800abde:	e7c7      	b.n	800ab70 <_printf_common+0x58>
 800abe0:	2301      	movs	r3, #1
 800abe2:	4622      	mov	r2, r4
 800abe4:	4649      	mov	r1, r9
 800abe6:	4638      	mov	r0, r7
 800abe8:	47c0      	blx	r8
 800abea:	3001      	adds	r0, #1
 800abec:	d0e6      	beq.n	800abbc <_printf_common+0xa4>
 800abee:	3601      	adds	r6, #1
 800abf0:	e7d9      	b.n	800aba6 <_printf_common+0x8e>
	...

0800abf4 <_printf_i>:
 800abf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abf8:	7e0f      	ldrb	r7, [r1, #24]
 800abfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800abfc:	2f78      	cmp	r7, #120	; 0x78
 800abfe:	4691      	mov	r9, r2
 800ac00:	4680      	mov	r8, r0
 800ac02:	460c      	mov	r4, r1
 800ac04:	469a      	mov	sl, r3
 800ac06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ac0a:	d807      	bhi.n	800ac1c <_printf_i+0x28>
 800ac0c:	2f62      	cmp	r7, #98	; 0x62
 800ac0e:	d80a      	bhi.n	800ac26 <_printf_i+0x32>
 800ac10:	2f00      	cmp	r7, #0
 800ac12:	f000 80d8 	beq.w	800adc6 <_printf_i+0x1d2>
 800ac16:	2f58      	cmp	r7, #88	; 0x58
 800ac18:	f000 80a3 	beq.w	800ad62 <_printf_i+0x16e>
 800ac1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac24:	e03a      	b.n	800ac9c <_printf_i+0xa8>
 800ac26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac2a:	2b15      	cmp	r3, #21
 800ac2c:	d8f6      	bhi.n	800ac1c <_printf_i+0x28>
 800ac2e:	a101      	add	r1, pc, #4	; (adr r1, 800ac34 <_printf_i+0x40>)
 800ac30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac34:	0800ac8d 	.word	0x0800ac8d
 800ac38:	0800aca1 	.word	0x0800aca1
 800ac3c:	0800ac1d 	.word	0x0800ac1d
 800ac40:	0800ac1d 	.word	0x0800ac1d
 800ac44:	0800ac1d 	.word	0x0800ac1d
 800ac48:	0800ac1d 	.word	0x0800ac1d
 800ac4c:	0800aca1 	.word	0x0800aca1
 800ac50:	0800ac1d 	.word	0x0800ac1d
 800ac54:	0800ac1d 	.word	0x0800ac1d
 800ac58:	0800ac1d 	.word	0x0800ac1d
 800ac5c:	0800ac1d 	.word	0x0800ac1d
 800ac60:	0800adad 	.word	0x0800adad
 800ac64:	0800acd1 	.word	0x0800acd1
 800ac68:	0800ad8f 	.word	0x0800ad8f
 800ac6c:	0800ac1d 	.word	0x0800ac1d
 800ac70:	0800ac1d 	.word	0x0800ac1d
 800ac74:	0800adcf 	.word	0x0800adcf
 800ac78:	0800ac1d 	.word	0x0800ac1d
 800ac7c:	0800acd1 	.word	0x0800acd1
 800ac80:	0800ac1d 	.word	0x0800ac1d
 800ac84:	0800ac1d 	.word	0x0800ac1d
 800ac88:	0800ad97 	.word	0x0800ad97
 800ac8c:	682b      	ldr	r3, [r5, #0]
 800ac8e:	1d1a      	adds	r2, r3, #4
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	602a      	str	r2, [r5, #0]
 800ac94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e0a3      	b.n	800ade8 <_printf_i+0x1f4>
 800aca0:	6820      	ldr	r0, [r4, #0]
 800aca2:	6829      	ldr	r1, [r5, #0]
 800aca4:	0606      	lsls	r6, r0, #24
 800aca6:	f101 0304 	add.w	r3, r1, #4
 800acaa:	d50a      	bpl.n	800acc2 <_printf_i+0xce>
 800acac:	680e      	ldr	r6, [r1, #0]
 800acae:	602b      	str	r3, [r5, #0]
 800acb0:	2e00      	cmp	r6, #0
 800acb2:	da03      	bge.n	800acbc <_printf_i+0xc8>
 800acb4:	232d      	movs	r3, #45	; 0x2d
 800acb6:	4276      	negs	r6, r6
 800acb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acbc:	485e      	ldr	r0, [pc, #376]	; (800ae38 <_printf_i+0x244>)
 800acbe:	230a      	movs	r3, #10
 800acc0:	e019      	b.n	800acf6 <_printf_i+0x102>
 800acc2:	680e      	ldr	r6, [r1, #0]
 800acc4:	602b      	str	r3, [r5, #0]
 800acc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800acca:	bf18      	it	ne
 800accc:	b236      	sxthne	r6, r6
 800acce:	e7ef      	b.n	800acb0 <_printf_i+0xbc>
 800acd0:	682b      	ldr	r3, [r5, #0]
 800acd2:	6820      	ldr	r0, [r4, #0]
 800acd4:	1d19      	adds	r1, r3, #4
 800acd6:	6029      	str	r1, [r5, #0]
 800acd8:	0601      	lsls	r1, r0, #24
 800acda:	d501      	bpl.n	800ace0 <_printf_i+0xec>
 800acdc:	681e      	ldr	r6, [r3, #0]
 800acde:	e002      	b.n	800ace6 <_printf_i+0xf2>
 800ace0:	0646      	lsls	r6, r0, #25
 800ace2:	d5fb      	bpl.n	800acdc <_printf_i+0xe8>
 800ace4:	881e      	ldrh	r6, [r3, #0]
 800ace6:	4854      	ldr	r0, [pc, #336]	; (800ae38 <_printf_i+0x244>)
 800ace8:	2f6f      	cmp	r7, #111	; 0x6f
 800acea:	bf0c      	ite	eq
 800acec:	2308      	moveq	r3, #8
 800acee:	230a      	movne	r3, #10
 800acf0:	2100      	movs	r1, #0
 800acf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800acf6:	6865      	ldr	r5, [r4, #4]
 800acf8:	60a5      	str	r5, [r4, #8]
 800acfa:	2d00      	cmp	r5, #0
 800acfc:	bfa2      	ittt	ge
 800acfe:	6821      	ldrge	r1, [r4, #0]
 800ad00:	f021 0104 	bicge.w	r1, r1, #4
 800ad04:	6021      	strge	r1, [r4, #0]
 800ad06:	b90e      	cbnz	r6, 800ad0c <_printf_i+0x118>
 800ad08:	2d00      	cmp	r5, #0
 800ad0a:	d04d      	beq.n	800ada8 <_printf_i+0x1b4>
 800ad0c:	4615      	mov	r5, r2
 800ad0e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ad12:	fb03 6711 	mls	r7, r3, r1, r6
 800ad16:	5dc7      	ldrb	r7, [r0, r7]
 800ad18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ad1c:	4637      	mov	r7, r6
 800ad1e:	42bb      	cmp	r3, r7
 800ad20:	460e      	mov	r6, r1
 800ad22:	d9f4      	bls.n	800ad0e <_printf_i+0x11a>
 800ad24:	2b08      	cmp	r3, #8
 800ad26:	d10b      	bne.n	800ad40 <_printf_i+0x14c>
 800ad28:	6823      	ldr	r3, [r4, #0]
 800ad2a:	07de      	lsls	r6, r3, #31
 800ad2c:	d508      	bpl.n	800ad40 <_printf_i+0x14c>
 800ad2e:	6923      	ldr	r3, [r4, #16]
 800ad30:	6861      	ldr	r1, [r4, #4]
 800ad32:	4299      	cmp	r1, r3
 800ad34:	bfde      	ittt	le
 800ad36:	2330      	movle	r3, #48	; 0x30
 800ad38:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad40:	1b52      	subs	r2, r2, r5
 800ad42:	6122      	str	r2, [r4, #16]
 800ad44:	f8cd a000 	str.w	sl, [sp]
 800ad48:	464b      	mov	r3, r9
 800ad4a:	aa03      	add	r2, sp, #12
 800ad4c:	4621      	mov	r1, r4
 800ad4e:	4640      	mov	r0, r8
 800ad50:	f7ff fee2 	bl	800ab18 <_printf_common>
 800ad54:	3001      	adds	r0, #1
 800ad56:	d14c      	bne.n	800adf2 <_printf_i+0x1fe>
 800ad58:	f04f 30ff 	mov.w	r0, #4294967295
 800ad5c:	b004      	add	sp, #16
 800ad5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad62:	4835      	ldr	r0, [pc, #212]	; (800ae38 <_printf_i+0x244>)
 800ad64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ad68:	6829      	ldr	r1, [r5, #0]
 800ad6a:	6823      	ldr	r3, [r4, #0]
 800ad6c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ad70:	6029      	str	r1, [r5, #0]
 800ad72:	061d      	lsls	r5, r3, #24
 800ad74:	d514      	bpl.n	800ada0 <_printf_i+0x1ac>
 800ad76:	07df      	lsls	r7, r3, #31
 800ad78:	bf44      	itt	mi
 800ad7a:	f043 0320 	orrmi.w	r3, r3, #32
 800ad7e:	6023      	strmi	r3, [r4, #0]
 800ad80:	b91e      	cbnz	r6, 800ad8a <_printf_i+0x196>
 800ad82:	6823      	ldr	r3, [r4, #0]
 800ad84:	f023 0320 	bic.w	r3, r3, #32
 800ad88:	6023      	str	r3, [r4, #0]
 800ad8a:	2310      	movs	r3, #16
 800ad8c:	e7b0      	b.n	800acf0 <_printf_i+0xfc>
 800ad8e:	6823      	ldr	r3, [r4, #0]
 800ad90:	f043 0320 	orr.w	r3, r3, #32
 800ad94:	6023      	str	r3, [r4, #0]
 800ad96:	2378      	movs	r3, #120	; 0x78
 800ad98:	4828      	ldr	r0, [pc, #160]	; (800ae3c <_printf_i+0x248>)
 800ad9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad9e:	e7e3      	b.n	800ad68 <_printf_i+0x174>
 800ada0:	0659      	lsls	r1, r3, #25
 800ada2:	bf48      	it	mi
 800ada4:	b2b6      	uxthmi	r6, r6
 800ada6:	e7e6      	b.n	800ad76 <_printf_i+0x182>
 800ada8:	4615      	mov	r5, r2
 800adaa:	e7bb      	b.n	800ad24 <_printf_i+0x130>
 800adac:	682b      	ldr	r3, [r5, #0]
 800adae:	6826      	ldr	r6, [r4, #0]
 800adb0:	6961      	ldr	r1, [r4, #20]
 800adb2:	1d18      	adds	r0, r3, #4
 800adb4:	6028      	str	r0, [r5, #0]
 800adb6:	0635      	lsls	r5, r6, #24
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	d501      	bpl.n	800adc0 <_printf_i+0x1cc>
 800adbc:	6019      	str	r1, [r3, #0]
 800adbe:	e002      	b.n	800adc6 <_printf_i+0x1d2>
 800adc0:	0670      	lsls	r0, r6, #25
 800adc2:	d5fb      	bpl.n	800adbc <_printf_i+0x1c8>
 800adc4:	8019      	strh	r1, [r3, #0]
 800adc6:	2300      	movs	r3, #0
 800adc8:	6123      	str	r3, [r4, #16]
 800adca:	4615      	mov	r5, r2
 800adcc:	e7ba      	b.n	800ad44 <_printf_i+0x150>
 800adce:	682b      	ldr	r3, [r5, #0]
 800add0:	1d1a      	adds	r2, r3, #4
 800add2:	602a      	str	r2, [r5, #0]
 800add4:	681d      	ldr	r5, [r3, #0]
 800add6:	6862      	ldr	r2, [r4, #4]
 800add8:	2100      	movs	r1, #0
 800adda:	4628      	mov	r0, r5
 800addc:	f7f5 fa18 	bl	8000210 <memchr>
 800ade0:	b108      	cbz	r0, 800ade6 <_printf_i+0x1f2>
 800ade2:	1b40      	subs	r0, r0, r5
 800ade4:	6060      	str	r0, [r4, #4]
 800ade6:	6863      	ldr	r3, [r4, #4]
 800ade8:	6123      	str	r3, [r4, #16]
 800adea:	2300      	movs	r3, #0
 800adec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adf0:	e7a8      	b.n	800ad44 <_printf_i+0x150>
 800adf2:	6923      	ldr	r3, [r4, #16]
 800adf4:	462a      	mov	r2, r5
 800adf6:	4649      	mov	r1, r9
 800adf8:	4640      	mov	r0, r8
 800adfa:	47d0      	blx	sl
 800adfc:	3001      	adds	r0, #1
 800adfe:	d0ab      	beq.n	800ad58 <_printf_i+0x164>
 800ae00:	6823      	ldr	r3, [r4, #0]
 800ae02:	079b      	lsls	r3, r3, #30
 800ae04:	d413      	bmi.n	800ae2e <_printf_i+0x23a>
 800ae06:	68e0      	ldr	r0, [r4, #12]
 800ae08:	9b03      	ldr	r3, [sp, #12]
 800ae0a:	4298      	cmp	r0, r3
 800ae0c:	bfb8      	it	lt
 800ae0e:	4618      	movlt	r0, r3
 800ae10:	e7a4      	b.n	800ad5c <_printf_i+0x168>
 800ae12:	2301      	movs	r3, #1
 800ae14:	4632      	mov	r2, r6
 800ae16:	4649      	mov	r1, r9
 800ae18:	4640      	mov	r0, r8
 800ae1a:	47d0      	blx	sl
 800ae1c:	3001      	adds	r0, #1
 800ae1e:	d09b      	beq.n	800ad58 <_printf_i+0x164>
 800ae20:	3501      	adds	r5, #1
 800ae22:	68e3      	ldr	r3, [r4, #12]
 800ae24:	9903      	ldr	r1, [sp, #12]
 800ae26:	1a5b      	subs	r3, r3, r1
 800ae28:	42ab      	cmp	r3, r5
 800ae2a:	dcf2      	bgt.n	800ae12 <_printf_i+0x21e>
 800ae2c:	e7eb      	b.n	800ae06 <_printf_i+0x212>
 800ae2e:	2500      	movs	r5, #0
 800ae30:	f104 0619 	add.w	r6, r4, #25
 800ae34:	e7f5      	b.n	800ae22 <_printf_i+0x22e>
 800ae36:	bf00      	nop
 800ae38:	0800e532 	.word	0x0800e532
 800ae3c:	0800e543 	.word	0x0800e543

0800ae40 <iprintf>:
 800ae40:	b40f      	push	{r0, r1, r2, r3}
 800ae42:	4b0a      	ldr	r3, [pc, #40]	; (800ae6c <iprintf+0x2c>)
 800ae44:	b513      	push	{r0, r1, r4, lr}
 800ae46:	681c      	ldr	r4, [r3, #0]
 800ae48:	b124      	cbz	r4, 800ae54 <iprintf+0x14>
 800ae4a:	69a3      	ldr	r3, [r4, #24]
 800ae4c:	b913      	cbnz	r3, 800ae54 <iprintf+0x14>
 800ae4e:	4620      	mov	r0, r4
 800ae50:	f001 f85e 	bl	800bf10 <__sinit>
 800ae54:	ab05      	add	r3, sp, #20
 800ae56:	9a04      	ldr	r2, [sp, #16]
 800ae58:	68a1      	ldr	r1, [r4, #8]
 800ae5a:	9301      	str	r3, [sp, #4]
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	f001 fdc7 	bl	800c9f0 <_vfiprintf_r>
 800ae62:	b002      	add	sp, #8
 800ae64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae68:	b004      	add	sp, #16
 800ae6a:	4770      	bx	lr
 800ae6c:	20000054 	.word	0x20000054

0800ae70 <__utoa>:
 800ae70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae72:	4c1f      	ldr	r4, [pc, #124]	; (800aef0 <__utoa+0x80>)
 800ae74:	b08b      	sub	sp, #44	; 0x2c
 800ae76:	4605      	mov	r5, r0
 800ae78:	460b      	mov	r3, r1
 800ae7a:	466e      	mov	r6, sp
 800ae7c:	f104 0c20 	add.w	ip, r4, #32
 800ae80:	6820      	ldr	r0, [r4, #0]
 800ae82:	6861      	ldr	r1, [r4, #4]
 800ae84:	4637      	mov	r7, r6
 800ae86:	c703      	stmia	r7!, {r0, r1}
 800ae88:	3408      	adds	r4, #8
 800ae8a:	4564      	cmp	r4, ip
 800ae8c:	463e      	mov	r6, r7
 800ae8e:	d1f7      	bne.n	800ae80 <__utoa+0x10>
 800ae90:	7921      	ldrb	r1, [r4, #4]
 800ae92:	7139      	strb	r1, [r7, #4]
 800ae94:	1e91      	subs	r1, r2, #2
 800ae96:	6820      	ldr	r0, [r4, #0]
 800ae98:	6038      	str	r0, [r7, #0]
 800ae9a:	2922      	cmp	r1, #34	; 0x22
 800ae9c:	f04f 0100 	mov.w	r1, #0
 800aea0:	d904      	bls.n	800aeac <__utoa+0x3c>
 800aea2:	7019      	strb	r1, [r3, #0]
 800aea4:	460b      	mov	r3, r1
 800aea6:	4618      	mov	r0, r3
 800aea8:	b00b      	add	sp, #44	; 0x2c
 800aeaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeac:	1e58      	subs	r0, r3, #1
 800aeae:	4684      	mov	ip, r0
 800aeb0:	fbb5 f7f2 	udiv	r7, r5, r2
 800aeb4:	fb02 5617 	mls	r6, r2, r7, r5
 800aeb8:	3628      	adds	r6, #40	; 0x28
 800aeba:	446e      	add	r6, sp
 800aebc:	460c      	mov	r4, r1
 800aebe:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800aec2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800aec6:	462e      	mov	r6, r5
 800aec8:	42b2      	cmp	r2, r6
 800aeca:	f101 0101 	add.w	r1, r1, #1
 800aece:	463d      	mov	r5, r7
 800aed0:	d9ee      	bls.n	800aeb0 <__utoa+0x40>
 800aed2:	2200      	movs	r2, #0
 800aed4:	545a      	strb	r2, [r3, r1]
 800aed6:	1919      	adds	r1, r3, r4
 800aed8:	1aa5      	subs	r5, r4, r2
 800aeda:	42aa      	cmp	r2, r5
 800aedc:	dae3      	bge.n	800aea6 <__utoa+0x36>
 800aede:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800aee2:	780e      	ldrb	r6, [r1, #0]
 800aee4:	7006      	strb	r6, [r0, #0]
 800aee6:	3201      	adds	r2, #1
 800aee8:	f801 5901 	strb.w	r5, [r1], #-1
 800aeec:	e7f4      	b.n	800aed8 <__utoa+0x68>
 800aeee:	bf00      	nop
 800aef0:	0800e554 	.word	0x0800e554

0800aef4 <quorem>:
 800aef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef8:	6903      	ldr	r3, [r0, #16]
 800aefa:	690c      	ldr	r4, [r1, #16]
 800aefc:	42a3      	cmp	r3, r4
 800aefe:	4607      	mov	r7, r0
 800af00:	f2c0 8081 	blt.w	800b006 <quorem+0x112>
 800af04:	3c01      	subs	r4, #1
 800af06:	f101 0814 	add.w	r8, r1, #20
 800af0a:	f100 0514 	add.w	r5, r0, #20
 800af0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af12:	9301      	str	r3, [sp, #4]
 800af14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af1c:	3301      	adds	r3, #1
 800af1e:	429a      	cmp	r2, r3
 800af20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800af24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af28:	fbb2 f6f3 	udiv	r6, r2, r3
 800af2c:	d331      	bcc.n	800af92 <quorem+0x9e>
 800af2e:	f04f 0e00 	mov.w	lr, #0
 800af32:	4640      	mov	r0, r8
 800af34:	46ac      	mov	ip, r5
 800af36:	46f2      	mov	sl, lr
 800af38:	f850 2b04 	ldr.w	r2, [r0], #4
 800af3c:	b293      	uxth	r3, r2
 800af3e:	fb06 e303 	mla	r3, r6, r3, lr
 800af42:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800af46:	b29b      	uxth	r3, r3
 800af48:	ebaa 0303 	sub.w	r3, sl, r3
 800af4c:	f8dc a000 	ldr.w	sl, [ip]
 800af50:	0c12      	lsrs	r2, r2, #16
 800af52:	fa13 f38a 	uxtah	r3, r3, sl
 800af56:	fb06 e202 	mla	r2, r6, r2, lr
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	9b00      	ldr	r3, [sp, #0]
 800af5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800af62:	b292      	uxth	r2, r2
 800af64:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800af68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af6c:	f8bd 3000 	ldrh.w	r3, [sp]
 800af70:	4581      	cmp	r9, r0
 800af72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af76:	f84c 3b04 	str.w	r3, [ip], #4
 800af7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800af7e:	d2db      	bcs.n	800af38 <quorem+0x44>
 800af80:	f855 300b 	ldr.w	r3, [r5, fp]
 800af84:	b92b      	cbnz	r3, 800af92 <quorem+0x9e>
 800af86:	9b01      	ldr	r3, [sp, #4]
 800af88:	3b04      	subs	r3, #4
 800af8a:	429d      	cmp	r5, r3
 800af8c:	461a      	mov	r2, r3
 800af8e:	d32e      	bcc.n	800afee <quorem+0xfa>
 800af90:	613c      	str	r4, [r7, #16]
 800af92:	4638      	mov	r0, r7
 800af94:	f001 faec 	bl	800c570 <__mcmp>
 800af98:	2800      	cmp	r0, #0
 800af9a:	db24      	blt.n	800afe6 <quorem+0xf2>
 800af9c:	3601      	adds	r6, #1
 800af9e:	4628      	mov	r0, r5
 800afa0:	f04f 0c00 	mov.w	ip, #0
 800afa4:	f858 2b04 	ldr.w	r2, [r8], #4
 800afa8:	f8d0 e000 	ldr.w	lr, [r0]
 800afac:	b293      	uxth	r3, r2
 800afae:	ebac 0303 	sub.w	r3, ip, r3
 800afb2:	0c12      	lsrs	r2, r2, #16
 800afb4:	fa13 f38e 	uxtah	r3, r3, lr
 800afb8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800afbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afc6:	45c1      	cmp	r9, r8
 800afc8:	f840 3b04 	str.w	r3, [r0], #4
 800afcc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800afd0:	d2e8      	bcs.n	800afa4 <quorem+0xb0>
 800afd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afda:	b922      	cbnz	r2, 800afe6 <quorem+0xf2>
 800afdc:	3b04      	subs	r3, #4
 800afde:	429d      	cmp	r5, r3
 800afe0:	461a      	mov	r2, r3
 800afe2:	d30a      	bcc.n	800affa <quorem+0x106>
 800afe4:	613c      	str	r4, [r7, #16]
 800afe6:	4630      	mov	r0, r6
 800afe8:	b003      	add	sp, #12
 800afea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afee:	6812      	ldr	r2, [r2, #0]
 800aff0:	3b04      	subs	r3, #4
 800aff2:	2a00      	cmp	r2, #0
 800aff4:	d1cc      	bne.n	800af90 <quorem+0x9c>
 800aff6:	3c01      	subs	r4, #1
 800aff8:	e7c7      	b.n	800af8a <quorem+0x96>
 800affa:	6812      	ldr	r2, [r2, #0]
 800affc:	3b04      	subs	r3, #4
 800affe:	2a00      	cmp	r2, #0
 800b000:	d1f0      	bne.n	800afe4 <quorem+0xf0>
 800b002:	3c01      	subs	r4, #1
 800b004:	e7eb      	b.n	800afde <quorem+0xea>
 800b006:	2000      	movs	r0, #0
 800b008:	e7ee      	b.n	800afe8 <quorem+0xf4>
 800b00a:	0000      	movs	r0, r0
 800b00c:	0000      	movs	r0, r0
	...

0800b010 <_dtoa_r>:
 800b010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b014:	ed2d 8b04 	vpush	{d8-d9}
 800b018:	ec57 6b10 	vmov	r6, r7, d0
 800b01c:	b093      	sub	sp, #76	; 0x4c
 800b01e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b020:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b024:	9106      	str	r1, [sp, #24]
 800b026:	ee10 aa10 	vmov	sl, s0
 800b02a:	4604      	mov	r4, r0
 800b02c:	9209      	str	r2, [sp, #36]	; 0x24
 800b02e:	930c      	str	r3, [sp, #48]	; 0x30
 800b030:	46bb      	mov	fp, r7
 800b032:	b975      	cbnz	r5, 800b052 <_dtoa_r+0x42>
 800b034:	2010      	movs	r0, #16
 800b036:	f001 f811 	bl	800c05c <malloc>
 800b03a:	4602      	mov	r2, r0
 800b03c:	6260      	str	r0, [r4, #36]	; 0x24
 800b03e:	b920      	cbnz	r0, 800b04a <_dtoa_r+0x3a>
 800b040:	4ba7      	ldr	r3, [pc, #668]	; (800b2e0 <_dtoa_r+0x2d0>)
 800b042:	21ea      	movs	r1, #234	; 0xea
 800b044:	48a7      	ldr	r0, [pc, #668]	; (800b2e4 <_dtoa_r+0x2d4>)
 800b046:	f001 ff31 	bl	800ceac <__assert_func>
 800b04a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b04e:	6005      	str	r5, [r0, #0]
 800b050:	60c5      	str	r5, [r0, #12]
 800b052:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b054:	6819      	ldr	r1, [r3, #0]
 800b056:	b151      	cbz	r1, 800b06e <_dtoa_r+0x5e>
 800b058:	685a      	ldr	r2, [r3, #4]
 800b05a:	604a      	str	r2, [r1, #4]
 800b05c:	2301      	movs	r3, #1
 800b05e:	4093      	lsls	r3, r2
 800b060:	608b      	str	r3, [r1, #8]
 800b062:	4620      	mov	r0, r4
 800b064:	f001 f842 	bl	800c0ec <_Bfree>
 800b068:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b06a:	2200      	movs	r2, #0
 800b06c:	601a      	str	r2, [r3, #0]
 800b06e:	1e3b      	subs	r3, r7, #0
 800b070:	bfaa      	itet	ge
 800b072:	2300      	movge	r3, #0
 800b074:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b078:	f8c8 3000 	strge.w	r3, [r8]
 800b07c:	4b9a      	ldr	r3, [pc, #616]	; (800b2e8 <_dtoa_r+0x2d8>)
 800b07e:	bfbc      	itt	lt
 800b080:	2201      	movlt	r2, #1
 800b082:	f8c8 2000 	strlt.w	r2, [r8]
 800b086:	ea33 030b 	bics.w	r3, r3, fp
 800b08a:	d11b      	bne.n	800b0c4 <_dtoa_r+0xb4>
 800b08c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b08e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b092:	6013      	str	r3, [r2, #0]
 800b094:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b098:	4333      	orrs	r3, r6
 800b09a:	f000 8592 	beq.w	800bbc2 <_dtoa_r+0xbb2>
 800b09e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0a0:	b963      	cbnz	r3, 800b0bc <_dtoa_r+0xac>
 800b0a2:	4b92      	ldr	r3, [pc, #584]	; (800b2ec <_dtoa_r+0x2dc>)
 800b0a4:	e022      	b.n	800b0ec <_dtoa_r+0xdc>
 800b0a6:	4b92      	ldr	r3, [pc, #584]	; (800b2f0 <_dtoa_r+0x2e0>)
 800b0a8:	9301      	str	r3, [sp, #4]
 800b0aa:	3308      	adds	r3, #8
 800b0ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b0ae:	6013      	str	r3, [r2, #0]
 800b0b0:	9801      	ldr	r0, [sp, #4]
 800b0b2:	b013      	add	sp, #76	; 0x4c
 800b0b4:	ecbd 8b04 	vpop	{d8-d9}
 800b0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0bc:	4b8b      	ldr	r3, [pc, #556]	; (800b2ec <_dtoa_r+0x2dc>)
 800b0be:	9301      	str	r3, [sp, #4]
 800b0c0:	3303      	adds	r3, #3
 800b0c2:	e7f3      	b.n	800b0ac <_dtoa_r+0x9c>
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	4650      	mov	r0, sl
 800b0ca:	4659      	mov	r1, fp
 800b0cc:	f7f5 fd14 	bl	8000af8 <__aeabi_dcmpeq>
 800b0d0:	ec4b ab19 	vmov	d9, sl, fp
 800b0d4:	4680      	mov	r8, r0
 800b0d6:	b158      	cbz	r0, 800b0f0 <_dtoa_r+0xe0>
 800b0d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0da:	2301      	movs	r3, #1
 800b0dc:	6013      	str	r3, [r2, #0]
 800b0de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f000 856b 	beq.w	800bbbc <_dtoa_r+0xbac>
 800b0e6:	4883      	ldr	r0, [pc, #524]	; (800b2f4 <_dtoa_r+0x2e4>)
 800b0e8:	6018      	str	r0, [r3, #0]
 800b0ea:	1e43      	subs	r3, r0, #1
 800b0ec:	9301      	str	r3, [sp, #4]
 800b0ee:	e7df      	b.n	800b0b0 <_dtoa_r+0xa0>
 800b0f0:	ec4b ab10 	vmov	d0, sl, fp
 800b0f4:	aa10      	add	r2, sp, #64	; 0x40
 800b0f6:	a911      	add	r1, sp, #68	; 0x44
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f001 fadf 	bl	800c6bc <__d2b>
 800b0fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b102:	ee08 0a10 	vmov	s16, r0
 800b106:	2d00      	cmp	r5, #0
 800b108:	f000 8084 	beq.w	800b214 <_dtoa_r+0x204>
 800b10c:	ee19 3a90 	vmov	r3, s19
 800b110:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b114:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b118:	4656      	mov	r6, sl
 800b11a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b11e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b122:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b126:	4b74      	ldr	r3, [pc, #464]	; (800b2f8 <_dtoa_r+0x2e8>)
 800b128:	2200      	movs	r2, #0
 800b12a:	4630      	mov	r0, r6
 800b12c:	4639      	mov	r1, r7
 800b12e:	f7f5 f8c3 	bl	80002b8 <__aeabi_dsub>
 800b132:	a365      	add	r3, pc, #404	; (adr r3, 800b2c8 <_dtoa_r+0x2b8>)
 800b134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b138:	f7f5 fa76 	bl	8000628 <__aeabi_dmul>
 800b13c:	a364      	add	r3, pc, #400	; (adr r3, 800b2d0 <_dtoa_r+0x2c0>)
 800b13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b142:	f7f5 f8bb 	bl	80002bc <__adddf3>
 800b146:	4606      	mov	r6, r0
 800b148:	4628      	mov	r0, r5
 800b14a:	460f      	mov	r7, r1
 800b14c:	f7f5 fa02 	bl	8000554 <__aeabi_i2d>
 800b150:	a361      	add	r3, pc, #388	; (adr r3, 800b2d8 <_dtoa_r+0x2c8>)
 800b152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b156:	f7f5 fa67 	bl	8000628 <__aeabi_dmul>
 800b15a:	4602      	mov	r2, r0
 800b15c:	460b      	mov	r3, r1
 800b15e:	4630      	mov	r0, r6
 800b160:	4639      	mov	r1, r7
 800b162:	f7f5 f8ab 	bl	80002bc <__adddf3>
 800b166:	4606      	mov	r6, r0
 800b168:	460f      	mov	r7, r1
 800b16a:	f7f5 fd0d 	bl	8000b88 <__aeabi_d2iz>
 800b16e:	2200      	movs	r2, #0
 800b170:	9000      	str	r0, [sp, #0]
 800b172:	2300      	movs	r3, #0
 800b174:	4630      	mov	r0, r6
 800b176:	4639      	mov	r1, r7
 800b178:	f7f5 fcc8 	bl	8000b0c <__aeabi_dcmplt>
 800b17c:	b150      	cbz	r0, 800b194 <_dtoa_r+0x184>
 800b17e:	9800      	ldr	r0, [sp, #0]
 800b180:	f7f5 f9e8 	bl	8000554 <__aeabi_i2d>
 800b184:	4632      	mov	r2, r6
 800b186:	463b      	mov	r3, r7
 800b188:	f7f5 fcb6 	bl	8000af8 <__aeabi_dcmpeq>
 800b18c:	b910      	cbnz	r0, 800b194 <_dtoa_r+0x184>
 800b18e:	9b00      	ldr	r3, [sp, #0]
 800b190:	3b01      	subs	r3, #1
 800b192:	9300      	str	r3, [sp, #0]
 800b194:	9b00      	ldr	r3, [sp, #0]
 800b196:	2b16      	cmp	r3, #22
 800b198:	d85a      	bhi.n	800b250 <_dtoa_r+0x240>
 800b19a:	9a00      	ldr	r2, [sp, #0]
 800b19c:	4b57      	ldr	r3, [pc, #348]	; (800b2fc <_dtoa_r+0x2ec>)
 800b19e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a6:	ec51 0b19 	vmov	r0, r1, d9
 800b1aa:	f7f5 fcaf 	bl	8000b0c <__aeabi_dcmplt>
 800b1ae:	2800      	cmp	r0, #0
 800b1b0:	d050      	beq.n	800b254 <_dtoa_r+0x244>
 800b1b2:	9b00      	ldr	r3, [sp, #0]
 800b1b4:	3b01      	subs	r3, #1
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1be:	1b5d      	subs	r5, r3, r5
 800b1c0:	1e6b      	subs	r3, r5, #1
 800b1c2:	9305      	str	r3, [sp, #20]
 800b1c4:	bf45      	ittet	mi
 800b1c6:	f1c5 0301 	rsbmi	r3, r5, #1
 800b1ca:	9304      	strmi	r3, [sp, #16]
 800b1cc:	2300      	movpl	r3, #0
 800b1ce:	2300      	movmi	r3, #0
 800b1d0:	bf4c      	ite	mi
 800b1d2:	9305      	strmi	r3, [sp, #20]
 800b1d4:	9304      	strpl	r3, [sp, #16]
 800b1d6:	9b00      	ldr	r3, [sp, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	db3d      	blt.n	800b258 <_dtoa_r+0x248>
 800b1dc:	9b05      	ldr	r3, [sp, #20]
 800b1de:	9a00      	ldr	r2, [sp, #0]
 800b1e0:	920a      	str	r2, [sp, #40]	; 0x28
 800b1e2:	4413      	add	r3, r2
 800b1e4:	9305      	str	r3, [sp, #20]
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	9307      	str	r3, [sp, #28]
 800b1ea:	9b06      	ldr	r3, [sp, #24]
 800b1ec:	2b09      	cmp	r3, #9
 800b1ee:	f200 8089 	bhi.w	800b304 <_dtoa_r+0x2f4>
 800b1f2:	2b05      	cmp	r3, #5
 800b1f4:	bfc4      	itt	gt
 800b1f6:	3b04      	subgt	r3, #4
 800b1f8:	9306      	strgt	r3, [sp, #24]
 800b1fa:	9b06      	ldr	r3, [sp, #24]
 800b1fc:	f1a3 0302 	sub.w	r3, r3, #2
 800b200:	bfcc      	ite	gt
 800b202:	2500      	movgt	r5, #0
 800b204:	2501      	movle	r5, #1
 800b206:	2b03      	cmp	r3, #3
 800b208:	f200 8087 	bhi.w	800b31a <_dtoa_r+0x30a>
 800b20c:	e8df f003 	tbb	[pc, r3]
 800b210:	59383a2d 	.word	0x59383a2d
 800b214:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b218:	441d      	add	r5, r3
 800b21a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b21e:	2b20      	cmp	r3, #32
 800b220:	bfc1      	itttt	gt
 800b222:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b226:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b22a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b22e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b232:	bfda      	itte	le
 800b234:	f1c3 0320 	rsble	r3, r3, #32
 800b238:	fa06 f003 	lslle.w	r0, r6, r3
 800b23c:	4318      	orrgt	r0, r3
 800b23e:	f7f5 f979 	bl	8000534 <__aeabi_ui2d>
 800b242:	2301      	movs	r3, #1
 800b244:	4606      	mov	r6, r0
 800b246:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b24a:	3d01      	subs	r5, #1
 800b24c:	930e      	str	r3, [sp, #56]	; 0x38
 800b24e:	e76a      	b.n	800b126 <_dtoa_r+0x116>
 800b250:	2301      	movs	r3, #1
 800b252:	e7b2      	b.n	800b1ba <_dtoa_r+0x1aa>
 800b254:	900b      	str	r0, [sp, #44]	; 0x2c
 800b256:	e7b1      	b.n	800b1bc <_dtoa_r+0x1ac>
 800b258:	9b04      	ldr	r3, [sp, #16]
 800b25a:	9a00      	ldr	r2, [sp, #0]
 800b25c:	1a9b      	subs	r3, r3, r2
 800b25e:	9304      	str	r3, [sp, #16]
 800b260:	4253      	negs	r3, r2
 800b262:	9307      	str	r3, [sp, #28]
 800b264:	2300      	movs	r3, #0
 800b266:	930a      	str	r3, [sp, #40]	; 0x28
 800b268:	e7bf      	b.n	800b1ea <_dtoa_r+0x1da>
 800b26a:	2300      	movs	r3, #0
 800b26c:	9308      	str	r3, [sp, #32]
 800b26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b270:	2b00      	cmp	r3, #0
 800b272:	dc55      	bgt.n	800b320 <_dtoa_r+0x310>
 800b274:	2301      	movs	r3, #1
 800b276:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b27a:	461a      	mov	r2, r3
 800b27c:	9209      	str	r2, [sp, #36]	; 0x24
 800b27e:	e00c      	b.n	800b29a <_dtoa_r+0x28a>
 800b280:	2301      	movs	r3, #1
 800b282:	e7f3      	b.n	800b26c <_dtoa_r+0x25c>
 800b284:	2300      	movs	r3, #0
 800b286:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b288:	9308      	str	r3, [sp, #32]
 800b28a:	9b00      	ldr	r3, [sp, #0]
 800b28c:	4413      	add	r3, r2
 800b28e:	9302      	str	r3, [sp, #8]
 800b290:	3301      	adds	r3, #1
 800b292:	2b01      	cmp	r3, #1
 800b294:	9303      	str	r3, [sp, #12]
 800b296:	bfb8      	it	lt
 800b298:	2301      	movlt	r3, #1
 800b29a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b29c:	2200      	movs	r2, #0
 800b29e:	6042      	str	r2, [r0, #4]
 800b2a0:	2204      	movs	r2, #4
 800b2a2:	f102 0614 	add.w	r6, r2, #20
 800b2a6:	429e      	cmp	r6, r3
 800b2a8:	6841      	ldr	r1, [r0, #4]
 800b2aa:	d93d      	bls.n	800b328 <_dtoa_r+0x318>
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	f000 fedd 	bl	800c06c <_Balloc>
 800b2b2:	9001      	str	r0, [sp, #4]
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	d13b      	bne.n	800b330 <_dtoa_r+0x320>
 800b2b8:	4b11      	ldr	r3, [pc, #68]	; (800b300 <_dtoa_r+0x2f0>)
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b2c0:	e6c0      	b.n	800b044 <_dtoa_r+0x34>
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e7df      	b.n	800b286 <_dtoa_r+0x276>
 800b2c6:	bf00      	nop
 800b2c8:	636f4361 	.word	0x636f4361
 800b2cc:	3fd287a7 	.word	0x3fd287a7
 800b2d0:	8b60c8b3 	.word	0x8b60c8b3
 800b2d4:	3fc68a28 	.word	0x3fc68a28
 800b2d8:	509f79fb 	.word	0x509f79fb
 800b2dc:	3fd34413 	.word	0x3fd34413
 800b2e0:	0800e586 	.word	0x0800e586
 800b2e4:	0800e59d 	.word	0x0800e59d
 800b2e8:	7ff00000 	.word	0x7ff00000
 800b2ec:	0800e582 	.word	0x0800e582
 800b2f0:	0800e579 	.word	0x0800e579
 800b2f4:	0800e531 	.word	0x0800e531
 800b2f8:	3ff80000 	.word	0x3ff80000
 800b2fc:	0800e6f0 	.word	0x0800e6f0
 800b300:	0800e5f8 	.word	0x0800e5f8
 800b304:	2501      	movs	r5, #1
 800b306:	2300      	movs	r3, #0
 800b308:	9306      	str	r3, [sp, #24]
 800b30a:	9508      	str	r5, [sp, #32]
 800b30c:	f04f 33ff 	mov.w	r3, #4294967295
 800b310:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b314:	2200      	movs	r2, #0
 800b316:	2312      	movs	r3, #18
 800b318:	e7b0      	b.n	800b27c <_dtoa_r+0x26c>
 800b31a:	2301      	movs	r3, #1
 800b31c:	9308      	str	r3, [sp, #32]
 800b31e:	e7f5      	b.n	800b30c <_dtoa_r+0x2fc>
 800b320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b322:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b326:	e7b8      	b.n	800b29a <_dtoa_r+0x28a>
 800b328:	3101      	adds	r1, #1
 800b32a:	6041      	str	r1, [r0, #4]
 800b32c:	0052      	lsls	r2, r2, #1
 800b32e:	e7b8      	b.n	800b2a2 <_dtoa_r+0x292>
 800b330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b332:	9a01      	ldr	r2, [sp, #4]
 800b334:	601a      	str	r2, [r3, #0]
 800b336:	9b03      	ldr	r3, [sp, #12]
 800b338:	2b0e      	cmp	r3, #14
 800b33a:	f200 809d 	bhi.w	800b478 <_dtoa_r+0x468>
 800b33e:	2d00      	cmp	r5, #0
 800b340:	f000 809a 	beq.w	800b478 <_dtoa_r+0x468>
 800b344:	9b00      	ldr	r3, [sp, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	dd32      	ble.n	800b3b0 <_dtoa_r+0x3a0>
 800b34a:	4ab7      	ldr	r2, [pc, #732]	; (800b628 <_dtoa_r+0x618>)
 800b34c:	f003 030f 	and.w	r3, r3, #15
 800b350:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b354:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b358:	9b00      	ldr	r3, [sp, #0]
 800b35a:	05d8      	lsls	r0, r3, #23
 800b35c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b360:	d516      	bpl.n	800b390 <_dtoa_r+0x380>
 800b362:	4bb2      	ldr	r3, [pc, #712]	; (800b62c <_dtoa_r+0x61c>)
 800b364:	ec51 0b19 	vmov	r0, r1, d9
 800b368:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b36c:	f7f5 fa86 	bl	800087c <__aeabi_ddiv>
 800b370:	f007 070f 	and.w	r7, r7, #15
 800b374:	4682      	mov	sl, r0
 800b376:	468b      	mov	fp, r1
 800b378:	2503      	movs	r5, #3
 800b37a:	4eac      	ldr	r6, [pc, #688]	; (800b62c <_dtoa_r+0x61c>)
 800b37c:	b957      	cbnz	r7, 800b394 <_dtoa_r+0x384>
 800b37e:	4642      	mov	r2, r8
 800b380:	464b      	mov	r3, r9
 800b382:	4650      	mov	r0, sl
 800b384:	4659      	mov	r1, fp
 800b386:	f7f5 fa79 	bl	800087c <__aeabi_ddiv>
 800b38a:	4682      	mov	sl, r0
 800b38c:	468b      	mov	fp, r1
 800b38e:	e028      	b.n	800b3e2 <_dtoa_r+0x3d2>
 800b390:	2502      	movs	r5, #2
 800b392:	e7f2      	b.n	800b37a <_dtoa_r+0x36a>
 800b394:	07f9      	lsls	r1, r7, #31
 800b396:	d508      	bpl.n	800b3aa <_dtoa_r+0x39a>
 800b398:	4640      	mov	r0, r8
 800b39a:	4649      	mov	r1, r9
 800b39c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b3a0:	f7f5 f942 	bl	8000628 <__aeabi_dmul>
 800b3a4:	3501      	adds	r5, #1
 800b3a6:	4680      	mov	r8, r0
 800b3a8:	4689      	mov	r9, r1
 800b3aa:	107f      	asrs	r7, r7, #1
 800b3ac:	3608      	adds	r6, #8
 800b3ae:	e7e5      	b.n	800b37c <_dtoa_r+0x36c>
 800b3b0:	f000 809b 	beq.w	800b4ea <_dtoa_r+0x4da>
 800b3b4:	9b00      	ldr	r3, [sp, #0]
 800b3b6:	4f9d      	ldr	r7, [pc, #628]	; (800b62c <_dtoa_r+0x61c>)
 800b3b8:	425e      	negs	r6, r3
 800b3ba:	4b9b      	ldr	r3, [pc, #620]	; (800b628 <_dtoa_r+0x618>)
 800b3bc:	f006 020f 	and.w	r2, r6, #15
 800b3c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c8:	ec51 0b19 	vmov	r0, r1, d9
 800b3cc:	f7f5 f92c 	bl	8000628 <__aeabi_dmul>
 800b3d0:	1136      	asrs	r6, r6, #4
 800b3d2:	4682      	mov	sl, r0
 800b3d4:	468b      	mov	fp, r1
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	2502      	movs	r5, #2
 800b3da:	2e00      	cmp	r6, #0
 800b3dc:	d17a      	bne.n	800b4d4 <_dtoa_r+0x4c4>
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d1d3      	bne.n	800b38a <_dtoa_r+0x37a>
 800b3e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	f000 8082 	beq.w	800b4ee <_dtoa_r+0x4de>
 800b3ea:	4b91      	ldr	r3, [pc, #580]	; (800b630 <_dtoa_r+0x620>)
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	4650      	mov	r0, sl
 800b3f0:	4659      	mov	r1, fp
 800b3f2:	f7f5 fb8b 	bl	8000b0c <__aeabi_dcmplt>
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	d079      	beq.n	800b4ee <_dtoa_r+0x4de>
 800b3fa:	9b03      	ldr	r3, [sp, #12]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d076      	beq.n	800b4ee <_dtoa_r+0x4de>
 800b400:	9b02      	ldr	r3, [sp, #8]
 800b402:	2b00      	cmp	r3, #0
 800b404:	dd36      	ble.n	800b474 <_dtoa_r+0x464>
 800b406:	9b00      	ldr	r3, [sp, #0]
 800b408:	4650      	mov	r0, sl
 800b40a:	4659      	mov	r1, fp
 800b40c:	1e5f      	subs	r7, r3, #1
 800b40e:	2200      	movs	r2, #0
 800b410:	4b88      	ldr	r3, [pc, #544]	; (800b634 <_dtoa_r+0x624>)
 800b412:	f7f5 f909 	bl	8000628 <__aeabi_dmul>
 800b416:	9e02      	ldr	r6, [sp, #8]
 800b418:	4682      	mov	sl, r0
 800b41a:	468b      	mov	fp, r1
 800b41c:	3501      	adds	r5, #1
 800b41e:	4628      	mov	r0, r5
 800b420:	f7f5 f898 	bl	8000554 <__aeabi_i2d>
 800b424:	4652      	mov	r2, sl
 800b426:	465b      	mov	r3, fp
 800b428:	f7f5 f8fe 	bl	8000628 <__aeabi_dmul>
 800b42c:	4b82      	ldr	r3, [pc, #520]	; (800b638 <_dtoa_r+0x628>)
 800b42e:	2200      	movs	r2, #0
 800b430:	f7f4 ff44 	bl	80002bc <__adddf3>
 800b434:	46d0      	mov	r8, sl
 800b436:	46d9      	mov	r9, fp
 800b438:	4682      	mov	sl, r0
 800b43a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b43e:	2e00      	cmp	r6, #0
 800b440:	d158      	bne.n	800b4f4 <_dtoa_r+0x4e4>
 800b442:	4b7e      	ldr	r3, [pc, #504]	; (800b63c <_dtoa_r+0x62c>)
 800b444:	2200      	movs	r2, #0
 800b446:	4640      	mov	r0, r8
 800b448:	4649      	mov	r1, r9
 800b44a:	f7f4 ff35 	bl	80002b8 <__aeabi_dsub>
 800b44e:	4652      	mov	r2, sl
 800b450:	465b      	mov	r3, fp
 800b452:	4680      	mov	r8, r0
 800b454:	4689      	mov	r9, r1
 800b456:	f7f5 fb77 	bl	8000b48 <__aeabi_dcmpgt>
 800b45a:	2800      	cmp	r0, #0
 800b45c:	f040 8295 	bne.w	800b98a <_dtoa_r+0x97a>
 800b460:	4652      	mov	r2, sl
 800b462:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b466:	4640      	mov	r0, r8
 800b468:	4649      	mov	r1, r9
 800b46a:	f7f5 fb4f 	bl	8000b0c <__aeabi_dcmplt>
 800b46e:	2800      	cmp	r0, #0
 800b470:	f040 8289 	bne.w	800b986 <_dtoa_r+0x976>
 800b474:	ec5b ab19 	vmov	sl, fp, d9
 800b478:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	f2c0 8148 	blt.w	800b710 <_dtoa_r+0x700>
 800b480:	9a00      	ldr	r2, [sp, #0]
 800b482:	2a0e      	cmp	r2, #14
 800b484:	f300 8144 	bgt.w	800b710 <_dtoa_r+0x700>
 800b488:	4b67      	ldr	r3, [pc, #412]	; (800b628 <_dtoa_r+0x618>)
 800b48a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b48e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b494:	2b00      	cmp	r3, #0
 800b496:	f280 80d5 	bge.w	800b644 <_dtoa_r+0x634>
 800b49a:	9b03      	ldr	r3, [sp, #12]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f300 80d1 	bgt.w	800b644 <_dtoa_r+0x634>
 800b4a2:	f040 826f 	bne.w	800b984 <_dtoa_r+0x974>
 800b4a6:	4b65      	ldr	r3, [pc, #404]	; (800b63c <_dtoa_r+0x62c>)
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	4640      	mov	r0, r8
 800b4ac:	4649      	mov	r1, r9
 800b4ae:	f7f5 f8bb 	bl	8000628 <__aeabi_dmul>
 800b4b2:	4652      	mov	r2, sl
 800b4b4:	465b      	mov	r3, fp
 800b4b6:	f7f5 fb3d 	bl	8000b34 <__aeabi_dcmpge>
 800b4ba:	9e03      	ldr	r6, [sp, #12]
 800b4bc:	4637      	mov	r7, r6
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	f040 8245 	bne.w	800b94e <_dtoa_r+0x93e>
 800b4c4:	9d01      	ldr	r5, [sp, #4]
 800b4c6:	2331      	movs	r3, #49	; 0x31
 800b4c8:	f805 3b01 	strb.w	r3, [r5], #1
 800b4cc:	9b00      	ldr	r3, [sp, #0]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	9300      	str	r3, [sp, #0]
 800b4d2:	e240      	b.n	800b956 <_dtoa_r+0x946>
 800b4d4:	07f2      	lsls	r2, r6, #31
 800b4d6:	d505      	bpl.n	800b4e4 <_dtoa_r+0x4d4>
 800b4d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4dc:	f7f5 f8a4 	bl	8000628 <__aeabi_dmul>
 800b4e0:	3501      	adds	r5, #1
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	1076      	asrs	r6, r6, #1
 800b4e6:	3708      	adds	r7, #8
 800b4e8:	e777      	b.n	800b3da <_dtoa_r+0x3ca>
 800b4ea:	2502      	movs	r5, #2
 800b4ec:	e779      	b.n	800b3e2 <_dtoa_r+0x3d2>
 800b4ee:	9f00      	ldr	r7, [sp, #0]
 800b4f0:	9e03      	ldr	r6, [sp, #12]
 800b4f2:	e794      	b.n	800b41e <_dtoa_r+0x40e>
 800b4f4:	9901      	ldr	r1, [sp, #4]
 800b4f6:	4b4c      	ldr	r3, [pc, #304]	; (800b628 <_dtoa_r+0x618>)
 800b4f8:	4431      	add	r1, r6
 800b4fa:	910d      	str	r1, [sp, #52]	; 0x34
 800b4fc:	9908      	ldr	r1, [sp, #32]
 800b4fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b502:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b506:	2900      	cmp	r1, #0
 800b508:	d043      	beq.n	800b592 <_dtoa_r+0x582>
 800b50a:	494d      	ldr	r1, [pc, #308]	; (800b640 <_dtoa_r+0x630>)
 800b50c:	2000      	movs	r0, #0
 800b50e:	f7f5 f9b5 	bl	800087c <__aeabi_ddiv>
 800b512:	4652      	mov	r2, sl
 800b514:	465b      	mov	r3, fp
 800b516:	f7f4 fecf 	bl	80002b8 <__aeabi_dsub>
 800b51a:	9d01      	ldr	r5, [sp, #4]
 800b51c:	4682      	mov	sl, r0
 800b51e:	468b      	mov	fp, r1
 800b520:	4649      	mov	r1, r9
 800b522:	4640      	mov	r0, r8
 800b524:	f7f5 fb30 	bl	8000b88 <__aeabi_d2iz>
 800b528:	4606      	mov	r6, r0
 800b52a:	f7f5 f813 	bl	8000554 <__aeabi_i2d>
 800b52e:	4602      	mov	r2, r0
 800b530:	460b      	mov	r3, r1
 800b532:	4640      	mov	r0, r8
 800b534:	4649      	mov	r1, r9
 800b536:	f7f4 febf 	bl	80002b8 <__aeabi_dsub>
 800b53a:	3630      	adds	r6, #48	; 0x30
 800b53c:	f805 6b01 	strb.w	r6, [r5], #1
 800b540:	4652      	mov	r2, sl
 800b542:	465b      	mov	r3, fp
 800b544:	4680      	mov	r8, r0
 800b546:	4689      	mov	r9, r1
 800b548:	f7f5 fae0 	bl	8000b0c <__aeabi_dcmplt>
 800b54c:	2800      	cmp	r0, #0
 800b54e:	d163      	bne.n	800b618 <_dtoa_r+0x608>
 800b550:	4642      	mov	r2, r8
 800b552:	464b      	mov	r3, r9
 800b554:	4936      	ldr	r1, [pc, #216]	; (800b630 <_dtoa_r+0x620>)
 800b556:	2000      	movs	r0, #0
 800b558:	f7f4 feae 	bl	80002b8 <__aeabi_dsub>
 800b55c:	4652      	mov	r2, sl
 800b55e:	465b      	mov	r3, fp
 800b560:	f7f5 fad4 	bl	8000b0c <__aeabi_dcmplt>
 800b564:	2800      	cmp	r0, #0
 800b566:	f040 80b5 	bne.w	800b6d4 <_dtoa_r+0x6c4>
 800b56a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b56c:	429d      	cmp	r5, r3
 800b56e:	d081      	beq.n	800b474 <_dtoa_r+0x464>
 800b570:	4b30      	ldr	r3, [pc, #192]	; (800b634 <_dtoa_r+0x624>)
 800b572:	2200      	movs	r2, #0
 800b574:	4650      	mov	r0, sl
 800b576:	4659      	mov	r1, fp
 800b578:	f7f5 f856 	bl	8000628 <__aeabi_dmul>
 800b57c:	4b2d      	ldr	r3, [pc, #180]	; (800b634 <_dtoa_r+0x624>)
 800b57e:	4682      	mov	sl, r0
 800b580:	468b      	mov	fp, r1
 800b582:	4640      	mov	r0, r8
 800b584:	4649      	mov	r1, r9
 800b586:	2200      	movs	r2, #0
 800b588:	f7f5 f84e 	bl	8000628 <__aeabi_dmul>
 800b58c:	4680      	mov	r8, r0
 800b58e:	4689      	mov	r9, r1
 800b590:	e7c6      	b.n	800b520 <_dtoa_r+0x510>
 800b592:	4650      	mov	r0, sl
 800b594:	4659      	mov	r1, fp
 800b596:	f7f5 f847 	bl	8000628 <__aeabi_dmul>
 800b59a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b59c:	9d01      	ldr	r5, [sp, #4]
 800b59e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5a0:	4682      	mov	sl, r0
 800b5a2:	468b      	mov	fp, r1
 800b5a4:	4649      	mov	r1, r9
 800b5a6:	4640      	mov	r0, r8
 800b5a8:	f7f5 faee 	bl	8000b88 <__aeabi_d2iz>
 800b5ac:	4606      	mov	r6, r0
 800b5ae:	f7f4 ffd1 	bl	8000554 <__aeabi_i2d>
 800b5b2:	3630      	adds	r6, #48	; 0x30
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	4640      	mov	r0, r8
 800b5ba:	4649      	mov	r1, r9
 800b5bc:	f7f4 fe7c 	bl	80002b8 <__aeabi_dsub>
 800b5c0:	f805 6b01 	strb.w	r6, [r5], #1
 800b5c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5c6:	429d      	cmp	r5, r3
 800b5c8:	4680      	mov	r8, r0
 800b5ca:	4689      	mov	r9, r1
 800b5cc:	f04f 0200 	mov.w	r2, #0
 800b5d0:	d124      	bne.n	800b61c <_dtoa_r+0x60c>
 800b5d2:	4b1b      	ldr	r3, [pc, #108]	; (800b640 <_dtoa_r+0x630>)
 800b5d4:	4650      	mov	r0, sl
 800b5d6:	4659      	mov	r1, fp
 800b5d8:	f7f4 fe70 	bl	80002bc <__adddf3>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	460b      	mov	r3, r1
 800b5e0:	4640      	mov	r0, r8
 800b5e2:	4649      	mov	r1, r9
 800b5e4:	f7f5 fab0 	bl	8000b48 <__aeabi_dcmpgt>
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	d173      	bne.n	800b6d4 <_dtoa_r+0x6c4>
 800b5ec:	4652      	mov	r2, sl
 800b5ee:	465b      	mov	r3, fp
 800b5f0:	4913      	ldr	r1, [pc, #76]	; (800b640 <_dtoa_r+0x630>)
 800b5f2:	2000      	movs	r0, #0
 800b5f4:	f7f4 fe60 	bl	80002b8 <__aeabi_dsub>
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	4640      	mov	r0, r8
 800b5fe:	4649      	mov	r1, r9
 800b600:	f7f5 fa84 	bl	8000b0c <__aeabi_dcmplt>
 800b604:	2800      	cmp	r0, #0
 800b606:	f43f af35 	beq.w	800b474 <_dtoa_r+0x464>
 800b60a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b60c:	1e6b      	subs	r3, r5, #1
 800b60e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b610:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b614:	2b30      	cmp	r3, #48	; 0x30
 800b616:	d0f8      	beq.n	800b60a <_dtoa_r+0x5fa>
 800b618:	9700      	str	r7, [sp, #0]
 800b61a:	e049      	b.n	800b6b0 <_dtoa_r+0x6a0>
 800b61c:	4b05      	ldr	r3, [pc, #20]	; (800b634 <_dtoa_r+0x624>)
 800b61e:	f7f5 f803 	bl	8000628 <__aeabi_dmul>
 800b622:	4680      	mov	r8, r0
 800b624:	4689      	mov	r9, r1
 800b626:	e7bd      	b.n	800b5a4 <_dtoa_r+0x594>
 800b628:	0800e6f0 	.word	0x0800e6f0
 800b62c:	0800e6c8 	.word	0x0800e6c8
 800b630:	3ff00000 	.word	0x3ff00000
 800b634:	40240000 	.word	0x40240000
 800b638:	401c0000 	.word	0x401c0000
 800b63c:	40140000 	.word	0x40140000
 800b640:	3fe00000 	.word	0x3fe00000
 800b644:	9d01      	ldr	r5, [sp, #4]
 800b646:	4656      	mov	r6, sl
 800b648:	465f      	mov	r7, fp
 800b64a:	4642      	mov	r2, r8
 800b64c:	464b      	mov	r3, r9
 800b64e:	4630      	mov	r0, r6
 800b650:	4639      	mov	r1, r7
 800b652:	f7f5 f913 	bl	800087c <__aeabi_ddiv>
 800b656:	f7f5 fa97 	bl	8000b88 <__aeabi_d2iz>
 800b65a:	4682      	mov	sl, r0
 800b65c:	f7f4 ff7a 	bl	8000554 <__aeabi_i2d>
 800b660:	4642      	mov	r2, r8
 800b662:	464b      	mov	r3, r9
 800b664:	f7f4 ffe0 	bl	8000628 <__aeabi_dmul>
 800b668:	4602      	mov	r2, r0
 800b66a:	460b      	mov	r3, r1
 800b66c:	4630      	mov	r0, r6
 800b66e:	4639      	mov	r1, r7
 800b670:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b674:	f7f4 fe20 	bl	80002b8 <__aeabi_dsub>
 800b678:	f805 6b01 	strb.w	r6, [r5], #1
 800b67c:	9e01      	ldr	r6, [sp, #4]
 800b67e:	9f03      	ldr	r7, [sp, #12]
 800b680:	1bae      	subs	r6, r5, r6
 800b682:	42b7      	cmp	r7, r6
 800b684:	4602      	mov	r2, r0
 800b686:	460b      	mov	r3, r1
 800b688:	d135      	bne.n	800b6f6 <_dtoa_r+0x6e6>
 800b68a:	f7f4 fe17 	bl	80002bc <__adddf3>
 800b68e:	4642      	mov	r2, r8
 800b690:	464b      	mov	r3, r9
 800b692:	4606      	mov	r6, r0
 800b694:	460f      	mov	r7, r1
 800b696:	f7f5 fa57 	bl	8000b48 <__aeabi_dcmpgt>
 800b69a:	b9d0      	cbnz	r0, 800b6d2 <_dtoa_r+0x6c2>
 800b69c:	4642      	mov	r2, r8
 800b69e:	464b      	mov	r3, r9
 800b6a0:	4630      	mov	r0, r6
 800b6a2:	4639      	mov	r1, r7
 800b6a4:	f7f5 fa28 	bl	8000af8 <__aeabi_dcmpeq>
 800b6a8:	b110      	cbz	r0, 800b6b0 <_dtoa_r+0x6a0>
 800b6aa:	f01a 0f01 	tst.w	sl, #1
 800b6ae:	d110      	bne.n	800b6d2 <_dtoa_r+0x6c2>
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	ee18 1a10 	vmov	r1, s16
 800b6b6:	f000 fd19 	bl	800c0ec <_Bfree>
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	9800      	ldr	r0, [sp, #0]
 800b6be:	702b      	strb	r3, [r5, #0]
 800b6c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6c2:	3001      	adds	r0, #1
 800b6c4:	6018      	str	r0, [r3, #0]
 800b6c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	f43f acf1 	beq.w	800b0b0 <_dtoa_r+0xa0>
 800b6ce:	601d      	str	r5, [r3, #0]
 800b6d0:	e4ee      	b.n	800b0b0 <_dtoa_r+0xa0>
 800b6d2:	9f00      	ldr	r7, [sp, #0]
 800b6d4:	462b      	mov	r3, r5
 800b6d6:	461d      	mov	r5, r3
 800b6d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6dc:	2a39      	cmp	r2, #57	; 0x39
 800b6de:	d106      	bne.n	800b6ee <_dtoa_r+0x6de>
 800b6e0:	9a01      	ldr	r2, [sp, #4]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d1f7      	bne.n	800b6d6 <_dtoa_r+0x6c6>
 800b6e6:	9901      	ldr	r1, [sp, #4]
 800b6e8:	2230      	movs	r2, #48	; 0x30
 800b6ea:	3701      	adds	r7, #1
 800b6ec:	700a      	strb	r2, [r1, #0]
 800b6ee:	781a      	ldrb	r2, [r3, #0]
 800b6f0:	3201      	adds	r2, #1
 800b6f2:	701a      	strb	r2, [r3, #0]
 800b6f4:	e790      	b.n	800b618 <_dtoa_r+0x608>
 800b6f6:	4ba6      	ldr	r3, [pc, #664]	; (800b990 <_dtoa_r+0x980>)
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f7f4 ff95 	bl	8000628 <__aeabi_dmul>
 800b6fe:	2200      	movs	r2, #0
 800b700:	2300      	movs	r3, #0
 800b702:	4606      	mov	r6, r0
 800b704:	460f      	mov	r7, r1
 800b706:	f7f5 f9f7 	bl	8000af8 <__aeabi_dcmpeq>
 800b70a:	2800      	cmp	r0, #0
 800b70c:	d09d      	beq.n	800b64a <_dtoa_r+0x63a>
 800b70e:	e7cf      	b.n	800b6b0 <_dtoa_r+0x6a0>
 800b710:	9a08      	ldr	r2, [sp, #32]
 800b712:	2a00      	cmp	r2, #0
 800b714:	f000 80d7 	beq.w	800b8c6 <_dtoa_r+0x8b6>
 800b718:	9a06      	ldr	r2, [sp, #24]
 800b71a:	2a01      	cmp	r2, #1
 800b71c:	f300 80ba 	bgt.w	800b894 <_dtoa_r+0x884>
 800b720:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b722:	2a00      	cmp	r2, #0
 800b724:	f000 80b2 	beq.w	800b88c <_dtoa_r+0x87c>
 800b728:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b72c:	9e07      	ldr	r6, [sp, #28]
 800b72e:	9d04      	ldr	r5, [sp, #16]
 800b730:	9a04      	ldr	r2, [sp, #16]
 800b732:	441a      	add	r2, r3
 800b734:	9204      	str	r2, [sp, #16]
 800b736:	9a05      	ldr	r2, [sp, #20]
 800b738:	2101      	movs	r1, #1
 800b73a:	441a      	add	r2, r3
 800b73c:	4620      	mov	r0, r4
 800b73e:	9205      	str	r2, [sp, #20]
 800b740:	f000 fd8c 	bl	800c25c <__i2b>
 800b744:	4607      	mov	r7, r0
 800b746:	2d00      	cmp	r5, #0
 800b748:	dd0c      	ble.n	800b764 <_dtoa_r+0x754>
 800b74a:	9b05      	ldr	r3, [sp, #20]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	dd09      	ble.n	800b764 <_dtoa_r+0x754>
 800b750:	42ab      	cmp	r3, r5
 800b752:	9a04      	ldr	r2, [sp, #16]
 800b754:	bfa8      	it	ge
 800b756:	462b      	movge	r3, r5
 800b758:	1ad2      	subs	r2, r2, r3
 800b75a:	9204      	str	r2, [sp, #16]
 800b75c:	9a05      	ldr	r2, [sp, #20]
 800b75e:	1aed      	subs	r5, r5, r3
 800b760:	1ad3      	subs	r3, r2, r3
 800b762:	9305      	str	r3, [sp, #20]
 800b764:	9b07      	ldr	r3, [sp, #28]
 800b766:	b31b      	cbz	r3, 800b7b0 <_dtoa_r+0x7a0>
 800b768:	9b08      	ldr	r3, [sp, #32]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	f000 80af 	beq.w	800b8ce <_dtoa_r+0x8be>
 800b770:	2e00      	cmp	r6, #0
 800b772:	dd13      	ble.n	800b79c <_dtoa_r+0x78c>
 800b774:	4639      	mov	r1, r7
 800b776:	4632      	mov	r2, r6
 800b778:	4620      	mov	r0, r4
 800b77a:	f000 fe2f 	bl	800c3dc <__pow5mult>
 800b77e:	ee18 2a10 	vmov	r2, s16
 800b782:	4601      	mov	r1, r0
 800b784:	4607      	mov	r7, r0
 800b786:	4620      	mov	r0, r4
 800b788:	f000 fd7e 	bl	800c288 <__multiply>
 800b78c:	ee18 1a10 	vmov	r1, s16
 800b790:	4680      	mov	r8, r0
 800b792:	4620      	mov	r0, r4
 800b794:	f000 fcaa 	bl	800c0ec <_Bfree>
 800b798:	ee08 8a10 	vmov	s16, r8
 800b79c:	9b07      	ldr	r3, [sp, #28]
 800b79e:	1b9a      	subs	r2, r3, r6
 800b7a0:	d006      	beq.n	800b7b0 <_dtoa_r+0x7a0>
 800b7a2:	ee18 1a10 	vmov	r1, s16
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	f000 fe18 	bl	800c3dc <__pow5mult>
 800b7ac:	ee08 0a10 	vmov	s16, r0
 800b7b0:	2101      	movs	r1, #1
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f000 fd52 	bl	800c25c <__i2b>
 800b7b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	4606      	mov	r6, r0
 800b7be:	f340 8088 	ble.w	800b8d2 <_dtoa_r+0x8c2>
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	4601      	mov	r1, r0
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f000 fe08 	bl	800c3dc <__pow5mult>
 800b7cc:	9b06      	ldr	r3, [sp, #24]
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	4606      	mov	r6, r0
 800b7d2:	f340 8081 	ble.w	800b8d8 <_dtoa_r+0x8c8>
 800b7d6:	f04f 0800 	mov.w	r8, #0
 800b7da:	6933      	ldr	r3, [r6, #16]
 800b7dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b7e0:	6918      	ldr	r0, [r3, #16]
 800b7e2:	f000 fceb 	bl	800c1bc <__hi0bits>
 800b7e6:	f1c0 0020 	rsb	r0, r0, #32
 800b7ea:	9b05      	ldr	r3, [sp, #20]
 800b7ec:	4418      	add	r0, r3
 800b7ee:	f010 001f 	ands.w	r0, r0, #31
 800b7f2:	f000 8092 	beq.w	800b91a <_dtoa_r+0x90a>
 800b7f6:	f1c0 0320 	rsb	r3, r0, #32
 800b7fa:	2b04      	cmp	r3, #4
 800b7fc:	f340 808a 	ble.w	800b914 <_dtoa_r+0x904>
 800b800:	f1c0 001c 	rsb	r0, r0, #28
 800b804:	9b04      	ldr	r3, [sp, #16]
 800b806:	4403      	add	r3, r0
 800b808:	9304      	str	r3, [sp, #16]
 800b80a:	9b05      	ldr	r3, [sp, #20]
 800b80c:	4403      	add	r3, r0
 800b80e:	4405      	add	r5, r0
 800b810:	9305      	str	r3, [sp, #20]
 800b812:	9b04      	ldr	r3, [sp, #16]
 800b814:	2b00      	cmp	r3, #0
 800b816:	dd07      	ble.n	800b828 <_dtoa_r+0x818>
 800b818:	ee18 1a10 	vmov	r1, s16
 800b81c:	461a      	mov	r2, r3
 800b81e:	4620      	mov	r0, r4
 800b820:	f000 fe36 	bl	800c490 <__lshift>
 800b824:	ee08 0a10 	vmov	s16, r0
 800b828:	9b05      	ldr	r3, [sp, #20]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	dd05      	ble.n	800b83a <_dtoa_r+0x82a>
 800b82e:	4631      	mov	r1, r6
 800b830:	461a      	mov	r2, r3
 800b832:	4620      	mov	r0, r4
 800b834:	f000 fe2c 	bl	800c490 <__lshift>
 800b838:	4606      	mov	r6, r0
 800b83a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d06e      	beq.n	800b91e <_dtoa_r+0x90e>
 800b840:	ee18 0a10 	vmov	r0, s16
 800b844:	4631      	mov	r1, r6
 800b846:	f000 fe93 	bl	800c570 <__mcmp>
 800b84a:	2800      	cmp	r0, #0
 800b84c:	da67      	bge.n	800b91e <_dtoa_r+0x90e>
 800b84e:	9b00      	ldr	r3, [sp, #0]
 800b850:	3b01      	subs	r3, #1
 800b852:	ee18 1a10 	vmov	r1, s16
 800b856:	9300      	str	r3, [sp, #0]
 800b858:	220a      	movs	r2, #10
 800b85a:	2300      	movs	r3, #0
 800b85c:	4620      	mov	r0, r4
 800b85e:	f000 fc67 	bl	800c130 <__multadd>
 800b862:	9b08      	ldr	r3, [sp, #32]
 800b864:	ee08 0a10 	vmov	s16, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	f000 81b1 	beq.w	800bbd0 <_dtoa_r+0xbc0>
 800b86e:	2300      	movs	r3, #0
 800b870:	4639      	mov	r1, r7
 800b872:	220a      	movs	r2, #10
 800b874:	4620      	mov	r0, r4
 800b876:	f000 fc5b 	bl	800c130 <__multadd>
 800b87a:	9b02      	ldr	r3, [sp, #8]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	4607      	mov	r7, r0
 800b880:	f300 808e 	bgt.w	800b9a0 <_dtoa_r+0x990>
 800b884:	9b06      	ldr	r3, [sp, #24]
 800b886:	2b02      	cmp	r3, #2
 800b888:	dc51      	bgt.n	800b92e <_dtoa_r+0x91e>
 800b88a:	e089      	b.n	800b9a0 <_dtoa_r+0x990>
 800b88c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b88e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b892:	e74b      	b.n	800b72c <_dtoa_r+0x71c>
 800b894:	9b03      	ldr	r3, [sp, #12]
 800b896:	1e5e      	subs	r6, r3, #1
 800b898:	9b07      	ldr	r3, [sp, #28]
 800b89a:	42b3      	cmp	r3, r6
 800b89c:	bfbf      	itttt	lt
 800b89e:	9b07      	ldrlt	r3, [sp, #28]
 800b8a0:	9607      	strlt	r6, [sp, #28]
 800b8a2:	1af2      	sublt	r2, r6, r3
 800b8a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b8a6:	bfb6      	itet	lt
 800b8a8:	189b      	addlt	r3, r3, r2
 800b8aa:	1b9e      	subge	r6, r3, r6
 800b8ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b8ae:	9b03      	ldr	r3, [sp, #12]
 800b8b0:	bfb8      	it	lt
 800b8b2:	2600      	movlt	r6, #0
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	bfb7      	itett	lt
 800b8b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b8bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b8c0:	1a9d      	sublt	r5, r3, r2
 800b8c2:	2300      	movlt	r3, #0
 800b8c4:	e734      	b.n	800b730 <_dtoa_r+0x720>
 800b8c6:	9e07      	ldr	r6, [sp, #28]
 800b8c8:	9d04      	ldr	r5, [sp, #16]
 800b8ca:	9f08      	ldr	r7, [sp, #32]
 800b8cc:	e73b      	b.n	800b746 <_dtoa_r+0x736>
 800b8ce:	9a07      	ldr	r2, [sp, #28]
 800b8d0:	e767      	b.n	800b7a2 <_dtoa_r+0x792>
 800b8d2:	9b06      	ldr	r3, [sp, #24]
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	dc18      	bgt.n	800b90a <_dtoa_r+0x8fa>
 800b8d8:	f1ba 0f00 	cmp.w	sl, #0
 800b8dc:	d115      	bne.n	800b90a <_dtoa_r+0x8fa>
 800b8de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8e2:	b993      	cbnz	r3, 800b90a <_dtoa_r+0x8fa>
 800b8e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b8e8:	0d1b      	lsrs	r3, r3, #20
 800b8ea:	051b      	lsls	r3, r3, #20
 800b8ec:	b183      	cbz	r3, 800b910 <_dtoa_r+0x900>
 800b8ee:	9b04      	ldr	r3, [sp, #16]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	9304      	str	r3, [sp, #16]
 800b8f4:	9b05      	ldr	r3, [sp, #20]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	9305      	str	r3, [sp, #20]
 800b8fa:	f04f 0801 	mov.w	r8, #1
 800b8fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b900:	2b00      	cmp	r3, #0
 800b902:	f47f af6a 	bne.w	800b7da <_dtoa_r+0x7ca>
 800b906:	2001      	movs	r0, #1
 800b908:	e76f      	b.n	800b7ea <_dtoa_r+0x7da>
 800b90a:	f04f 0800 	mov.w	r8, #0
 800b90e:	e7f6      	b.n	800b8fe <_dtoa_r+0x8ee>
 800b910:	4698      	mov	r8, r3
 800b912:	e7f4      	b.n	800b8fe <_dtoa_r+0x8ee>
 800b914:	f43f af7d 	beq.w	800b812 <_dtoa_r+0x802>
 800b918:	4618      	mov	r0, r3
 800b91a:	301c      	adds	r0, #28
 800b91c:	e772      	b.n	800b804 <_dtoa_r+0x7f4>
 800b91e:	9b03      	ldr	r3, [sp, #12]
 800b920:	2b00      	cmp	r3, #0
 800b922:	dc37      	bgt.n	800b994 <_dtoa_r+0x984>
 800b924:	9b06      	ldr	r3, [sp, #24]
 800b926:	2b02      	cmp	r3, #2
 800b928:	dd34      	ble.n	800b994 <_dtoa_r+0x984>
 800b92a:	9b03      	ldr	r3, [sp, #12]
 800b92c:	9302      	str	r3, [sp, #8]
 800b92e:	9b02      	ldr	r3, [sp, #8]
 800b930:	b96b      	cbnz	r3, 800b94e <_dtoa_r+0x93e>
 800b932:	4631      	mov	r1, r6
 800b934:	2205      	movs	r2, #5
 800b936:	4620      	mov	r0, r4
 800b938:	f000 fbfa 	bl	800c130 <__multadd>
 800b93c:	4601      	mov	r1, r0
 800b93e:	4606      	mov	r6, r0
 800b940:	ee18 0a10 	vmov	r0, s16
 800b944:	f000 fe14 	bl	800c570 <__mcmp>
 800b948:	2800      	cmp	r0, #0
 800b94a:	f73f adbb 	bgt.w	800b4c4 <_dtoa_r+0x4b4>
 800b94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b950:	9d01      	ldr	r5, [sp, #4]
 800b952:	43db      	mvns	r3, r3
 800b954:	9300      	str	r3, [sp, #0]
 800b956:	f04f 0800 	mov.w	r8, #0
 800b95a:	4631      	mov	r1, r6
 800b95c:	4620      	mov	r0, r4
 800b95e:	f000 fbc5 	bl	800c0ec <_Bfree>
 800b962:	2f00      	cmp	r7, #0
 800b964:	f43f aea4 	beq.w	800b6b0 <_dtoa_r+0x6a0>
 800b968:	f1b8 0f00 	cmp.w	r8, #0
 800b96c:	d005      	beq.n	800b97a <_dtoa_r+0x96a>
 800b96e:	45b8      	cmp	r8, r7
 800b970:	d003      	beq.n	800b97a <_dtoa_r+0x96a>
 800b972:	4641      	mov	r1, r8
 800b974:	4620      	mov	r0, r4
 800b976:	f000 fbb9 	bl	800c0ec <_Bfree>
 800b97a:	4639      	mov	r1, r7
 800b97c:	4620      	mov	r0, r4
 800b97e:	f000 fbb5 	bl	800c0ec <_Bfree>
 800b982:	e695      	b.n	800b6b0 <_dtoa_r+0x6a0>
 800b984:	2600      	movs	r6, #0
 800b986:	4637      	mov	r7, r6
 800b988:	e7e1      	b.n	800b94e <_dtoa_r+0x93e>
 800b98a:	9700      	str	r7, [sp, #0]
 800b98c:	4637      	mov	r7, r6
 800b98e:	e599      	b.n	800b4c4 <_dtoa_r+0x4b4>
 800b990:	40240000 	.word	0x40240000
 800b994:	9b08      	ldr	r3, [sp, #32]
 800b996:	2b00      	cmp	r3, #0
 800b998:	f000 80ca 	beq.w	800bb30 <_dtoa_r+0xb20>
 800b99c:	9b03      	ldr	r3, [sp, #12]
 800b99e:	9302      	str	r3, [sp, #8]
 800b9a0:	2d00      	cmp	r5, #0
 800b9a2:	dd05      	ble.n	800b9b0 <_dtoa_r+0x9a0>
 800b9a4:	4639      	mov	r1, r7
 800b9a6:	462a      	mov	r2, r5
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	f000 fd71 	bl	800c490 <__lshift>
 800b9ae:	4607      	mov	r7, r0
 800b9b0:	f1b8 0f00 	cmp.w	r8, #0
 800b9b4:	d05b      	beq.n	800ba6e <_dtoa_r+0xa5e>
 800b9b6:	6879      	ldr	r1, [r7, #4]
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f000 fb57 	bl	800c06c <_Balloc>
 800b9be:	4605      	mov	r5, r0
 800b9c0:	b928      	cbnz	r0, 800b9ce <_dtoa_r+0x9be>
 800b9c2:	4b87      	ldr	r3, [pc, #540]	; (800bbe0 <_dtoa_r+0xbd0>)
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b9ca:	f7ff bb3b 	b.w	800b044 <_dtoa_r+0x34>
 800b9ce:	693a      	ldr	r2, [r7, #16]
 800b9d0:	3202      	adds	r2, #2
 800b9d2:	0092      	lsls	r2, r2, #2
 800b9d4:	f107 010c 	add.w	r1, r7, #12
 800b9d8:	300c      	adds	r0, #12
 800b9da:	f7fe fdb1 	bl	800a540 <memcpy>
 800b9de:	2201      	movs	r2, #1
 800b9e0:	4629      	mov	r1, r5
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	f000 fd54 	bl	800c490 <__lshift>
 800b9e8:	9b01      	ldr	r3, [sp, #4]
 800b9ea:	f103 0901 	add.w	r9, r3, #1
 800b9ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b9f2:	4413      	add	r3, r2
 800b9f4:	9305      	str	r3, [sp, #20]
 800b9f6:	f00a 0301 	and.w	r3, sl, #1
 800b9fa:	46b8      	mov	r8, r7
 800b9fc:	9304      	str	r3, [sp, #16]
 800b9fe:	4607      	mov	r7, r0
 800ba00:	4631      	mov	r1, r6
 800ba02:	ee18 0a10 	vmov	r0, s16
 800ba06:	f7ff fa75 	bl	800aef4 <quorem>
 800ba0a:	4641      	mov	r1, r8
 800ba0c:	9002      	str	r0, [sp, #8]
 800ba0e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ba12:	ee18 0a10 	vmov	r0, s16
 800ba16:	f000 fdab 	bl	800c570 <__mcmp>
 800ba1a:	463a      	mov	r2, r7
 800ba1c:	9003      	str	r0, [sp, #12]
 800ba1e:	4631      	mov	r1, r6
 800ba20:	4620      	mov	r0, r4
 800ba22:	f000 fdc1 	bl	800c5a8 <__mdiff>
 800ba26:	68c2      	ldr	r2, [r0, #12]
 800ba28:	f109 3bff 	add.w	fp, r9, #4294967295
 800ba2c:	4605      	mov	r5, r0
 800ba2e:	bb02      	cbnz	r2, 800ba72 <_dtoa_r+0xa62>
 800ba30:	4601      	mov	r1, r0
 800ba32:	ee18 0a10 	vmov	r0, s16
 800ba36:	f000 fd9b 	bl	800c570 <__mcmp>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	4629      	mov	r1, r5
 800ba3e:	4620      	mov	r0, r4
 800ba40:	9207      	str	r2, [sp, #28]
 800ba42:	f000 fb53 	bl	800c0ec <_Bfree>
 800ba46:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ba4a:	ea43 0102 	orr.w	r1, r3, r2
 800ba4e:	9b04      	ldr	r3, [sp, #16]
 800ba50:	430b      	orrs	r3, r1
 800ba52:	464d      	mov	r5, r9
 800ba54:	d10f      	bne.n	800ba76 <_dtoa_r+0xa66>
 800ba56:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ba5a:	d02a      	beq.n	800bab2 <_dtoa_r+0xaa2>
 800ba5c:	9b03      	ldr	r3, [sp, #12]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	dd02      	ble.n	800ba68 <_dtoa_r+0xa58>
 800ba62:	9b02      	ldr	r3, [sp, #8]
 800ba64:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ba68:	f88b a000 	strb.w	sl, [fp]
 800ba6c:	e775      	b.n	800b95a <_dtoa_r+0x94a>
 800ba6e:	4638      	mov	r0, r7
 800ba70:	e7ba      	b.n	800b9e8 <_dtoa_r+0x9d8>
 800ba72:	2201      	movs	r2, #1
 800ba74:	e7e2      	b.n	800ba3c <_dtoa_r+0xa2c>
 800ba76:	9b03      	ldr	r3, [sp, #12]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	db04      	blt.n	800ba86 <_dtoa_r+0xa76>
 800ba7c:	9906      	ldr	r1, [sp, #24]
 800ba7e:	430b      	orrs	r3, r1
 800ba80:	9904      	ldr	r1, [sp, #16]
 800ba82:	430b      	orrs	r3, r1
 800ba84:	d122      	bne.n	800bacc <_dtoa_r+0xabc>
 800ba86:	2a00      	cmp	r2, #0
 800ba88:	ddee      	ble.n	800ba68 <_dtoa_r+0xa58>
 800ba8a:	ee18 1a10 	vmov	r1, s16
 800ba8e:	2201      	movs	r2, #1
 800ba90:	4620      	mov	r0, r4
 800ba92:	f000 fcfd 	bl	800c490 <__lshift>
 800ba96:	4631      	mov	r1, r6
 800ba98:	ee08 0a10 	vmov	s16, r0
 800ba9c:	f000 fd68 	bl	800c570 <__mcmp>
 800baa0:	2800      	cmp	r0, #0
 800baa2:	dc03      	bgt.n	800baac <_dtoa_r+0xa9c>
 800baa4:	d1e0      	bne.n	800ba68 <_dtoa_r+0xa58>
 800baa6:	f01a 0f01 	tst.w	sl, #1
 800baaa:	d0dd      	beq.n	800ba68 <_dtoa_r+0xa58>
 800baac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bab0:	d1d7      	bne.n	800ba62 <_dtoa_r+0xa52>
 800bab2:	2339      	movs	r3, #57	; 0x39
 800bab4:	f88b 3000 	strb.w	r3, [fp]
 800bab8:	462b      	mov	r3, r5
 800baba:	461d      	mov	r5, r3
 800babc:	3b01      	subs	r3, #1
 800babe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bac2:	2a39      	cmp	r2, #57	; 0x39
 800bac4:	d071      	beq.n	800bbaa <_dtoa_r+0xb9a>
 800bac6:	3201      	adds	r2, #1
 800bac8:	701a      	strb	r2, [r3, #0]
 800baca:	e746      	b.n	800b95a <_dtoa_r+0x94a>
 800bacc:	2a00      	cmp	r2, #0
 800bace:	dd07      	ble.n	800bae0 <_dtoa_r+0xad0>
 800bad0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bad4:	d0ed      	beq.n	800bab2 <_dtoa_r+0xaa2>
 800bad6:	f10a 0301 	add.w	r3, sl, #1
 800bada:	f88b 3000 	strb.w	r3, [fp]
 800bade:	e73c      	b.n	800b95a <_dtoa_r+0x94a>
 800bae0:	9b05      	ldr	r3, [sp, #20]
 800bae2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bae6:	4599      	cmp	r9, r3
 800bae8:	d047      	beq.n	800bb7a <_dtoa_r+0xb6a>
 800baea:	ee18 1a10 	vmov	r1, s16
 800baee:	2300      	movs	r3, #0
 800baf0:	220a      	movs	r2, #10
 800baf2:	4620      	mov	r0, r4
 800baf4:	f000 fb1c 	bl	800c130 <__multadd>
 800baf8:	45b8      	cmp	r8, r7
 800bafa:	ee08 0a10 	vmov	s16, r0
 800bafe:	f04f 0300 	mov.w	r3, #0
 800bb02:	f04f 020a 	mov.w	r2, #10
 800bb06:	4641      	mov	r1, r8
 800bb08:	4620      	mov	r0, r4
 800bb0a:	d106      	bne.n	800bb1a <_dtoa_r+0xb0a>
 800bb0c:	f000 fb10 	bl	800c130 <__multadd>
 800bb10:	4680      	mov	r8, r0
 800bb12:	4607      	mov	r7, r0
 800bb14:	f109 0901 	add.w	r9, r9, #1
 800bb18:	e772      	b.n	800ba00 <_dtoa_r+0x9f0>
 800bb1a:	f000 fb09 	bl	800c130 <__multadd>
 800bb1e:	4639      	mov	r1, r7
 800bb20:	4680      	mov	r8, r0
 800bb22:	2300      	movs	r3, #0
 800bb24:	220a      	movs	r2, #10
 800bb26:	4620      	mov	r0, r4
 800bb28:	f000 fb02 	bl	800c130 <__multadd>
 800bb2c:	4607      	mov	r7, r0
 800bb2e:	e7f1      	b.n	800bb14 <_dtoa_r+0xb04>
 800bb30:	9b03      	ldr	r3, [sp, #12]
 800bb32:	9302      	str	r3, [sp, #8]
 800bb34:	9d01      	ldr	r5, [sp, #4]
 800bb36:	ee18 0a10 	vmov	r0, s16
 800bb3a:	4631      	mov	r1, r6
 800bb3c:	f7ff f9da 	bl	800aef4 <quorem>
 800bb40:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bb44:	9b01      	ldr	r3, [sp, #4]
 800bb46:	f805 ab01 	strb.w	sl, [r5], #1
 800bb4a:	1aea      	subs	r2, r5, r3
 800bb4c:	9b02      	ldr	r3, [sp, #8]
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	dd09      	ble.n	800bb66 <_dtoa_r+0xb56>
 800bb52:	ee18 1a10 	vmov	r1, s16
 800bb56:	2300      	movs	r3, #0
 800bb58:	220a      	movs	r2, #10
 800bb5a:	4620      	mov	r0, r4
 800bb5c:	f000 fae8 	bl	800c130 <__multadd>
 800bb60:	ee08 0a10 	vmov	s16, r0
 800bb64:	e7e7      	b.n	800bb36 <_dtoa_r+0xb26>
 800bb66:	9b02      	ldr	r3, [sp, #8]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	bfc8      	it	gt
 800bb6c:	461d      	movgt	r5, r3
 800bb6e:	9b01      	ldr	r3, [sp, #4]
 800bb70:	bfd8      	it	le
 800bb72:	2501      	movle	r5, #1
 800bb74:	441d      	add	r5, r3
 800bb76:	f04f 0800 	mov.w	r8, #0
 800bb7a:	ee18 1a10 	vmov	r1, s16
 800bb7e:	2201      	movs	r2, #1
 800bb80:	4620      	mov	r0, r4
 800bb82:	f000 fc85 	bl	800c490 <__lshift>
 800bb86:	4631      	mov	r1, r6
 800bb88:	ee08 0a10 	vmov	s16, r0
 800bb8c:	f000 fcf0 	bl	800c570 <__mcmp>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	dc91      	bgt.n	800bab8 <_dtoa_r+0xaa8>
 800bb94:	d102      	bne.n	800bb9c <_dtoa_r+0xb8c>
 800bb96:	f01a 0f01 	tst.w	sl, #1
 800bb9a:	d18d      	bne.n	800bab8 <_dtoa_r+0xaa8>
 800bb9c:	462b      	mov	r3, r5
 800bb9e:	461d      	mov	r5, r3
 800bba0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bba4:	2a30      	cmp	r2, #48	; 0x30
 800bba6:	d0fa      	beq.n	800bb9e <_dtoa_r+0xb8e>
 800bba8:	e6d7      	b.n	800b95a <_dtoa_r+0x94a>
 800bbaa:	9a01      	ldr	r2, [sp, #4]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d184      	bne.n	800baba <_dtoa_r+0xaaa>
 800bbb0:	9b00      	ldr	r3, [sp, #0]
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	9300      	str	r3, [sp, #0]
 800bbb6:	2331      	movs	r3, #49	; 0x31
 800bbb8:	7013      	strb	r3, [r2, #0]
 800bbba:	e6ce      	b.n	800b95a <_dtoa_r+0x94a>
 800bbbc:	4b09      	ldr	r3, [pc, #36]	; (800bbe4 <_dtoa_r+0xbd4>)
 800bbbe:	f7ff ba95 	b.w	800b0ec <_dtoa_r+0xdc>
 800bbc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	f47f aa6e 	bne.w	800b0a6 <_dtoa_r+0x96>
 800bbca:	4b07      	ldr	r3, [pc, #28]	; (800bbe8 <_dtoa_r+0xbd8>)
 800bbcc:	f7ff ba8e 	b.w	800b0ec <_dtoa_r+0xdc>
 800bbd0:	9b02      	ldr	r3, [sp, #8]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	dcae      	bgt.n	800bb34 <_dtoa_r+0xb24>
 800bbd6:	9b06      	ldr	r3, [sp, #24]
 800bbd8:	2b02      	cmp	r3, #2
 800bbda:	f73f aea8 	bgt.w	800b92e <_dtoa_r+0x91e>
 800bbde:	e7a9      	b.n	800bb34 <_dtoa_r+0xb24>
 800bbe0:	0800e5f8 	.word	0x0800e5f8
 800bbe4:	0800e530 	.word	0x0800e530
 800bbe8:	0800e579 	.word	0x0800e579

0800bbec <print_e>:
 800bbec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbee:	b087      	sub	sp, #28
 800bbf0:	ec43 2b10 	vmov	d0, r2, r3
 800bbf4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bbf6:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800bbfa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800bbfc:	ab04      	add	r3, sp, #16
 800bbfe:	9301      	str	r3, [sp, #4]
 800bc00:	ab03      	add	r3, sp, #12
 800bc02:	9300      	str	r3, [sp, #0]
 800bc04:	1c62      	adds	r2, r4, #1
 800bc06:	ab05      	add	r3, sp, #20
 800bc08:	460f      	mov	r7, r1
 800bc0a:	2102      	movs	r1, #2
 800bc0c:	f7ff fa00 	bl	800b010 <_dtoa_r>
 800bc10:	9a05      	ldr	r2, [sp, #20]
 800bc12:	f242 730f 	movw	r3, #9999	; 0x270f
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d105      	bne.n	800bc26 <print_e+0x3a>
 800bc1a:	4601      	mov	r1, r0
 800bc1c:	4638      	mov	r0, r7
 800bc1e:	f001 f86a 	bl	800ccf6 <strcpy>
 800bc22:	b007      	add	sp, #28
 800bc24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc26:	463b      	mov	r3, r7
 800bc28:	7801      	ldrb	r1, [r0, #0]
 800bc2a:	f803 1b01 	strb.w	r1, [r3], #1
 800bc2e:	2c00      	cmp	r4, #0
 800bc30:	bfc8      	it	gt
 800bc32:	2501      	movgt	r5, #1
 800bc34:	212e      	movs	r1, #46	; 0x2e
 800bc36:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800bc3a:	b10f      	cbz	r7, 800bc40 <print_e+0x54>
 800bc3c:	2c00      	cmp	r4, #0
 800bc3e:	dc37      	bgt.n	800bcb0 <print_e+0xc4>
 800bc40:	2e67      	cmp	r6, #103	; 0x67
 800bc42:	d046      	beq.n	800bcd2 <print_e+0xe6>
 800bc44:	2e47      	cmp	r6, #71	; 0x47
 800bc46:	d046      	beq.n	800bcd6 <print_e+0xea>
 800bc48:	212e      	movs	r1, #46	; 0x2e
 800bc4a:	2030      	movs	r0, #48	; 0x30
 800bc4c:	2c00      	cmp	r4, #0
 800bc4e:	dc38      	bgt.n	800bcc2 <print_e+0xd6>
 800bc50:	1e51      	subs	r1, r2, #1
 800bc52:	2900      	cmp	r1, #0
 800bc54:	bfb8      	it	lt
 800bc56:	f1c2 0201 	rsblt	r2, r2, #1
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	9105      	str	r1, [sp, #20]
 800bc5e:	bfac      	ite	ge
 800bc60:	222b      	movge	r2, #43	; 0x2b
 800bc62:	9205      	strlt	r2, [sp, #20]
 800bc64:	f800 6b02 	strb.w	r6, [r0], #2
 800bc68:	bfa8      	it	ge
 800bc6a:	705a      	strbge	r2, [r3, #1]
 800bc6c:	9a05      	ldr	r2, [sp, #20]
 800bc6e:	bfbc      	itt	lt
 800bc70:	212d      	movlt	r1, #45	; 0x2d
 800bc72:	7059      	strblt	r1, [r3, #1]
 800bc74:	2a63      	cmp	r2, #99	; 0x63
 800bc76:	dd0b      	ble.n	800bc90 <print_e+0xa4>
 800bc78:	2164      	movs	r1, #100	; 0x64
 800bc7a:	fb92 f1f1 	sdiv	r1, r2, r1
 800bc7e:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800bc82:	1cd8      	adds	r0, r3, #3
 800bc84:	709c      	strb	r4, [r3, #2]
 800bc86:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800bc8a:	fb03 2201 	mla	r2, r3, r1, r2
 800bc8e:	9205      	str	r2, [sp, #20]
 800bc90:	9b05      	ldr	r3, [sp, #20]
 800bc92:	220a      	movs	r2, #10
 800bc94:	fb93 f2f2 	sdiv	r2, r3, r2
 800bc98:	f102 0130 	add.w	r1, r2, #48	; 0x30
 800bc9c:	7001      	strb	r1, [r0, #0]
 800bc9e:	f06f 0109 	mvn.w	r1, #9
 800bca2:	fb01 3302 	mla	r3, r1, r2, r3
 800bca6:	3330      	adds	r3, #48	; 0x30
 800bca8:	7043      	strb	r3, [r0, #1]
 800bcaa:	2300      	movs	r3, #0
 800bcac:	7083      	strb	r3, [r0, #2]
 800bcae:	e7b8      	b.n	800bc22 <print_e+0x36>
 800bcb0:	b10d      	cbz	r5, 800bcb6 <print_e+0xca>
 800bcb2:	f803 1b01 	strb.w	r1, [r3], #1
 800bcb6:	7805      	ldrb	r5, [r0, #0]
 800bcb8:	f803 5b01 	strb.w	r5, [r3], #1
 800bcbc:	3c01      	subs	r4, #1
 800bcbe:	2500      	movs	r5, #0
 800bcc0:	e7b9      	b.n	800bc36 <print_e+0x4a>
 800bcc2:	b10d      	cbz	r5, 800bcc8 <print_e+0xdc>
 800bcc4:	f803 1b01 	strb.w	r1, [r3], #1
 800bcc8:	f803 0b01 	strb.w	r0, [r3], #1
 800bccc:	3c01      	subs	r4, #1
 800bcce:	2500      	movs	r5, #0
 800bcd0:	e7bc      	b.n	800bc4c <print_e+0x60>
 800bcd2:	2665      	movs	r6, #101	; 0x65
 800bcd4:	e7bc      	b.n	800bc50 <print_e+0x64>
 800bcd6:	2645      	movs	r6, #69	; 0x45
 800bcd8:	e7ba      	b.n	800bc50 <print_e+0x64>
 800bcda:	0000      	movs	r0, r0
 800bcdc:	0000      	movs	r0, r0
	...

0800bce0 <_gcvt>:
 800bce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bce4:	ec55 4b10 	vmov	r4, r5, d0
 800bce8:	b088      	sub	sp, #32
 800bcea:	4681      	mov	r9, r0
 800bcec:	4688      	mov	r8, r1
 800bcee:	4616      	mov	r6, r2
 800bcf0:	469a      	mov	sl, r3
 800bcf2:	ee10 0a10 	vmov	r0, s0
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	4629      	mov	r1, r5
 800bcfc:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800bcfe:	f7f4 ff05 	bl	8000b0c <__aeabi_dcmplt>
 800bd02:	b110      	cbz	r0, 800bd0a <_gcvt+0x2a>
 800bd04:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800bd08:	461d      	mov	r5, r3
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	4620      	mov	r0, r4
 800bd10:	4629      	mov	r1, r5
 800bd12:	f7f4 fef1 	bl	8000af8 <__aeabi_dcmpeq>
 800bd16:	b138      	cbz	r0, 800bd28 <_gcvt+0x48>
 800bd18:	2330      	movs	r3, #48	; 0x30
 800bd1a:	7033      	strb	r3, [r6, #0]
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	7073      	strb	r3, [r6, #1]
 800bd20:	4630      	mov	r0, r6
 800bd22:	b008      	add	sp, #32
 800bd24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd28:	a34b      	add	r3, pc, #300	; (adr r3, 800be58 <_gcvt+0x178>)
 800bd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2e:	4620      	mov	r0, r4
 800bd30:	4629      	mov	r1, r5
 800bd32:	f7f4 fef5 	bl	8000b20 <__aeabi_dcmple>
 800bd36:	b158      	cbz	r0, 800bd50 <_gcvt+0x70>
 800bd38:	f108 31ff 	add.w	r1, r8, #4294967295
 800bd3c:	9100      	str	r1, [sp, #0]
 800bd3e:	e9cd a701 	strd	sl, r7, [sp, #4]
 800bd42:	4622      	mov	r2, r4
 800bd44:	462b      	mov	r3, r5
 800bd46:	4631      	mov	r1, r6
 800bd48:	4648      	mov	r0, r9
 800bd4a:	f7ff ff4f 	bl	800bbec <print_e>
 800bd4e:	e7e7      	b.n	800bd20 <_gcvt+0x40>
 800bd50:	4640      	mov	r0, r8
 800bd52:	f000 fd0f 	bl	800c774 <_mprec_log10>
 800bd56:	4622      	mov	r2, r4
 800bd58:	ec51 0b10 	vmov	r0, r1, d0
 800bd5c:	462b      	mov	r3, r5
 800bd5e:	f7f4 fedf 	bl	8000b20 <__aeabi_dcmple>
 800bd62:	2800      	cmp	r0, #0
 800bd64:	d1e8      	bne.n	800bd38 <_gcvt+0x58>
 800bd66:	ab07      	add	r3, sp, #28
 800bd68:	9301      	str	r3, [sp, #4]
 800bd6a:	ab06      	add	r3, sp, #24
 800bd6c:	9300      	str	r3, [sp, #0]
 800bd6e:	4642      	mov	r2, r8
 800bd70:	ab05      	add	r3, sp, #20
 800bd72:	ec45 4b10 	vmov	d0, r4, r5
 800bd76:	2102      	movs	r1, #2
 800bd78:	4648      	mov	r0, r9
 800bd7a:	f7ff f949 	bl	800b010 <_dtoa_r>
 800bd7e:	9a05      	ldr	r2, [sp, #20]
 800bd80:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d00e      	beq.n	800bda6 <_gcvt+0xc6>
 800bd88:	4633      	mov	r3, r6
 800bd8a:	44b0      	add	r8, r6
 800bd8c:	4605      	mov	r5, r0
 800bd8e:	f810 1b01 	ldrb.w	r1, [r0], #1
 800bd92:	9c05      	ldr	r4, [sp, #20]
 800bd94:	eba8 0203 	sub.w	r2, r8, r3
 800bd98:	b109      	cbz	r1, 800bd9e <_gcvt+0xbe>
 800bd9a:	2c00      	cmp	r4, #0
 800bd9c:	dc08      	bgt.n	800bdb0 <_gcvt+0xd0>
 800bd9e:	2100      	movs	r1, #0
 800bda0:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800bda4:	e00d      	b.n	800bdc2 <_gcvt+0xe2>
 800bda6:	4601      	mov	r1, r0
 800bda8:	4630      	mov	r0, r6
 800bdaa:	f000 ffa4 	bl	800ccf6 <strcpy>
 800bdae:	e7b7      	b.n	800bd20 <_gcvt+0x40>
 800bdb0:	3c01      	subs	r4, #1
 800bdb2:	f803 1b01 	strb.w	r1, [r3], #1
 800bdb6:	9405      	str	r4, [sp, #20]
 800bdb8:	e7e8      	b.n	800bd8c <_gcvt+0xac>
 800bdba:	f803 cb01 	strb.w	ip, [r3], #1
 800bdbe:	3a01      	subs	r2, #1
 800bdc0:	2101      	movs	r1, #1
 800bdc2:	2c00      	cmp	r4, #0
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	dc2a      	bgt.n	800be1e <_gcvt+0x13e>
 800bdc8:	b101      	cbz	r1, 800bdcc <_gcvt+0xec>
 800bdca:	9405      	str	r4, [sp, #20]
 800bdcc:	b90f      	cbnz	r7, 800bdd2 <_gcvt+0xf2>
 800bdce:	7829      	ldrb	r1, [r5, #0]
 800bdd0:	b311      	cbz	r1, 800be18 <_gcvt+0x138>
 800bdd2:	42b3      	cmp	r3, r6
 800bdd4:	bf04      	itt	eq
 800bdd6:	2130      	moveq	r1, #48	; 0x30
 800bdd8:	f803 1b01 	strbeq.w	r1, [r3], #1
 800bddc:	212e      	movs	r1, #46	; 0x2e
 800bdde:	7019      	strb	r1, [r3, #0]
 800bde0:	9905      	ldr	r1, [sp, #20]
 800bde2:	4618      	mov	r0, r3
 800bde4:	2400      	movs	r4, #0
 800bde6:	eba1 0c03 	sub.w	ip, r1, r3
 800bdea:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800bdee:	eb1c 0f00 	cmn.w	ip, r0
 800bdf2:	d41c      	bmi.n	800be2e <_gcvt+0x14e>
 800bdf4:	2900      	cmp	r1, #0
 800bdf6:	f1c1 0000 	rsb	r0, r1, #0
 800bdfa:	bfc8      	it	gt
 800bdfc:	2000      	movgt	r0, #0
 800bdfe:	f100 0c01 	add.w	ip, r0, #1
 800be02:	4463      	add	r3, ip
 800be04:	4401      	add	r1, r0
 800be06:	b104      	cbz	r4, 800be0a <_gcvt+0x12a>
 800be08:	9105      	str	r1, [sp, #20]
 800be0a:	1e69      	subs	r1, r5, #1
 800be0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800be10:	b108      	cbz	r0, 800be16 <_gcvt+0x136>
 800be12:	2a00      	cmp	r2, #0
 800be14:	dc0f      	bgt.n	800be36 <_gcvt+0x156>
 800be16:	b9df      	cbnz	r7, 800be50 <_gcvt+0x170>
 800be18:	2200      	movs	r2, #0
 800be1a:	701a      	strb	r2, [r3, #0]
 800be1c:	e780      	b.n	800bd20 <_gcvt+0x40>
 800be1e:	2a00      	cmp	r2, #0
 800be20:	f104 34ff 	add.w	r4, r4, #4294967295
 800be24:	dcc9      	bgt.n	800bdba <_gcvt+0xda>
 800be26:	2900      	cmp	r1, #0
 800be28:	d0d0      	beq.n	800bdcc <_gcvt+0xec>
 800be2a:	9005      	str	r0, [sp, #20]
 800be2c:	e7ce      	b.n	800bdcc <_gcvt+0xec>
 800be2e:	f800 ef01 	strb.w	lr, [r0, #1]!
 800be32:	2401      	movs	r4, #1
 800be34:	e7db      	b.n	800bdee <_gcvt+0x10e>
 800be36:	f803 0b01 	strb.w	r0, [r3], #1
 800be3a:	3a01      	subs	r2, #1
 800be3c:	e7e6      	b.n	800be0c <_gcvt+0x12c>
 800be3e:	f801 5b01 	strb.w	r5, [r1], #1
 800be42:	1a60      	subs	r0, r4, r1
 800be44:	2800      	cmp	r0, #0
 800be46:	dcfa      	bgt.n	800be3e <_gcvt+0x15e>
 800be48:	2a00      	cmp	r2, #0
 800be4a:	bfa8      	it	ge
 800be4c:	189b      	addge	r3, r3, r2
 800be4e:	e7e3      	b.n	800be18 <_gcvt+0x138>
 800be50:	4619      	mov	r1, r3
 800be52:	189c      	adds	r4, r3, r2
 800be54:	2530      	movs	r5, #48	; 0x30
 800be56:	e7f4      	b.n	800be42 <_gcvt+0x162>
 800be58:	eb1c432d 	.word	0xeb1c432d
 800be5c:	3f1a36e2 	.word	0x3f1a36e2

0800be60 <std>:
 800be60:	2300      	movs	r3, #0
 800be62:	b510      	push	{r4, lr}
 800be64:	4604      	mov	r4, r0
 800be66:	e9c0 3300 	strd	r3, r3, [r0]
 800be6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be6e:	6083      	str	r3, [r0, #8]
 800be70:	8181      	strh	r1, [r0, #12]
 800be72:	6643      	str	r3, [r0, #100]	; 0x64
 800be74:	81c2      	strh	r2, [r0, #14]
 800be76:	6183      	str	r3, [r0, #24]
 800be78:	4619      	mov	r1, r3
 800be7a:	2208      	movs	r2, #8
 800be7c:	305c      	adds	r0, #92	; 0x5c
 800be7e:	f7fe fb6d 	bl	800a55c <memset>
 800be82:	4b05      	ldr	r3, [pc, #20]	; (800be98 <std+0x38>)
 800be84:	6263      	str	r3, [r4, #36]	; 0x24
 800be86:	4b05      	ldr	r3, [pc, #20]	; (800be9c <std+0x3c>)
 800be88:	62a3      	str	r3, [r4, #40]	; 0x28
 800be8a:	4b05      	ldr	r3, [pc, #20]	; (800bea0 <std+0x40>)
 800be8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be8e:	4b05      	ldr	r3, [pc, #20]	; (800bea4 <std+0x44>)
 800be90:	6224      	str	r4, [r4, #32]
 800be92:	6323      	str	r3, [r4, #48]	; 0x30
 800be94:	bd10      	pop	{r4, pc}
 800be96:	bf00      	nop
 800be98:	0800cc71 	.word	0x0800cc71
 800be9c:	0800cc93 	.word	0x0800cc93
 800bea0:	0800cccb 	.word	0x0800cccb
 800bea4:	0800ccef 	.word	0x0800ccef

0800bea8 <_cleanup_r>:
 800bea8:	4901      	ldr	r1, [pc, #4]	; (800beb0 <_cleanup_r+0x8>)
 800beaa:	f000 b8af 	b.w	800c00c <_fwalk_reent>
 800beae:	bf00      	nop
 800beb0:	0800d015 	.word	0x0800d015

0800beb4 <__sfmoreglue>:
 800beb4:	b570      	push	{r4, r5, r6, lr}
 800beb6:	2268      	movs	r2, #104	; 0x68
 800beb8:	1e4d      	subs	r5, r1, #1
 800beba:	4355      	muls	r5, r2
 800bebc:	460e      	mov	r6, r1
 800bebe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bec2:	f000 fcf7 	bl	800c8b4 <_malloc_r>
 800bec6:	4604      	mov	r4, r0
 800bec8:	b140      	cbz	r0, 800bedc <__sfmoreglue+0x28>
 800beca:	2100      	movs	r1, #0
 800becc:	e9c0 1600 	strd	r1, r6, [r0]
 800bed0:	300c      	adds	r0, #12
 800bed2:	60a0      	str	r0, [r4, #8]
 800bed4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bed8:	f7fe fb40 	bl	800a55c <memset>
 800bedc:	4620      	mov	r0, r4
 800bede:	bd70      	pop	{r4, r5, r6, pc}

0800bee0 <__sfp_lock_acquire>:
 800bee0:	4801      	ldr	r0, [pc, #4]	; (800bee8 <__sfp_lock_acquire+0x8>)
 800bee2:	f000 b8b8 	b.w	800c056 <__retarget_lock_acquire_recursive>
 800bee6:	bf00      	nop
 800bee8:	20000ba5 	.word	0x20000ba5

0800beec <__sfp_lock_release>:
 800beec:	4801      	ldr	r0, [pc, #4]	; (800bef4 <__sfp_lock_release+0x8>)
 800beee:	f000 b8b3 	b.w	800c058 <__retarget_lock_release_recursive>
 800bef2:	bf00      	nop
 800bef4:	20000ba5 	.word	0x20000ba5

0800bef8 <__sinit_lock_acquire>:
 800bef8:	4801      	ldr	r0, [pc, #4]	; (800bf00 <__sinit_lock_acquire+0x8>)
 800befa:	f000 b8ac 	b.w	800c056 <__retarget_lock_acquire_recursive>
 800befe:	bf00      	nop
 800bf00:	20000ba6 	.word	0x20000ba6

0800bf04 <__sinit_lock_release>:
 800bf04:	4801      	ldr	r0, [pc, #4]	; (800bf0c <__sinit_lock_release+0x8>)
 800bf06:	f000 b8a7 	b.w	800c058 <__retarget_lock_release_recursive>
 800bf0a:	bf00      	nop
 800bf0c:	20000ba6 	.word	0x20000ba6

0800bf10 <__sinit>:
 800bf10:	b510      	push	{r4, lr}
 800bf12:	4604      	mov	r4, r0
 800bf14:	f7ff fff0 	bl	800bef8 <__sinit_lock_acquire>
 800bf18:	69a3      	ldr	r3, [r4, #24]
 800bf1a:	b11b      	cbz	r3, 800bf24 <__sinit+0x14>
 800bf1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf20:	f7ff bff0 	b.w	800bf04 <__sinit_lock_release>
 800bf24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bf28:	6523      	str	r3, [r4, #80]	; 0x50
 800bf2a:	4b13      	ldr	r3, [pc, #76]	; (800bf78 <__sinit+0x68>)
 800bf2c:	4a13      	ldr	r2, [pc, #76]	; (800bf7c <__sinit+0x6c>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	62a2      	str	r2, [r4, #40]	; 0x28
 800bf32:	42a3      	cmp	r3, r4
 800bf34:	bf04      	itt	eq
 800bf36:	2301      	moveq	r3, #1
 800bf38:	61a3      	streq	r3, [r4, #24]
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	f000 f820 	bl	800bf80 <__sfp>
 800bf40:	6060      	str	r0, [r4, #4]
 800bf42:	4620      	mov	r0, r4
 800bf44:	f000 f81c 	bl	800bf80 <__sfp>
 800bf48:	60a0      	str	r0, [r4, #8]
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	f000 f818 	bl	800bf80 <__sfp>
 800bf50:	2200      	movs	r2, #0
 800bf52:	60e0      	str	r0, [r4, #12]
 800bf54:	2104      	movs	r1, #4
 800bf56:	6860      	ldr	r0, [r4, #4]
 800bf58:	f7ff ff82 	bl	800be60 <std>
 800bf5c:	68a0      	ldr	r0, [r4, #8]
 800bf5e:	2201      	movs	r2, #1
 800bf60:	2109      	movs	r1, #9
 800bf62:	f7ff ff7d 	bl	800be60 <std>
 800bf66:	68e0      	ldr	r0, [r4, #12]
 800bf68:	2202      	movs	r2, #2
 800bf6a:	2112      	movs	r1, #18
 800bf6c:	f7ff ff78 	bl	800be60 <std>
 800bf70:	2301      	movs	r3, #1
 800bf72:	61a3      	str	r3, [r4, #24]
 800bf74:	e7d2      	b.n	800bf1c <__sinit+0xc>
 800bf76:	bf00      	nop
 800bf78:	0800e51c 	.word	0x0800e51c
 800bf7c:	0800bea9 	.word	0x0800bea9

0800bf80 <__sfp>:
 800bf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf82:	4607      	mov	r7, r0
 800bf84:	f7ff ffac 	bl	800bee0 <__sfp_lock_acquire>
 800bf88:	4b1e      	ldr	r3, [pc, #120]	; (800c004 <__sfp+0x84>)
 800bf8a:	681e      	ldr	r6, [r3, #0]
 800bf8c:	69b3      	ldr	r3, [r6, #24]
 800bf8e:	b913      	cbnz	r3, 800bf96 <__sfp+0x16>
 800bf90:	4630      	mov	r0, r6
 800bf92:	f7ff ffbd 	bl	800bf10 <__sinit>
 800bf96:	3648      	adds	r6, #72	; 0x48
 800bf98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bf9c:	3b01      	subs	r3, #1
 800bf9e:	d503      	bpl.n	800bfa8 <__sfp+0x28>
 800bfa0:	6833      	ldr	r3, [r6, #0]
 800bfa2:	b30b      	cbz	r3, 800bfe8 <__sfp+0x68>
 800bfa4:	6836      	ldr	r6, [r6, #0]
 800bfa6:	e7f7      	b.n	800bf98 <__sfp+0x18>
 800bfa8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bfac:	b9d5      	cbnz	r5, 800bfe4 <__sfp+0x64>
 800bfae:	4b16      	ldr	r3, [pc, #88]	; (800c008 <__sfp+0x88>)
 800bfb0:	60e3      	str	r3, [r4, #12]
 800bfb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bfb6:	6665      	str	r5, [r4, #100]	; 0x64
 800bfb8:	f000 f84c 	bl	800c054 <__retarget_lock_init_recursive>
 800bfbc:	f7ff ff96 	bl	800beec <__sfp_lock_release>
 800bfc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bfc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bfc8:	6025      	str	r5, [r4, #0]
 800bfca:	61a5      	str	r5, [r4, #24]
 800bfcc:	2208      	movs	r2, #8
 800bfce:	4629      	mov	r1, r5
 800bfd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bfd4:	f7fe fac2 	bl	800a55c <memset>
 800bfd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bfdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfe4:	3468      	adds	r4, #104	; 0x68
 800bfe6:	e7d9      	b.n	800bf9c <__sfp+0x1c>
 800bfe8:	2104      	movs	r1, #4
 800bfea:	4638      	mov	r0, r7
 800bfec:	f7ff ff62 	bl	800beb4 <__sfmoreglue>
 800bff0:	4604      	mov	r4, r0
 800bff2:	6030      	str	r0, [r6, #0]
 800bff4:	2800      	cmp	r0, #0
 800bff6:	d1d5      	bne.n	800bfa4 <__sfp+0x24>
 800bff8:	f7ff ff78 	bl	800beec <__sfp_lock_release>
 800bffc:	230c      	movs	r3, #12
 800bffe:	603b      	str	r3, [r7, #0]
 800c000:	e7ee      	b.n	800bfe0 <__sfp+0x60>
 800c002:	bf00      	nop
 800c004:	0800e51c 	.word	0x0800e51c
 800c008:	ffff0001 	.word	0xffff0001

0800c00c <_fwalk_reent>:
 800c00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c010:	4606      	mov	r6, r0
 800c012:	4688      	mov	r8, r1
 800c014:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c018:	2700      	movs	r7, #0
 800c01a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c01e:	f1b9 0901 	subs.w	r9, r9, #1
 800c022:	d505      	bpl.n	800c030 <_fwalk_reent+0x24>
 800c024:	6824      	ldr	r4, [r4, #0]
 800c026:	2c00      	cmp	r4, #0
 800c028:	d1f7      	bne.n	800c01a <_fwalk_reent+0xe>
 800c02a:	4638      	mov	r0, r7
 800c02c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c030:	89ab      	ldrh	r3, [r5, #12]
 800c032:	2b01      	cmp	r3, #1
 800c034:	d907      	bls.n	800c046 <_fwalk_reent+0x3a>
 800c036:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c03a:	3301      	adds	r3, #1
 800c03c:	d003      	beq.n	800c046 <_fwalk_reent+0x3a>
 800c03e:	4629      	mov	r1, r5
 800c040:	4630      	mov	r0, r6
 800c042:	47c0      	blx	r8
 800c044:	4307      	orrs	r7, r0
 800c046:	3568      	adds	r5, #104	; 0x68
 800c048:	e7e9      	b.n	800c01e <_fwalk_reent+0x12>
	...

0800c04c <_localeconv_r>:
 800c04c:	4800      	ldr	r0, [pc, #0]	; (800c050 <_localeconv_r+0x4>)
 800c04e:	4770      	bx	lr
 800c050:	200001a8 	.word	0x200001a8

0800c054 <__retarget_lock_init_recursive>:
 800c054:	4770      	bx	lr

0800c056 <__retarget_lock_acquire_recursive>:
 800c056:	4770      	bx	lr

0800c058 <__retarget_lock_release_recursive>:
 800c058:	4770      	bx	lr
	...

0800c05c <malloc>:
 800c05c:	4b02      	ldr	r3, [pc, #8]	; (800c068 <malloc+0xc>)
 800c05e:	4601      	mov	r1, r0
 800c060:	6818      	ldr	r0, [r3, #0]
 800c062:	f000 bc27 	b.w	800c8b4 <_malloc_r>
 800c066:	bf00      	nop
 800c068:	20000054 	.word	0x20000054

0800c06c <_Balloc>:
 800c06c:	b570      	push	{r4, r5, r6, lr}
 800c06e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c070:	4604      	mov	r4, r0
 800c072:	460d      	mov	r5, r1
 800c074:	b976      	cbnz	r6, 800c094 <_Balloc+0x28>
 800c076:	2010      	movs	r0, #16
 800c078:	f7ff fff0 	bl	800c05c <malloc>
 800c07c:	4602      	mov	r2, r0
 800c07e:	6260      	str	r0, [r4, #36]	; 0x24
 800c080:	b920      	cbnz	r0, 800c08c <_Balloc+0x20>
 800c082:	4b18      	ldr	r3, [pc, #96]	; (800c0e4 <_Balloc+0x78>)
 800c084:	4818      	ldr	r0, [pc, #96]	; (800c0e8 <_Balloc+0x7c>)
 800c086:	2166      	movs	r1, #102	; 0x66
 800c088:	f000 ff10 	bl	800ceac <__assert_func>
 800c08c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c090:	6006      	str	r6, [r0, #0]
 800c092:	60c6      	str	r6, [r0, #12]
 800c094:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c096:	68f3      	ldr	r3, [r6, #12]
 800c098:	b183      	cbz	r3, 800c0bc <_Balloc+0x50>
 800c09a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c09c:	68db      	ldr	r3, [r3, #12]
 800c09e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c0a2:	b9b8      	cbnz	r0, 800c0d4 <_Balloc+0x68>
 800c0a4:	2101      	movs	r1, #1
 800c0a6:	fa01 f605 	lsl.w	r6, r1, r5
 800c0aa:	1d72      	adds	r2, r6, #5
 800c0ac:	0092      	lsls	r2, r2, #2
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	f000 fb7e 	bl	800c7b0 <_calloc_r>
 800c0b4:	b160      	cbz	r0, 800c0d0 <_Balloc+0x64>
 800c0b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c0ba:	e00e      	b.n	800c0da <_Balloc+0x6e>
 800c0bc:	2221      	movs	r2, #33	; 0x21
 800c0be:	2104      	movs	r1, #4
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	f000 fb75 	bl	800c7b0 <_calloc_r>
 800c0c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0c8:	60f0      	str	r0, [r6, #12]
 800c0ca:	68db      	ldr	r3, [r3, #12]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d1e4      	bne.n	800c09a <_Balloc+0x2e>
 800c0d0:	2000      	movs	r0, #0
 800c0d2:	bd70      	pop	{r4, r5, r6, pc}
 800c0d4:	6802      	ldr	r2, [r0, #0]
 800c0d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c0da:	2300      	movs	r3, #0
 800c0dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c0e0:	e7f7      	b.n	800c0d2 <_Balloc+0x66>
 800c0e2:	bf00      	nop
 800c0e4:	0800e586 	.word	0x0800e586
 800c0e8:	0800e66c 	.word	0x0800e66c

0800c0ec <_Bfree>:
 800c0ec:	b570      	push	{r4, r5, r6, lr}
 800c0ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c0f0:	4605      	mov	r5, r0
 800c0f2:	460c      	mov	r4, r1
 800c0f4:	b976      	cbnz	r6, 800c114 <_Bfree+0x28>
 800c0f6:	2010      	movs	r0, #16
 800c0f8:	f7ff ffb0 	bl	800c05c <malloc>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	6268      	str	r0, [r5, #36]	; 0x24
 800c100:	b920      	cbnz	r0, 800c10c <_Bfree+0x20>
 800c102:	4b09      	ldr	r3, [pc, #36]	; (800c128 <_Bfree+0x3c>)
 800c104:	4809      	ldr	r0, [pc, #36]	; (800c12c <_Bfree+0x40>)
 800c106:	218a      	movs	r1, #138	; 0x8a
 800c108:	f000 fed0 	bl	800ceac <__assert_func>
 800c10c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c110:	6006      	str	r6, [r0, #0]
 800c112:	60c6      	str	r6, [r0, #12]
 800c114:	b13c      	cbz	r4, 800c126 <_Bfree+0x3a>
 800c116:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c118:	6862      	ldr	r2, [r4, #4]
 800c11a:	68db      	ldr	r3, [r3, #12]
 800c11c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c120:	6021      	str	r1, [r4, #0]
 800c122:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c126:	bd70      	pop	{r4, r5, r6, pc}
 800c128:	0800e586 	.word	0x0800e586
 800c12c:	0800e66c 	.word	0x0800e66c

0800c130 <__multadd>:
 800c130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c134:	690d      	ldr	r5, [r1, #16]
 800c136:	4607      	mov	r7, r0
 800c138:	460c      	mov	r4, r1
 800c13a:	461e      	mov	r6, r3
 800c13c:	f101 0c14 	add.w	ip, r1, #20
 800c140:	2000      	movs	r0, #0
 800c142:	f8dc 3000 	ldr.w	r3, [ip]
 800c146:	b299      	uxth	r1, r3
 800c148:	fb02 6101 	mla	r1, r2, r1, r6
 800c14c:	0c1e      	lsrs	r6, r3, #16
 800c14e:	0c0b      	lsrs	r3, r1, #16
 800c150:	fb02 3306 	mla	r3, r2, r6, r3
 800c154:	b289      	uxth	r1, r1
 800c156:	3001      	adds	r0, #1
 800c158:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c15c:	4285      	cmp	r5, r0
 800c15e:	f84c 1b04 	str.w	r1, [ip], #4
 800c162:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c166:	dcec      	bgt.n	800c142 <__multadd+0x12>
 800c168:	b30e      	cbz	r6, 800c1ae <__multadd+0x7e>
 800c16a:	68a3      	ldr	r3, [r4, #8]
 800c16c:	42ab      	cmp	r3, r5
 800c16e:	dc19      	bgt.n	800c1a4 <__multadd+0x74>
 800c170:	6861      	ldr	r1, [r4, #4]
 800c172:	4638      	mov	r0, r7
 800c174:	3101      	adds	r1, #1
 800c176:	f7ff ff79 	bl	800c06c <_Balloc>
 800c17a:	4680      	mov	r8, r0
 800c17c:	b928      	cbnz	r0, 800c18a <__multadd+0x5a>
 800c17e:	4602      	mov	r2, r0
 800c180:	4b0c      	ldr	r3, [pc, #48]	; (800c1b4 <__multadd+0x84>)
 800c182:	480d      	ldr	r0, [pc, #52]	; (800c1b8 <__multadd+0x88>)
 800c184:	21b5      	movs	r1, #181	; 0xb5
 800c186:	f000 fe91 	bl	800ceac <__assert_func>
 800c18a:	6922      	ldr	r2, [r4, #16]
 800c18c:	3202      	adds	r2, #2
 800c18e:	f104 010c 	add.w	r1, r4, #12
 800c192:	0092      	lsls	r2, r2, #2
 800c194:	300c      	adds	r0, #12
 800c196:	f7fe f9d3 	bl	800a540 <memcpy>
 800c19a:	4621      	mov	r1, r4
 800c19c:	4638      	mov	r0, r7
 800c19e:	f7ff ffa5 	bl	800c0ec <_Bfree>
 800c1a2:	4644      	mov	r4, r8
 800c1a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c1a8:	3501      	adds	r5, #1
 800c1aa:	615e      	str	r6, [r3, #20]
 800c1ac:	6125      	str	r5, [r4, #16]
 800c1ae:	4620      	mov	r0, r4
 800c1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1b4:	0800e5f8 	.word	0x0800e5f8
 800c1b8:	0800e66c 	.word	0x0800e66c

0800c1bc <__hi0bits>:
 800c1bc:	0c03      	lsrs	r3, r0, #16
 800c1be:	041b      	lsls	r3, r3, #16
 800c1c0:	b9d3      	cbnz	r3, 800c1f8 <__hi0bits+0x3c>
 800c1c2:	0400      	lsls	r0, r0, #16
 800c1c4:	2310      	movs	r3, #16
 800c1c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c1ca:	bf04      	itt	eq
 800c1cc:	0200      	lsleq	r0, r0, #8
 800c1ce:	3308      	addeq	r3, #8
 800c1d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c1d4:	bf04      	itt	eq
 800c1d6:	0100      	lsleq	r0, r0, #4
 800c1d8:	3304      	addeq	r3, #4
 800c1da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c1de:	bf04      	itt	eq
 800c1e0:	0080      	lsleq	r0, r0, #2
 800c1e2:	3302      	addeq	r3, #2
 800c1e4:	2800      	cmp	r0, #0
 800c1e6:	db05      	blt.n	800c1f4 <__hi0bits+0x38>
 800c1e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c1ec:	f103 0301 	add.w	r3, r3, #1
 800c1f0:	bf08      	it	eq
 800c1f2:	2320      	moveq	r3, #32
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	4770      	bx	lr
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	e7e4      	b.n	800c1c6 <__hi0bits+0xa>

0800c1fc <__lo0bits>:
 800c1fc:	6803      	ldr	r3, [r0, #0]
 800c1fe:	f013 0207 	ands.w	r2, r3, #7
 800c202:	4601      	mov	r1, r0
 800c204:	d00b      	beq.n	800c21e <__lo0bits+0x22>
 800c206:	07da      	lsls	r2, r3, #31
 800c208:	d423      	bmi.n	800c252 <__lo0bits+0x56>
 800c20a:	0798      	lsls	r0, r3, #30
 800c20c:	bf49      	itett	mi
 800c20e:	085b      	lsrmi	r3, r3, #1
 800c210:	089b      	lsrpl	r3, r3, #2
 800c212:	2001      	movmi	r0, #1
 800c214:	600b      	strmi	r3, [r1, #0]
 800c216:	bf5c      	itt	pl
 800c218:	600b      	strpl	r3, [r1, #0]
 800c21a:	2002      	movpl	r0, #2
 800c21c:	4770      	bx	lr
 800c21e:	b298      	uxth	r0, r3
 800c220:	b9a8      	cbnz	r0, 800c24e <__lo0bits+0x52>
 800c222:	0c1b      	lsrs	r3, r3, #16
 800c224:	2010      	movs	r0, #16
 800c226:	b2da      	uxtb	r2, r3
 800c228:	b90a      	cbnz	r2, 800c22e <__lo0bits+0x32>
 800c22a:	3008      	adds	r0, #8
 800c22c:	0a1b      	lsrs	r3, r3, #8
 800c22e:	071a      	lsls	r2, r3, #28
 800c230:	bf04      	itt	eq
 800c232:	091b      	lsreq	r3, r3, #4
 800c234:	3004      	addeq	r0, #4
 800c236:	079a      	lsls	r2, r3, #30
 800c238:	bf04      	itt	eq
 800c23a:	089b      	lsreq	r3, r3, #2
 800c23c:	3002      	addeq	r0, #2
 800c23e:	07da      	lsls	r2, r3, #31
 800c240:	d403      	bmi.n	800c24a <__lo0bits+0x4e>
 800c242:	085b      	lsrs	r3, r3, #1
 800c244:	f100 0001 	add.w	r0, r0, #1
 800c248:	d005      	beq.n	800c256 <__lo0bits+0x5a>
 800c24a:	600b      	str	r3, [r1, #0]
 800c24c:	4770      	bx	lr
 800c24e:	4610      	mov	r0, r2
 800c250:	e7e9      	b.n	800c226 <__lo0bits+0x2a>
 800c252:	2000      	movs	r0, #0
 800c254:	4770      	bx	lr
 800c256:	2020      	movs	r0, #32
 800c258:	4770      	bx	lr
	...

0800c25c <__i2b>:
 800c25c:	b510      	push	{r4, lr}
 800c25e:	460c      	mov	r4, r1
 800c260:	2101      	movs	r1, #1
 800c262:	f7ff ff03 	bl	800c06c <_Balloc>
 800c266:	4602      	mov	r2, r0
 800c268:	b928      	cbnz	r0, 800c276 <__i2b+0x1a>
 800c26a:	4b05      	ldr	r3, [pc, #20]	; (800c280 <__i2b+0x24>)
 800c26c:	4805      	ldr	r0, [pc, #20]	; (800c284 <__i2b+0x28>)
 800c26e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c272:	f000 fe1b 	bl	800ceac <__assert_func>
 800c276:	2301      	movs	r3, #1
 800c278:	6144      	str	r4, [r0, #20]
 800c27a:	6103      	str	r3, [r0, #16]
 800c27c:	bd10      	pop	{r4, pc}
 800c27e:	bf00      	nop
 800c280:	0800e5f8 	.word	0x0800e5f8
 800c284:	0800e66c 	.word	0x0800e66c

0800c288 <__multiply>:
 800c288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c28c:	4691      	mov	r9, r2
 800c28e:	690a      	ldr	r2, [r1, #16]
 800c290:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c294:	429a      	cmp	r2, r3
 800c296:	bfb8      	it	lt
 800c298:	460b      	movlt	r3, r1
 800c29a:	460c      	mov	r4, r1
 800c29c:	bfbc      	itt	lt
 800c29e:	464c      	movlt	r4, r9
 800c2a0:	4699      	movlt	r9, r3
 800c2a2:	6927      	ldr	r7, [r4, #16]
 800c2a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c2a8:	68a3      	ldr	r3, [r4, #8]
 800c2aa:	6861      	ldr	r1, [r4, #4]
 800c2ac:	eb07 060a 	add.w	r6, r7, sl
 800c2b0:	42b3      	cmp	r3, r6
 800c2b2:	b085      	sub	sp, #20
 800c2b4:	bfb8      	it	lt
 800c2b6:	3101      	addlt	r1, #1
 800c2b8:	f7ff fed8 	bl	800c06c <_Balloc>
 800c2bc:	b930      	cbnz	r0, 800c2cc <__multiply+0x44>
 800c2be:	4602      	mov	r2, r0
 800c2c0:	4b44      	ldr	r3, [pc, #272]	; (800c3d4 <__multiply+0x14c>)
 800c2c2:	4845      	ldr	r0, [pc, #276]	; (800c3d8 <__multiply+0x150>)
 800c2c4:	f240 115d 	movw	r1, #349	; 0x15d
 800c2c8:	f000 fdf0 	bl	800ceac <__assert_func>
 800c2cc:	f100 0514 	add.w	r5, r0, #20
 800c2d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c2d4:	462b      	mov	r3, r5
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	4543      	cmp	r3, r8
 800c2da:	d321      	bcc.n	800c320 <__multiply+0x98>
 800c2dc:	f104 0314 	add.w	r3, r4, #20
 800c2e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c2e4:	f109 0314 	add.w	r3, r9, #20
 800c2e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c2ec:	9202      	str	r2, [sp, #8]
 800c2ee:	1b3a      	subs	r2, r7, r4
 800c2f0:	3a15      	subs	r2, #21
 800c2f2:	f022 0203 	bic.w	r2, r2, #3
 800c2f6:	3204      	adds	r2, #4
 800c2f8:	f104 0115 	add.w	r1, r4, #21
 800c2fc:	428f      	cmp	r7, r1
 800c2fe:	bf38      	it	cc
 800c300:	2204      	movcc	r2, #4
 800c302:	9201      	str	r2, [sp, #4]
 800c304:	9a02      	ldr	r2, [sp, #8]
 800c306:	9303      	str	r3, [sp, #12]
 800c308:	429a      	cmp	r2, r3
 800c30a:	d80c      	bhi.n	800c326 <__multiply+0x9e>
 800c30c:	2e00      	cmp	r6, #0
 800c30e:	dd03      	ble.n	800c318 <__multiply+0x90>
 800c310:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c314:	2b00      	cmp	r3, #0
 800c316:	d05a      	beq.n	800c3ce <__multiply+0x146>
 800c318:	6106      	str	r6, [r0, #16]
 800c31a:	b005      	add	sp, #20
 800c31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c320:	f843 2b04 	str.w	r2, [r3], #4
 800c324:	e7d8      	b.n	800c2d8 <__multiply+0x50>
 800c326:	f8b3 a000 	ldrh.w	sl, [r3]
 800c32a:	f1ba 0f00 	cmp.w	sl, #0
 800c32e:	d024      	beq.n	800c37a <__multiply+0xf2>
 800c330:	f104 0e14 	add.w	lr, r4, #20
 800c334:	46a9      	mov	r9, r5
 800c336:	f04f 0c00 	mov.w	ip, #0
 800c33a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c33e:	f8d9 1000 	ldr.w	r1, [r9]
 800c342:	fa1f fb82 	uxth.w	fp, r2
 800c346:	b289      	uxth	r1, r1
 800c348:	fb0a 110b 	mla	r1, sl, fp, r1
 800c34c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c350:	f8d9 2000 	ldr.w	r2, [r9]
 800c354:	4461      	add	r1, ip
 800c356:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c35a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c35e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c362:	b289      	uxth	r1, r1
 800c364:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c368:	4577      	cmp	r7, lr
 800c36a:	f849 1b04 	str.w	r1, [r9], #4
 800c36e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c372:	d8e2      	bhi.n	800c33a <__multiply+0xb2>
 800c374:	9a01      	ldr	r2, [sp, #4]
 800c376:	f845 c002 	str.w	ip, [r5, r2]
 800c37a:	9a03      	ldr	r2, [sp, #12]
 800c37c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c380:	3304      	adds	r3, #4
 800c382:	f1b9 0f00 	cmp.w	r9, #0
 800c386:	d020      	beq.n	800c3ca <__multiply+0x142>
 800c388:	6829      	ldr	r1, [r5, #0]
 800c38a:	f104 0c14 	add.w	ip, r4, #20
 800c38e:	46ae      	mov	lr, r5
 800c390:	f04f 0a00 	mov.w	sl, #0
 800c394:	f8bc b000 	ldrh.w	fp, [ip]
 800c398:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c39c:	fb09 220b 	mla	r2, r9, fp, r2
 800c3a0:	4492      	add	sl, r2
 800c3a2:	b289      	uxth	r1, r1
 800c3a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c3a8:	f84e 1b04 	str.w	r1, [lr], #4
 800c3ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c3b0:	f8be 1000 	ldrh.w	r1, [lr]
 800c3b4:	0c12      	lsrs	r2, r2, #16
 800c3b6:	fb09 1102 	mla	r1, r9, r2, r1
 800c3ba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c3be:	4567      	cmp	r7, ip
 800c3c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c3c4:	d8e6      	bhi.n	800c394 <__multiply+0x10c>
 800c3c6:	9a01      	ldr	r2, [sp, #4]
 800c3c8:	50a9      	str	r1, [r5, r2]
 800c3ca:	3504      	adds	r5, #4
 800c3cc:	e79a      	b.n	800c304 <__multiply+0x7c>
 800c3ce:	3e01      	subs	r6, #1
 800c3d0:	e79c      	b.n	800c30c <__multiply+0x84>
 800c3d2:	bf00      	nop
 800c3d4:	0800e5f8 	.word	0x0800e5f8
 800c3d8:	0800e66c 	.word	0x0800e66c

0800c3dc <__pow5mult>:
 800c3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3e0:	4615      	mov	r5, r2
 800c3e2:	f012 0203 	ands.w	r2, r2, #3
 800c3e6:	4606      	mov	r6, r0
 800c3e8:	460f      	mov	r7, r1
 800c3ea:	d007      	beq.n	800c3fc <__pow5mult+0x20>
 800c3ec:	4c25      	ldr	r4, [pc, #148]	; (800c484 <__pow5mult+0xa8>)
 800c3ee:	3a01      	subs	r2, #1
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c3f6:	f7ff fe9b 	bl	800c130 <__multadd>
 800c3fa:	4607      	mov	r7, r0
 800c3fc:	10ad      	asrs	r5, r5, #2
 800c3fe:	d03d      	beq.n	800c47c <__pow5mult+0xa0>
 800c400:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c402:	b97c      	cbnz	r4, 800c424 <__pow5mult+0x48>
 800c404:	2010      	movs	r0, #16
 800c406:	f7ff fe29 	bl	800c05c <malloc>
 800c40a:	4602      	mov	r2, r0
 800c40c:	6270      	str	r0, [r6, #36]	; 0x24
 800c40e:	b928      	cbnz	r0, 800c41c <__pow5mult+0x40>
 800c410:	4b1d      	ldr	r3, [pc, #116]	; (800c488 <__pow5mult+0xac>)
 800c412:	481e      	ldr	r0, [pc, #120]	; (800c48c <__pow5mult+0xb0>)
 800c414:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c418:	f000 fd48 	bl	800ceac <__assert_func>
 800c41c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c420:	6004      	str	r4, [r0, #0]
 800c422:	60c4      	str	r4, [r0, #12]
 800c424:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c428:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c42c:	b94c      	cbnz	r4, 800c442 <__pow5mult+0x66>
 800c42e:	f240 2171 	movw	r1, #625	; 0x271
 800c432:	4630      	mov	r0, r6
 800c434:	f7ff ff12 	bl	800c25c <__i2b>
 800c438:	2300      	movs	r3, #0
 800c43a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c43e:	4604      	mov	r4, r0
 800c440:	6003      	str	r3, [r0, #0]
 800c442:	f04f 0900 	mov.w	r9, #0
 800c446:	07eb      	lsls	r3, r5, #31
 800c448:	d50a      	bpl.n	800c460 <__pow5mult+0x84>
 800c44a:	4639      	mov	r1, r7
 800c44c:	4622      	mov	r2, r4
 800c44e:	4630      	mov	r0, r6
 800c450:	f7ff ff1a 	bl	800c288 <__multiply>
 800c454:	4639      	mov	r1, r7
 800c456:	4680      	mov	r8, r0
 800c458:	4630      	mov	r0, r6
 800c45a:	f7ff fe47 	bl	800c0ec <_Bfree>
 800c45e:	4647      	mov	r7, r8
 800c460:	106d      	asrs	r5, r5, #1
 800c462:	d00b      	beq.n	800c47c <__pow5mult+0xa0>
 800c464:	6820      	ldr	r0, [r4, #0]
 800c466:	b938      	cbnz	r0, 800c478 <__pow5mult+0x9c>
 800c468:	4622      	mov	r2, r4
 800c46a:	4621      	mov	r1, r4
 800c46c:	4630      	mov	r0, r6
 800c46e:	f7ff ff0b 	bl	800c288 <__multiply>
 800c472:	6020      	str	r0, [r4, #0]
 800c474:	f8c0 9000 	str.w	r9, [r0]
 800c478:	4604      	mov	r4, r0
 800c47a:	e7e4      	b.n	800c446 <__pow5mult+0x6a>
 800c47c:	4638      	mov	r0, r7
 800c47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c482:	bf00      	nop
 800c484:	0800e7b8 	.word	0x0800e7b8
 800c488:	0800e586 	.word	0x0800e586
 800c48c:	0800e66c 	.word	0x0800e66c

0800c490 <__lshift>:
 800c490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c494:	460c      	mov	r4, r1
 800c496:	6849      	ldr	r1, [r1, #4]
 800c498:	6923      	ldr	r3, [r4, #16]
 800c49a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c49e:	68a3      	ldr	r3, [r4, #8]
 800c4a0:	4607      	mov	r7, r0
 800c4a2:	4691      	mov	r9, r2
 800c4a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c4a8:	f108 0601 	add.w	r6, r8, #1
 800c4ac:	42b3      	cmp	r3, r6
 800c4ae:	db0b      	blt.n	800c4c8 <__lshift+0x38>
 800c4b0:	4638      	mov	r0, r7
 800c4b2:	f7ff fddb 	bl	800c06c <_Balloc>
 800c4b6:	4605      	mov	r5, r0
 800c4b8:	b948      	cbnz	r0, 800c4ce <__lshift+0x3e>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	4b2a      	ldr	r3, [pc, #168]	; (800c568 <__lshift+0xd8>)
 800c4be:	482b      	ldr	r0, [pc, #172]	; (800c56c <__lshift+0xdc>)
 800c4c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c4c4:	f000 fcf2 	bl	800ceac <__assert_func>
 800c4c8:	3101      	adds	r1, #1
 800c4ca:	005b      	lsls	r3, r3, #1
 800c4cc:	e7ee      	b.n	800c4ac <__lshift+0x1c>
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	f100 0114 	add.w	r1, r0, #20
 800c4d4:	f100 0210 	add.w	r2, r0, #16
 800c4d8:	4618      	mov	r0, r3
 800c4da:	4553      	cmp	r3, sl
 800c4dc:	db37      	blt.n	800c54e <__lshift+0xbe>
 800c4de:	6920      	ldr	r0, [r4, #16]
 800c4e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c4e4:	f104 0314 	add.w	r3, r4, #20
 800c4e8:	f019 091f 	ands.w	r9, r9, #31
 800c4ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c4f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c4f4:	d02f      	beq.n	800c556 <__lshift+0xc6>
 800c4f6:	f1c9 0e20 	rsb	lr, r9, #32
 800c4fa:	468a      	mov	sl, r1
 800c4fc:	f04f 0c00 	mov.w	ip, #0
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	fa02 f209 	lsl.w	r2, r2, r9
 800c506:	ea42 020c 	orr.w	r2, r2, ip
 800c50a:	f84a 2b04 	str.w	r2, [sl], #4
 800c50e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c512:	4298      	cmp	r0, r3
 800c514:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c518:	d8f2      	bhi.n	800c500 <__lshift+0x70>
 800c51a:	1b03      	subs	r3, r0, r4
 800c51c:	3b15      	subs	r3, #21
 800c51e:	f023 0303 	bic.w	r3, r3, #3
 800c522:	3304      	adds	r3, #4
 800c524:	f104 0215 	add.w	r2, r4, #21
 800c528:	4290      	cmp	r0, r2
 800c52a:	bf38      	it	cc
 800c52c:	2304      	movcc	r3, #4
 800c52e:	f841 c003 	str.w	ip, [r1, r3]
 800c532:	f1bc 0f00 	cmp.w	ip, #0
 800c536:	d001      	beq.n	800c53c <__lshift+0xac>
 800c538:	f108 0602 	add.w	r6, r8, #2
 800c53c:	3e01      	subs	r6, #1
 800c53e:	4638      	mov	r0, r7
 800c540:	612e      	str	r6, [r5, #16]
 800c542:	4621      	mov	r1, r4
 800c544:	f7ff fdd2 	bl	800c0ec <_Bfree>
 800c548:	4628      	mov	r0, r5
 800c54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c54e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c552:	3301      	adds	r3, #1
 800c554:	e7c1      	b.n	800c4da <__lshift+0x4a>
 800c556:	3904      	subs	r1, #4
 800c558:	f853 2b04 	ldr.w	r2, [r3], #4
 800c55c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c560:	4298      	cmp	r0, r3
 800c562:	d8f9      	bhi.n	800c558 <__lshift+0xc8>
 800c564:	e7ea      	b.n	800c53c <__lshift+0xac>
 800c566:	bf00      	nop
 800c568:	0800e5f8 	.word	0x0800e5f8
 800c56c:	0800e66c 	.word	0x0800e66c

0800c570 <__mcmp>:
 800c570:	b530      	push	{r4, r5, lr}
 800c572:	6902      	ldr	r2, [r0, #16]
 800c574:	690c      	ldr	r4, [r1, #16]
 800c576:	1b12      	subs	r2, r2, r4
 800c578:	d10e      	bne.n	800c598 <__mcmp+0x28>
 800c57a:	f100 0314 	add.w	r3, r0, #20
 800c57e:	3114      	adds	r1, #20
 800c580:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c584:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c588:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c58c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c590:	42a5      	cmp	r5, r4
 800c592:	d003      	beq.n	800c59c <__mcmp+0x2c>
 800c594:	d305      	bcc.n	800c5a2 <__mcmp+0x32>
 800c596:	2201      	movs	r2, #1
 800c598:	4610      	mov	r0, r2
 800c59a:	bd30      	pop	{r4, r5, pc}
 800c59c:	4283      	cmp	r3, r0
 800c59e:	d3f3      	bcc.n	800c588 <__mcmp+0x18>
 800c5a0:	e7fa      	b.n	800c598 <__mcmp+0x28>
 800c5a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c5a6:	e7f7      	b.n	800c598 <__mcmp+0x28>

0800c5a8 <__mdiff>:
 800c5a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ac:	460c      	mov	r4, r1
 800c5ae:	4606      	mov	r6, r0
 800c5b0:	4611      	mov	r1, r2
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	4690      	mov	r8, r2
 800c5b6:	f7ff ffdb 	bl	800c570 <__mcmp>
 800c5ba:	1e05      	subs	r5, r0, #0
 800c5bc:	d110      	bne.n	800c5e0 <__mdiff+0x38>
 800c5be:	4629      	mov	r1, r5
 800c5c0:	4630      	mov	r0, r6
 800c5c2:	f7ff fd53 	bl	800c06c <_Balloc>
 800c5c6:	b930      	cbnz	r0, 800c5d6 <__mdiff+0x2e>
 800c5c8:	4b3a      	ldr	r3, [pc, #232]	; (800c6b4 <__mdiff+0x10c>)
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	f240 2132 	movw	r1, #562	; 0x232
 800c5d0:	4839      	ldr	r0, [pc, #228]	; (800c6b8 <__mdiff+0x110>)
 800c5d2:	f000 fc6b 	bl	800ceac <__assert_func>
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c5dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e0:	bfa4      	itt	ge
 800c5e2:	4643      	movge	r3, r8
 800c5e4:	46a0      	movge	r8, r4
 800c5e6:	4630      	mov	r0, r6
 800c5e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c5ec:	bfa6      	itte	ge
 800c5ee:	461c      	movge	r4, r3
 800c5f0:	2500      	movge	r5, #0
 800c5f2:	2501      	movlt	r5, #1
 800c5f4:	f7ff fd3a 	bl	800c06c <_Balloc>
 800c5f8:	b920      	cbnz	r0, 800c604 <__mdiff+0x5c>
 800c5fa:	4b2e      	ldr	r3, [pc, #184]	; (800c6b4 <__mdiff+0x10c>)
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c602:	e7e5      	b.n	800c5d0 <__mdiff+0x28>
 800c604:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c608:	6926      	ldr	r6, [r4, #16]
 800c60a:	60c5      	str	r5, [r0, #12]
 800c60c:	f104 0914 	add.w	r9, r4, #20
 800c610:	f108 0514 	add.w	r5, r8, #20
 800c614:	f100 0e14 	add.w	lr, r0, #20
 800c618:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c61c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c620:	f108 0210 	add.w	r2, r8, #16
 800c624:	46f2      	mov	sl, lr
 800c626:	2100      	movs	r1, #0
 800c628:	f859 3b04 	ldr.w	r3, [r9], #4
 800c62c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c630:	fa1f f883 	uxth.w	r8, r3
 800c634:	fa11 f18b 	uxtah	r1, r1, fp
 800c638:	0c1b      	lsrs	r3, r3, #16
 800c63a:	eba1 0808 	sub.w	r8, r1, r8
 800c63e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c642:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c646:	fa1f f888 	uxth.w	r8, r8
 800c64a:	1419      	asrs	r1, r3, #16
 800c64c:	454e      	cmp	r6, r9
 800c64e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c652:	f84a 3b04 	str.w	r3, [sl], #4
 800c656:	d8e7      	bhi.n	800c628 <__mdiff+0x80>
 800c658:	1b33      	subs	r3, r6, r4
 800c65a:	3b15      	subs	r3, #21
 800c65c:	f023 0303 	bic.w	r3, r3, #3
 800c660:	3304      	adds	r3, #4
 800c662:	3415      	adds	r4, #21
 800c664:	42a6      	cmp	r6, r4
 800c666:	bf38      	it	cc
 800c668:	2304      	movcc	r3, #4
 800c66a:	441d      	add	r5, r3
 800c66c:	4473      	add	r3, lr
 800c66e:	469e      	mov	lr, r3
 800c670:	462e      	mov	r6, r5
 800c672:	4566      	cmp	r6, ip
 800c674:	d30e      	bcc.n	800c694 <__mdiff+0xec>
 800c676:	f10c 0203 	add.w	r2, ip, #3
 800c67a:	1b52      	subs	r2, r2, r5
 800c67c:	f022 0203 	bic.w	r2, r2, #3
 800c680:	3d03      	subs	r5, #3
 800c682:	45ac      	cmp	ip, r5
 800c684:	bf38      	it	cc
 800c686:	2200      	movcc	r2, #0
 800c688:	441a      	add	r2, r3
 800c68a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c68e:	b17b      	cbz	r3, 800c6b0 <__mdiff+0x108>
 800c690:	6107      	str	r7, [r0, #16]
 800c692:	e7a3      	b.n	800c5dc <__mdiff+0x34>
 800c694:	f856 8b04 	ldr.w	r8, [r6], #4
 800c698:	fa11 f288 	uxtah	r2, r1, r8
 800c69c:	1414      	asrs	r4, r2, #16
 800c69e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c6a2:	b292      	uxth	r2, r2
 800c6a4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c6a8:	f84e 2b04 	str.w	r2, [lr], #4
 800c6ac:	1421      	asrs	r1, r4, #16
 800c6ae:	e7e0      	b.n	800c672 <__mdiff+0xca>
 800c6b0:	3f01      	subs	r7, #1
 800c6b2:	e7ea      	b.n	800c68a <__mdiff+0xe2>
 800c6b4:	0800e5f8 	.word	0x0800e5f8
 800c6b8:	0800e66c 	.word	0x0800e66c

0800c6bc <__d2b>:
 800c6bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c6c0:	4689      	mov	r9, r1
 800c6c2:	2101      	movs	r1, #1
 800c6c4:	ec57 6b10 	vmov	r6, r7, d0
 800c6c8:	4690      	mov	r8, r2
 800c6ca:	f7ff fccf 	bl	800c06c <_Balloc>
 800c6ce:	4604      	mov	r4, r0
 800c6d0:	b930      	cbnz	r0, 800c6e0 <__d2b+0x24>
 800c6d2:	4602      	mov	r2, r0
 800c6d4:	4b25      	ldr	r3, [pc, #148]	; (800c76c <__d2b+0xb0>)
 800c6d6:	4826      	ldr	r0, [pc, #152]	; (800c770 <__d2b+0xb4>)
 800c6d8:	f240 310a 	movw	r1, #778	; 0x30a
 800c6dc:	f000 fbe6 	bl	800ceac <__assert_func>
 800c6e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c6e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c6e8:	bb35      	cbnz	r5, 800c738 <__d2b+0x7c>
 800c6ea:	2e00      	cmp	r6, #0
 800c6ec:	9301      	str	r3, [sp, #4]
 800c6ee:	d028      	beq.n	800c742 <__d2b+0x86>
 800c6f0:	4668      	mov	r0, sp
 800c6f2:	9600      	str	r6, [sp, #0]
 800c6f4:	f7ff fd82 	bl	800c1fc <__lo0bits>
 800c6f8:	9900      	ldr	r1, [sp, #0]
 800c6fa:	b300      	cbz	r0, 800c73e <__d2b+0x82>
 800c6fc:	9a01      	ldr	r2, [sp, #4]
 800c6fe:	f1c0 0320 	rsb	r3, r0, #32
 800c702:	fa02 f303 	lsl.w	r3, r2, r3
 800c706:	430b      	orrs	r3, r1
 800c708:	40c2      	lsrs	r2, r0
 800c70a:	6163      	str	r3, [r4, #20]
 800c70c:	9201      	str	r2, [sp, #4]
 800c70e:	9b01      	ldr	r3, [sp, #4]
 800c710:	61a3      	str	r3, [r4, #24]
 800c712:	2b00      	cmp	r3, #0
 800c714:	bf14      	ite	ne
 800c716:	2202      	movne	r2, #2
 800c718:	2201      	moveq	r2, #1
 800c71a:	6122      	str	r2, [r4, #16]
 800c71c:	b1d5      	cbz	r5, 800c754 <__d2b+0x98>
 800c71e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c722:	4405      	add	r5, r0
 800c724:	f8c9 5000 	str.w	r5, [r9]
 800c728:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c72c:	f8c8 0000 	str.w	r0, [r8]
 800c730:	4620      	mov	r0, r4
 800c732:	b003      	add	sp, #12
 800c734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c738:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c73c:	e7d5      	b.n	800c6ea <__d2b+0x2e>
 800c73e:	6161      	str	r1, [r4, #20]
 800c740:	e7e5      	b.n	800c70e <__d2b+0x52>
 800c742:	a801      	add	r0, sp, #4
 800c744:	f7ff fd5a 	bl	800c1fc <__lo0bits>
 800c748:	9b01      	ldr	r3, [sp, #4]
 800c74a:	6163      	str	r3, [r4, #20]
 800c74c:	2201      	movs	r2, #1
 800c74e:	6122      	str	r2, [r4, #16]
 800c750:	3020      	adds	r0, #32
 800c752:	e7e3      	b.n	800c71c <__d2b+0x60>
 800c754:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c758:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c75c:	f8c9 0000 	str.w	r0, [r9]
 800c760:	6918      	ldr	r0, [r3, #16]
 800c762:	f7ff fd2b 	bl	800c1bc <__hi0bits>
 800c766:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c76a:	e7df      	b.n	800c72c <__d2b+0x70>
 800c76c:	0800e5f8 	.word	0x0800e5f8
 800c770:	0800e66c 	.word	0x0800e66c

0800c774 <_mprec_log10>:
 800c774:	2817      	cmp	r0, #23
 800c776:	b5d0      	push	{r4, r6, r7, lr}
 800c778:	4604      	mov	r4, r0
 800c77a:	dc07      	bgt.n	800c78c <_mprec_log10+0x18>
 800c77c:	4809      	ldr	r0, [pc, #36]	; (800c7a4 <_mprec_log10+0x30>)
 800c77e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800c782:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c786:	ec41 0b10 	vmov	d0, r0, r1
 800c78a:	bdd0      	pop	{r4, r6, r7, pc}
 800c78c:	4906      	ldr	r1, [pc, #24]	; (800c7a8 <_mprec_log10+0x34>)
 800c78e:	4f07      	ldr	r7, [pc, #28]	; (800c7ac <_mprec_log10+0x38>)
 800c790:	2000      	movs	r0, #0
 800c792:	2600      	movs	r6, #0
 800c794:	4632      	mov	r2, r6
 800c796:	463b      	mov	r3, r7
 800c798:	f7f3 ff46 	bl	8000628 <__aeabi_dmul>
 800c79c:	3c01      	subs	r4, #1
 800c79e:	d1f9      	bne.n	800c794 <_mprec_log10+0x20>
 800c7a0:	e7f1      	b.n	800c786 <_mprec_log10+0x12>
 800c7a2:	bf00      	nop
 800c7a4:	0800e6f0 	.word	0x0800e6f0
 800c7a8:	3ff00000 	.word	0x3ff00000
 800c7ac:	40240000 	.word	0x40240000

0800c7b0 <_calloc_r>:
 800c7b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7b2:	fba1 2402 	umull	r2, r4, r1, r2
 800c7b6:	b94c      	cbnz	r4, 800c7cc <_calloc_r+0x1c>
 800c7b8:	4611      	mov	r1, r2
 800c7ba:	9201      	str	r2, [sp, #4]
 800c7bc:	f000 f87a 	bl	800c8b4 <_malloc_r>
 800c7c0:	9a01      	ldr	r2, [sp, #4]
 800c7c2:	4605      	mov	r5, r0
 800c7c4:	b930      	cbnz	r0, 800c7d4 <_calloc_r+0x24>
 800c7c6:	4628      	mov	r0, r5
 800c7c8:	b003      	add	sp, #12
 800c7ca:	bd30      	pop	{r4, r5, pc}
 800c7cc:	220c      	movs	r2, #12
 800c7ce:	6002      	str	r2, [r0, #0]
 800c7d0:	2500      	movs	r5, #0
 800c7d2:	e7f8      	b.n	800c7c6 <_calloc_r+0x16>
 800c7d4:	4621      	mov	r1, r4
 800c7d6:	f7fd fec1 	bl	800a55c <memset>
 800c7da:	e7f4      	b.n	800c7c6 <_calloc_r+0x16>

0800c7dc <_free_r>:
 800c7dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7de:	2900      	cmp	r1, #0
 800c7e0:	d044      	beq.n	800c86c <_free_r+0x90>
 800c7e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7e6:	9001      	str	r0, [sp, #4]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	f1a1 0404 	sub.w	r4, r1, #4
 800c7ee:	bfb8      	it	lt
 800c7f0:	18e4      	addlt	r4, r4, r3
 800c7f2:	f000 fce7 	bl	800d1c4 <__malloc_lock>
 800c7f6:	4a1e      	ldr	r2, [pc, #120]	; (800c870 <_free_r+0x94>)
 800c7f8:	9801      	ldr	r0, [sp, #4]
 800c7fa:	6813      	ldr	r3, [r2, #0]
 800c7fc:	b933      	cbnz	r3, 800c80c <_free_r+0x30>
 800c7fe:	6063      	str	r3, [r4, #4]
 800c800:	6014      	str	r4, [r2, #0]
 800c802:	b003      	add	sp, #12
 800c804:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c808:	f000 bce2 	b.w	800d1d0 <__malloc_unlock>
 800c80c:	42a3      	cmp	r3, r4
 800c80e:	d908      	bls.n	800c822 <_free_r+0x46>
 800c810:	6825      	ldr	r5, [r4, #0]
 800c812:	1961      	adds	r1, r4, r5
 800c814:	428b      	cmp	r3, r1
 800c816:	bf01      	itttt	eq
 800c818:	6819      	ldreq	r1, [r3, #0]
 800c81a:	685b      	ldreq	r3, [r3, #4]
 800c81c:	1949      	addeq	r1, r1, r5
 800c81e:	6021      	streq	r1, [r4, #0]
 800c820:	e7ed      	b.n	800c7fe <_free_r+0x22>
 800c822:	461a      	mov	r2, r3
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	b10b      	cbz	r3, 800c82c <_free_r+0x50>
 800c828:	42a3      	cmp	r3, r4
 800c82a:	d9fa      	bls.n	800c822 <_free_r+0x46>
 800c82c:	6811      	ldr	r1, [r2, #0]
 800c82e:	1855      	adds	r5, r2, r1
 800c830:	42a5      	cmp	r5, r4
 800c832:	d10b      	bne.n	800c84c <_free_r+0x70>
 800c834:	6824      	ldr	r4, [r4, #0]
 800c836:	4421      	add	r1, r4
 800c838:	1854      	adds	r4, r2, r1
 800c83a:	42a3      	cmp	r3, r4
 800c83c:	6011      	str	r1, [r2, #0]
 800c83e:	d1e0      	bne.n	800c802 <_free_r+0x26>
 800c840:	681c      	ldr	r4, [r3, #0]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	6053      	str	r3, [r2, #4]
 800c846:	4421      	add	r1, r4
 800c848:	6011      	str	r1, [r2, #0]
 800c84a:	e7da      	b.n	800c802 <_free_r+0x26>
 800c84c:	d902      	bls.n	800c854 <_free_r+0x78>
 800c84e:	230c      	movs	r3, #12
 800c850:	6003      	str	r3, [r0, #0]
 800c852:	e7d6      	b.n	800c802 <_free_r+0x26>
 800c854:	6825      	ldr	r5, [r4, #0]
 800c856:	1961      	adds	r1, r4, r5
 800c858:	428b      	cmp	r3, r1
 800c85a:	bf04      	itt	eq
 800c85c:	6819      	ldreq	r1, [r3, #0]
 800c85e:	685b      	ldreq	r3, [r3, #4]
 800c860:	6063      	str	r3, [r4, #4]
 800c862:	bf04      	itt	eq
 800c864:	1949      	addeq	r1, r1, r5
 800c866:	6021      	streq	r1, [r4, #0]
 800c868:	6054      	str	r4, [r2, #4]
 800c86a:	e7ca      	b.n	800c802 <_free_r+0x26>
 800c86c:	b003      	add	sp, #12
 800c86e:	bd30      	pop	{r4, r5, pc}
 800c870:	20000ba8 	.word	0x20000ba8

0800c874 <sbrk_aligned>:
 800c874:	b570      	push	{r4, r5, r6, lr}
 800c876:	4e0e      	ldr	r6, [pc, #56]	; (800c8b0 <sbrk_aligned+0x3c>)
 800c878:	460c      	mov	r4, r1
 800c87a:	6831      	ldr	r1, [r6, #0]
 800c87c:	4605      	mov	r5, r0
 800c87e:	b911      	cbnz	r1, 800c886 <sbrk_aligned+0x12>
 800c880:	f000 f9e6 	bl	800cc50 <_sbrk_r>
 800c884:	6030      	str	r0, [r6, #0]
 800c886:	4621      	mov	r1, r4
 800c888:	4628      	mov	r0, r5
 800c88a:	f000 f9e1 	bl	800cc50 <_sbrk_r>
 800c88e:	1c43      	adds	r3, r0, #1
 800c890:	d00a      	beq.n	800c8a8 <sbrk_aligned+0x34>
 800c892:	1cc4      	adds	r4, r0, #3
 800c894:	f024 0403 	bic.w	r4, r4, #3
 800c898:	42a0      	cmp	r0, r4
 800c89a:	d007      	beq.n	800c8ac <sbrk_aligned+0x38>
 800c89c:	1a21      	subs	r1, r4, r0
 800c89e:	4628      	mov	r0, r5
 800c8a0:	f000 f9d6 	bl	800cc50 <_sbrk_r>
 800c8a4:	3001      	adds	r0, #1
 800c8a6:	d101      	bne.n	800c8ac <sbrk_aligned+0x38>
 800c8a8:	f04f 34ff 	mov.w	r4, #4294967295
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	bd70      	pop	{r4, r5, r6, pc}
 800c8b0:	20000bac 	.word	0x20000bac

0800c8b4 <_malloc_r>:
 800c8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b8:	1ccd      	adds	r5, r1, #3
 800c8ba:	f025 0503 	bic.w	r5, r5, #3
 800c8be:	3508      	adds	r5, #8
 800c8c0:	2d0c      	cmp	r5, #12
 800c8c2:	bf38      	it	cc
 800c8c4:	250c      	movcc	r5, #12
 800c8c6:	2d00      	cmp	r5, #0
 800c8c8:	4607      	mov	r7, r0
 800c8ca:	db01      	blt.n	800c8d0 <_malloc_r+0x1c>
 800c8cc:	42a9      	cmp	r1, r5
 800c8ce:	d905      	bls.n	800c8dc <_malloc_r+0x28>
 800c8d0:	230c      	movs	r3, #12
 800c8d2:	603b      	str	r3, [r7, #0]
 800c8d4:	2600      	movs	r6, #0
 800c8d6:	4630      	mov	r0, r6
 800c8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8dc:	4e2e      	ldr	r6, [pc, #184]	; (800c998 <_malloc_r+0xe4>)
 800c8de:	f000 fc71 	bl	800d1c4 <__malloc_lock>
 800c8e2:	6833      	ldr	r3, [r6, #0]
 800c8e4:	461c      	mov	r4, r3
 800c8e6:	bb34      	cbnz	r4, 800c936 <_malloc_r+0x82>
 800c8e8:	4629      	mov	r1, r5
 800c8ea:	4638      	mov	r0, r7
 800c8ec:	f7ff ffc2 	bl	800c874 <sbrk_aligned>
 800c8f0:	1c43      	adds	r3, r0, #1
 800c8f2:	4604      	mov	r4, r0
 800c8f4:	d14d      	bne.n	800c992 <_malloc_r+0xde>
 800c8f6:	6834      	ldr	r4, [r6, #0]
 800c8f8:	4626      	mov	r6, r4
 800c8fa:	2e00      	cmp	r6, #0
 800c8fc:	d140      	bne.n	800c980 <_malloc_r+0xcc>
 800c8fe:	6823      	ldr	r3, [r4, #0]
 800c900:	4631      	mov	r1, r6
 800c902:	4638      	mov	r0, r7
 800c904:	eb04 0803 	add.w	r8, r4, r3
 800c908:	f000 f9a2 	bl	800cc50 <_sbrk_r>
 800c90c:	4580      	cmp	r8, r0
 800c90e:	d13a      	bne.n	800c986 <_malloc_r+0xd2>
 800c910:	6821      	ldr	r1, [r4, #0]
 800c912:	3503      	adds	r5, #3
 800c914:	1a6d      	subs	r5, r5, r1
 800c916:	f025 0503 	bic.w	r5, r5, #3
 800c91a:	3508      	adds	r5, #8
 800c91c:	2d0c      	cmp	r5, #12
 800c91e:	bf38      	it	cc
 800c920:	250c      	movcc	r5, #12
 800c922:	4629      	mov	r1, r5
 800c924:	4638      	mov	r0, r7
 800c926:	f7ff ffa5 	bl	800c874 <sbrk_aligned>
 800c92a:	3001      	adds	r0, #1
 800c92c:	d02b      	beq.n	800c986 <_malloc_r+0xd2>
 800c92e:	6823      	ldr	r3, [r4, #0]
 800c930:	442b      	add	r3, r5
 800c932:	6023      	str	r3, [r4, #0]
 800c934:	e00e      	b.n	800c954 <_malloc_r+0xa0>
 800c936:	6822      	ldr	r2, [r4, #0]
 800c938:	1b52      	subs	r2, r2, r5
 800c93a:	d41e      	bmi.n	800c97a <_malloc_r+0xc6>
 800c93c:	2a0b      	cmp	r2, #11
 800c93e:	d916      	bls.n	800c96e <_malloc_r+0xba>
 800c940:	1961      	adds	r1, r4, r5
 800c942:	42a3      	cmp	r3, r4
 800c944:	6025      	str	r5, [r4, #0]
 800c946:	bf18      	it	ne
 800c948:	6059      	strne	r1, [r3, #4]
 800c94a:	6863      	ldr	r3, [r4, #4]
 800c94c:	bf08      	it	eq
 800c94e:	6031      	streq	r1, [r6, #0]
 800c950:	5162      	str	r2, [r4, r5]
 800c952:	604b      	str	r3, [r1, #4]
 800c954:	4638      	mov	r0, r7
 800c956:	f104 060b 	add.w	r6, r4, #11
 800c95a:	f000 fc39 	bl	800d1d0 <__malloc_unlock>
 800c95e:	f026 0607 	bic.w	r6, r6, #7
 800c962:	1d23      	adds	r3, r4, #4
 800c964:	1af2      	subs	r2, r6, r3
 800c966:	d0b6      	beq.n	800c8d6 <_malloc_r+0x22>
 800c968:	1b9b      	subs	r3, r3, r6
 800c96a:	50a3      	str	r3, [r4, r2]
 800c96c:	e7b3      	b.n	800c8d6 <_malloc_r+0x22>
 800c96e:	6862      	ldr	r2, [r4, #4]
 800c970:	42a3      	cmp	r3, r4
 800c972:	bf0c      	ite	eq
 800c974:	6032      	streq	r2, [r6, #0]
 800c976:	605a      	strne	r2, [r3, #4]
 800c978:	e7ec      	b.n	800c954 <_malloc_r+0xa0>
 800c97a:	4623      	mov	r3, r4
 800c97c:	6864      	ldr	r4, [r4, #4]
 800c97e:	e7b2      	b.n	800c8e6 <_malloc_r+0x32>
 800c980:	4634      	mov	r4, r6
 800c982:	6876      	ldr	r6, [r6, #4]
 800c984:	e7b9      	b.n	800c8fa <_malloc_r+0x46>
 800c986:	230c      	movs	r3, #12
 800c988:	603b      	str	r3, [r7, #0]
 800c98a:	4638      	mov	r0, r7
 800c98c:	f000 fc20 	bl	800d1d0 <__malloc_unlock>
 800c990:	e7a1      	b.n	800c8d6 <_malloc_r+0x22>
 800c992:	6025      	str	r5, [r4, #0]
 800c994:	e7de      	b.n	800c954 <_malloc_r+0xa0>
 800c996:	bf00      	nop
 800c998:	20000ba8 	.word	0x20000ba8

0800c99c <__sfputc_r>:
 800c99c:	6893      	ldr	r3, [r2, #8]
 800c99e:	3b01      	subs	r3, #1
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	b410      	push	{r4}
 800c9a4:	6093      	str	r3, [r2, #8]
 800c9a6:	da08      	bge.n	800c9ba <__sfputc_r+0x1e>
 800c9a8:	6994      	ldr	r4, [r2, #24]
 800c9aa:	42a3      	cmp	r3, r4
 800c9ac:	db01      	blt.n	800c9b2 <__sfputc_r+0x16>
 800c9ae:	290a      	cmp	r1, #10
 800c9b0:	d103      	bne.n	800c9ba <__sfputc_r+0x1e>
 800c9b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9b6:	f000 b9a7 	b.w	800cd08 <__swbuf_r>
 800c9ba:	6813      	ldr	r3, [r2, #0]
 800c9bc:	1c58      	adds	r0, r3, #1
 800c9be:	6010      	str	r0, [r2, #0]
 800c9c0:	7019      	strb	r1, [r3, #0]
 800c9c2:	4608      	mov	r0, r1
 800c9c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9c8:	4770      	bx	lr

0800c9ca <__sfputs_r>:
 800c9ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9cc:	4606      	mov	r6, r0
 800c9ce:	460f      	mov	r7, r1
 800c9d0:	4614      	mov	r4, r2
 800c9d2:	18d5      	adds	r5, r2, r3
 800c9d4:	42ac      	cmp	r4, r5
 800c9d6:	d101      	bne.n	800c9dc <__sfputs_r+0x12>
 800c9d8:	2000      	movs	r0, #0
 800c9da:	e007      	b.n	800c9ec <__sfputs_r+0x22>
 800c9dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9e0:	463a      	mov	r2, r7
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	f7ff ffda 	bl	800c99c <__sfputc_r>
 800c9e8:	1c43      	adds	r3, r0, #1
 800c9ea:	d1f3      	bne.n	800c9d4 <__sfputs_r+0xa>
 800c9ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c9f0 <_vfiprintf_r>:
 800c9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9f4:	460d      	mov	r5, r1
 800c9f6:	b09d      	sub	sp, #116	; 0x74
 800c9f8:	4614      	mov	r4, r2
 800c9fa:	4698      	mov	r8, r3
 800c9fc:	4606      	mov	r6, r0
 800c9fe:	b118      	cbz	r0, 800ca08 <_vfiprintf_r+0x18>
 800ca00:	6983      	ldr	r3, [r0, #24]
 800ca02:	b90b      	cbnz	r3, 800ca08 <_vfiprintf_r+0x18>
 800ca04:	f7ff fa84 	bl	800bf10 <__sinit>
 800ca08:	4b89      	ldr	r3, [pc, #548]	; (800cc30 <_vfiprintf_r+0x240>)
 800ca0a:	429d      	cmp	r5, r3
 800ca0c:	d11b      	bne.n	800ca46 <_vfiprintf_r+0x56>
 800ca0e:	6875      	ldr	r5, [r6, #4]
 800ca10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca12:	07d9      	lsls	r1, r3, #31
 800ca14:	d405      	bmi.n	800ca22 <_vfiprintf_r+0x32>
 800ca16:	89ab      	ldrh	r3, [r5, #12]
 800ca18:	059a      	lsls	r2, r3, #22
 800ca1a:	d402      	bmi.n	800ca22 <_vfiprintf_r+0x32>
 800ca1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca1e:	f7ff fb1a 	bl	800c056 <__retarget_lock_acquire_recursive>
 800ca22:	89ab      	ldrh	r3, [r5, #12]
 800ca24:	071b      	lsls	r3, r3, #28
 800ca26:	d501      	bpl.n	800ca2c <_vfiprintf_r+0x3c>
 800ca28:	692b      	ldr	r3, [r5, #16]
 800ca2a:	b9eb      	cbnz	r3, 800ca68 <_vfiprintf_r+0x78>
 800ca2c:	4629      	mov	r1, r5
 800ca2e:	4630      	mov	r0, r6
 800ca30:	f000 f9ce 	bl	800cdd0 <__swsetup_r>
 800ca34:	b1c0      	cbz	r0, 800ca68 <_vfiprintf_r+0x78>
 800ca36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca38:	07dc      	lsls	r4, r3, #31
 800ca3a:	d50e      	bpl.n	800ca5a <_vfiprintf_r+0x6a>
 800ca3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca40:	b01d      	add	sp, #116	; 0x74
 800ca42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca46:	4b7b      	ldr	r3, [pc, #492]	; (800cc34 <_vfiprintf_r+0x244>)
 800ca48:	429d      	cmp	r5, r3
 800ca4a:	d101      	bne.n	800ca50 <_vfiprintf_r+0x60>
 800ca4c:	68b5      	ldr	r5, [r6, #8]
 800ca4e:	e7df      	b.n	800ca10 <_vfiprintf_r+0x20>
 800ca50:	4b79      	ldr	r3, [pc, #484]	; (800cc38 <_vfiprintf_r+0x248>)
 800ca52:	429d      	cmp	r5, r3
 800ca54:	bf08      	it	eq
 800ca56:	68f5      	ldreq	r5, [r6, #12]
 800ca58:	e7da      	b.n	800ca10 <_vfiprintf_r+0x20>
 800ca5a:	89ab      	ldrh	r3, [r5, #12]
 800ca5c:	0598      	lsls	r0, r3, #22
 800ca5e:	d4ed      	bmi.n	800ca3c <_vfiprintf_r+0x4c>
 800ca60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca62:	f7ff faf9 	bl	800c058 <__retarget_lock_release_recursive>
 800ca66:	e7e9      	b.n	800ca3c <_vfiprintf_r+0x4c>
 800ca68:	2300      	movs	r3, #0
 800ca6a:	9309      	str	r3, [sp, #36]	; 0x24
 800ca6c:	2320      	movs	r3, #32
 800ca6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca72:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca76:	2330      	movs	r3, #48	; 0x30
 800ca78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cc3c <_vfiprintf_r+0x24c>
 800ca7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca80:	f04f 0901 	mov.w	r9, #1
 800ca84:	4623      	mov	r3, r4
 800ca86:	469a      	mov	sl, r3
 800ca88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca8c:	b10a      	cbz	r2, 800ca92 <_vfiprintf_r+0xa2>
 800ca8e:	2a25      	cmp	r2, #37	; 0x25
 800ca90:	d1f9      	bne.n	800ca86 <_vfiprintf_r+0x96>
 800ca92:	ebba 0b04 	subs.w	fp, sl, r4
 800ca96:	d00b      	beq.n	800cab0 <_vfiprintf_r+0xc0>
 800ca98:	465b      	mov	r3, fp
 800ca9a:	4622      	mov	r2, r4
 800ca9c:	4629      	mov	r1, r5
 800ca9e:	4630      	mov	r0, r6
 800caa0:	f7ff ff93 	bl	800c9ca <__sfputs_r>
 800caa4:	3001      	adds	r0, #1
 800caa6:	f000 80aa 	beq.w	800cbfe <_vfiprintf_r+0x20e>
 800caaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800caac:	445a      	add	r2, fp
 800caae:	9209      	str	r2, [sp, #36]	; 0x24
 800cab0:	f89a 3000 	ldrb.w	r3, [sl]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	f000 80a2 	beq.w	800cbfe <_vfiprintf_r+0x20e>
 800caba:	2300      	movs	r3, #0
 800cabc:	f04f 32ff 	mov.w	r2, #4294967295
 800cac0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cac4:	f10a 0a01 	add.w	sl, sl, #1
 800cac8:	9304      	str	r3, [sp, #16]
 800caca:	9307      	str	r3, [sp, #28]
 800cacc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cad0:	931a      	str	r3, [sp, #104]	; 0x68
 800cad2:	4654      	mov	r4, sl
 800cad4:	2205      	movs	r2, #5
 800cad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cada:	4858      	ldr	r0, [pc, #352]	; (800cc3c <_vfiprintf_r+0x24c>)
 800cadc:	f7f3 fb98 	bl	8000210 <memchr>
 800cae0:	9a04      	ldr	r2, [sp, #16]
 800cae2:	b9d8      	cbnz	r0, 800cb1c <_vfiprintf_r+0x12c>
 800cae4:	06d1      	lsls	r1, r2, #27
 800cae6:	bf44      	itt	mi
 800cae8:	2320      	movmi	r3, #32
 800caea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800caee:	0713      	lsls	r3, r2, #28
 800caf0:	bf44      	itt	mi
 800caf2:	232b      	movmi	r3, #43	; 0x2b
 800caf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800caf8:	f89a 3000 	ldrb.w	r3, [sl]
 800cafc:	2b2a      	cmp	r3, #42	; 0x2a
 800cafe:	d015      	beq.n	800cb2c <_vfiprintf_r+0x13c>
 800cb00:	9a07      	ldr	r2, [sp, #28]
 800cb02:	4654      	mov	r4, sl
 800cb04:	2000      	movs	r0, #0
 800cb06:	f04f 0c0a 	mov.w	ip, #10
 800cb0a:	4621      	mov	r1, r4
 800cb0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb10:	3b30      	subs	r3, #48	; 0x30
 800cb12:	2b09      	cmp	r3, #9
 800cb14:	d94e      	bls.n	800cbb4 <_vfiprintf_r+0x1c4>
 800cb16:	b1b0      	cbz	r0, 800cb46 <_vfiprintf_r+0x156>
 800cb18:	9207      	str	r2, [sp, #28]
 800cb1a:	e014      	b.n	800cb46 <_vfiprintf_r+0x156>
 800cb1c:	eba0 0308 	sub.w	r3, r0, r8
 800cb20:	fa09 f303 	lsl.w	r3, r9, r3
 800cb24:	4313      	orrs	r3, r2
 800cb26:	9304      	str	r3, [sp, #16]
 800cb28:	46a2      	mov	sl, r4
 800cb2a:	e7d2      	b.n	800cad2 <_vfiprintf_r+0xe2>
 800cb2c:	9b03      	ldr	r3, [sp, #12]
 800cb2e:	1d19      	adds	r1, r3, #4
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	9103      	str	r1, [sp, #12]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	bfbb      	ittet	lt
 800cb38:	425b      	neglt	r3, r3
 800cb3a:	f042 0202 	orrlt.w	r2, r2, #2
 800cb3e:	9307      	strge	r3, [sp, #28]
 800cb40:	9307      	strlt	r3, [sp, #28]
 800cb42:	bfb8      	it	lt
 800cb44:	9204      	strlt	r2, [sp, #16]
 800cb46:	7823      	ldrb	r3, [r4, #0]
 800cb48:	2b2e      	cmp	r3, #46	; 0x2e
 800cb4a:	d10c      	bne.n	800cb66 <_vfiprintf_r+0x176>
 800cb4c:	7863      	ldrb	r3, [r4, #1]
 800cb4e:	2b2a      	cmp	r3, #42	; 0x2a
 800cb50:	d135      	bne.n	800cbbe <_vfiprintf_r+0x1ce>
 800cb52:	9b03      	ldr	r3, [sp, #12]
 800cb54:	1d1a      	adds	r2, r3, #4
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	9203      	str	r2, [sp, #12]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	bfb8      	it	lt
 800cb5e:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb62:	3402      	adds	r4, #2
 800cb64:	9305      	str	r3, [sp, #20]
 800cb66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cc4c <_vfiprintf_r+0x25c>
 800cb6a:	7821      	ldrb	r1, [r4, #0]
 800cb6c:	2203      	movs	r2, #3
 800cb6e:	4650      	mov	r0, sl
 800cb70:	f7f3 fb4e 	bl	8000210 <memchr>
 800cb74:	b140      	cbz	r0, 800cb88 <_vfiprintf_r+0x198>
 800cb76:	2340      	movs	r3, #64	; 0x40
 800cb78:	eba0 000a 	sub.w	r0, r0, sl
 800cb7c:	fa03 f000 	lsl.w	r0, r3, r0
 800cb80:	9b04      	ldr	r3, [sp, #16]
 800cb82:	4303      	orrs	r3, r0
 800cb84:	3401      	adds	r4, #1
 800cb86:	9304      	str	r3, [sp, #16]
 800cb88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb8c:	482c      	ldr	r0, [pc, #176]	; (800cc40 <_vfiprintf_r+0x250>)
 800cb8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb92:	2206      	movs	r2, #6
 800cb94:	f7f3 fb3c 	bl	8000210 <memchr>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	d03f      	beq.n	800cc1c <_vfiprintf_r+0x22c>
 800cb9c:	4b29      	ldr	r3, [pc, #164]	; (800cc44 <_vfiprintf_r+0x254>)
 800cb9e:	bb1b      	cbnz	r3, 800cbe8 <_vfiprintf_r+0x1f8>
 800cba0:	9b03      	ldr	r3, [sp, #12]
 800cba2:	3307      	adds	r3, #7
 800cba4:	f023 0307 	bic.w	r3, r3, #7
 800cba8:	3308      	adds	r3, #8
 800cbaa:	9303      	str	r3, [sp, #12]
 800cbac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbae:	443b      	add	r3, r7
 800cbb0:	9309      	str	r3, [sp, #36]	; 0x24
 800cbb2:	e767      	b.n	800ca84 <_vfiprintf_r+0x94>
 800cbb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbb8:	460c      	mov	r4, r1
 800cbba:	2001      	movs	r0, #1
 800cbbc:	e7a5      	b.n	800cb0a <_vfiprintf_r+0x11a>
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	3401      	adds	r4, #1
 800cbc2:	9305      	str	r3, [sp, #20]
 800cbc4:	4619      	mov	r1, r3
 800cbc6:	f04f 0c0a 	mov.w	ip, #10
 800cbca:	4620      	mov	r0, r4
 800cbcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbd0:	3a30      	subs	r2, #48	; 0x30
 800cbd2:	2a09      	cmp	r2, #9
 800cbd4:	d903      	bls.n	800cbde <_vfiprintf_r+0x1ee>
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d0c5      	beq.n	800cb66 <_vfiprintf_r+0x176>
 800cbda:	9105      	str	r1, [sp, #20]
 800cbdc:	e7c3      	b.n	800cb66 <_vfiprintf_r+0x176>
 800cbde:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbe2:	4604      	mov	r4, r0
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	e7f0      	b.n	800cbca <_vfiprintf_r+0x1da>
 800cbe8:	ab03      	add	r3, sp, #12
 800cbea:	9300      	str	r3, [sp, #0]
 800cbec:	462a      	mov	r2, r5
 800cbee:	4b16      	ldr	r3, [pc, #88]	; (800cc48 <_vfiprintf_r+0x258>)
 800cbf0:	a904      	add	r1, sp, #16
 800cbf2:	4630      	mov	r0, r6
 800cbf4:	f7fd fd5a 	bl	800a6ac <_printf_float>
 800cbf8:	4607      	mov	r7, r0
 800cbfa:	1c78      	adds	r0, r7, #1
 800cbfc:	d1d6      	bne.n	800cbac <_vfiprintf_r+0x1bc>
 800cbfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc00:	07d9      	lsls	r1, r3, #31
 800cc02:	d405      	bmi.n	800cc10 <_vfiprintf_r+0x220>
 800cc04:	89ab      	ldrh	r3, [r5, #12]
 800cc06:	059a      	lsls	r2, r3, #22
 800cc08:	d402      	bmi.n	800cc10 <_vfiprintf_r+0x220>
 800cc0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc0c:	f7ff fa24 	bl	800c058 <__retarget_lock_release_recursive>
 800cc10:	89ab      	ldrh	r3, [r5, #12]
 800cc12:	065b      	lsls	r3, r3, #25
 800cc14:	f53f af12 	bmi.w	800ca3c <_vfiprintf_r+0x4c>
 800cc18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc1a:	e711      	b.n	800ca40 <_vfiprintf_r+0x50>
 800cc1c:	ab03      	add	r3, sp, #12
 800cc1e:	9300      	str	r3, [sp, #0]
 800cc20:	462a      	mov	r2, r5
 800cc22:	4b09      	ldr	r3, [pc, #36]	; (800cc48 <_vfiprintf_r+0x258>)
 800cc24:	a904      	add	r1, sp, #16
 800cc26:	4630      	mov	r0, r6
 800cc28:	f7fd ffe4 	bl	800abf4 <_printf_i>
 800cc2c:	e7e4      	b.n	800cbf8 <_vfiprintf_r+0x208>
 800cc2e:	bf00      	nop
 800cc30:	0800e62c 	.word	0x0800e62c
 800cc34:	0800e64c 	.word	0x0800e64c
 800cc38:	0800e60c 	.word	0x0800e60c
 800cc3c:	0800e7c4 	.word	0x0800e7c4
 800cc40:	0800e7ce 	.word	0x0800e7ce
 800cc44:	0800a6ad 	.word	0x0800a6ad
 800cc48:	0800c9cb 	.word	0x0800c9cb
 800cc4c:	0800e7ca 	.word	0x0800e7ca

0800cc50 <_sbrk_r>:
 800cc50:	b538      	push	{r3, r4, r5, lr}
 800cc52:	4d06      	ldr	r5, [pc, #24]	; (800cc6c <_sbrk_r+0x1c>)
 800cc54:	2300      	movs	r3, #0
 800cc56:	4604      	mov	r4, r0
 800cc58:	4608      	mov	r0, r1
 800cc5a:	602b      	str	r3, [r5, #0]
 800cc5c:	f7f7 ff98 	bl	8004b90 <_sbrk>
 800cc60:	1c43      	adds	r3, r0, #1
 800cc62:	d102      	bne.n	800cc6a <_sbrk_r+0x1a>
 800cc64:	682b      	ldr	r3, [r5, #0]
 800cc66:	b103      	cbz	r3, 800cc6a <_sbrk_r+0x1a>
 800cc68:	6023      	str	r3, [r4, #0]
 800cc6a:	bd38      	pop	{r3, r4, r5, pc}
 800cc6c:	20000bb0 	.word	0x20000bb0

0800cc70 <__sread>:
 800cc70:	b510      	push	{r4, lr}
 800cc72:	460c      	mov	r4, r1
 800cc74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc78:	f000 fab0 	bl	800d1dc <_read_r>
 800cc7c:	2800      	cmp	r0, #0
 800cc7e:	bfab      	itete	ge
 800cc80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cc82:	89a3      	ldrhlt	r3, [r4, #12]
 800cc84:	181b      	addge	r3, r3, r0
 800cc86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cc8a:	bfac      	ite	ge
 800cc8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cc8e:	81a3      	strhlt	r3, [r4, #12]
 800cc90:	bd10      	pop	{r4, pc}

0800cc92 <__swrite>:
 800cc92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc96:	461f      	mov	r7, r3
 800cc98:	898b      	ldrh	r3, [r1, #12]
 800cc9a:	05db      	lsls	r3, r3, #23
 800cc9c:	4605      	mov	r5, r0
 800cc9e:	460c      	mov	r4, r1
 800cca0:	4616      	mov	r6, r2
 800cca2:	d505      	bpl.n	800ccb0 <__swrite+0x1e>
 800cca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cca8:	2302      	movs	r3, #2
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f000 fa00 	bl	800d0b0 <_lseek_r>
 800ccb0:	89a3      	ldrh	r3, [r4, #12]
 800ccb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ccba:	81a3      	strh	r3, [r4, #12]
 800ccbc:	4632      	mov	r2, r6
 800ccbe:	463b      	mov	r3, r7
 800ccc0:	4628      	mov	r0, r5
 800ccc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccc6:	f000 b871 	b.w	800cdac <_write_r>

0800ccca <__sseek>:
 800ccca:	b510      	push	{r4, lr}
 800cccc:	460c      	mov	r4, r1
 800ccce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccd2:	f000 f9ed 	bl	800d0b0 <_lseek_r>
 800ccd6:	1c43      	adds	r3, r0, #1
 800ccd8:	89a3      	ldrh	r3, [r4, #12]
 800ccda:	bf15      	itete	ne
 800ccdc:	6560      	strne	r0, [r4, #84]	; 0x54
 800ccde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cce2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cce6:	81a3      	strheq	r3, [r4, #12]
 800cce8:	bf18      	it	ne
 800ccea:	81a3      	strhne	r3, [r4, #12]
 800ccec:	bd10      	pop	{r4, pc}

0800ccee <__sclose>:
 800ccee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccf2:	f000 b8f9 	b.w	800cee8 <_close_r>

0800ccf6 <strcpy>:
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccfc:	f803 2b01 	strb.w	r2, [r3], #1
 800cd00:	2a00      	cmp	r2, #0
 800cd02:	d1f9      	bne.n	800ccf8 <strcpy+0x2>
 800cd04:	4770      	bx	lr
	...

0800cd08 <__swbuf_r>:
 800cd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd0a:	460e      	mov	r6, r1
 800cd0c:	4614      	mov	r4, r2
 800cd0e:	4605      	mov	r5, r0
 800cd10:	b118      	cbz	r0, 800cd1a <__swbuf_r+0x12>
 800cd12:	6983      	ldr	r3, [r0, #24]
 800cd14:	b90b      	cbnz	r3, 800cd1a <__swbuf_r+0x12>
 800cd16:	f7ff f8fb 	bl	800bf10 <__sinit>
 800cd1a:	4b21      	ldr	r3, [pc, #132]	; (800cda0 <__swbuf_r+0x98>)
 800cd1c:	429c      	cmp	r4, r3
 800cd1e:	d12b      	bne.n	800cd78 <__swbuf_r+0x70>
 800cd20:	686c      	ldr	r4, [r5, #4]
 800cd22:	69a3      	ldr	r3, [r4, #24]
 800cd24:	60a3      	str	r3, [r4, #8]
 800cd26:	89a3      	ldrh	r3, [r4, #12]
 800cd28:	071a      	lsls	r2, r3, #28
 800cd2a:	d52f      	bpl.n	800cd8c <__swbuf_r+0x84>
 800cd2c:	6923      	ldr	r3, [r4, #16]
 800cd2e:	b36b      	cbz	r3, 800cd8c <__swbuf_r+0x84>
 800cd30:	6923      	ldr	r3, [r4, #16]
 800cd32:	6820      	ldr	r0, [r4, #0]
 800cd34:	1ac0      	subs	r0, r0, r3
 800cd36:	6963      	ldr	r3, [r4, #20]
 800cd38:	b2f6      	uxtb	r6, r6
 800cd3a:	4283      	cmp	r3, r0
 800cd3c:	4637      	mov	r7, r6
 800cd3e:	dc04      	bgt.n	800cd4a <__swbuf_r+0x42>
 800cd40:	4621      	mov	r1, r4
 800cd42:	4628      	mov	r0, r5
 800cd44:	f000 f966 	bl	800d014 <_fflush_r>
 800cd48:	bb30      	cbnz	r0, 800cd98 <__swbuf_r+0x90>
 800cd4a:	68a3      	ldr	r3, [r4, #8]
 800cd4c:	3b01      	subs	r3, #1
 800cd4e:	60a3      	str	r3, [r4, #8]
 800cd50:	6823      	ldr	r3, [r4, #0]
 800cd52:	1c5a      	adds	r2, r3, #1
 800cd54:	6022      	str	r2, [r4, #0]
 800cd56:	701e      	strb	r6, [r3, #0]
 800cd58:	6963      	ldr	r3, [r4, #20]
 800cd5a:	3001      	adds	r0, #1
 800cd5c:	4283      	cmp	r3, r0
 800cd5e:	d004      	beq.n	800cd6a <__swbuf_r+0x62>
 800cd60:	89a3      	ldrh	r3, [r4, #12]
 800cd62:	07db      	lsls	r3, r3, #31
 800cd64:	d506      	bpl.n	800cd74 <__swbuf_r+0x6c>
 800cd66:	2e0a      	cmp	r6, #10
 800cd68:	d104      	bne.n	800cd74 <__swbuf_r+0x6c>
 800cd6a:	4621      	mov	r1, r4
 800cd6c:	4628      	mov	r0, r5
 800cd6e:	f000 f951 	bl	800d014 <_fflush_r>
 800cd72:	b988      	cbnz	r0, 800cd98 <__swbuf_r+0x90>
 800cd74:	4638      	mov	r0, r7
 800cd76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd78:	4b0a      	ldr	r3, [pc, #40]	; (800cda4 <__swbuf_r+0x9c>)
 800cd7a:	429c      	cmp	r4, r3
 800cd7c:	d101      	bne.n	800cd82 <__swbuf_r+0x7a>
 800cd7e:	68ac      	ldr	r4, [r5, #8]
 800cd80:	e7cf      	b.n	800cd22 <__swbuf_r+0x1a>
 800cd82:	4b09      	ldr	r3, [pc, #36]	; (800cda8 <__swbuf_r+0xa0>)
 800cd84:	429c      	cmp	r4, r3
 800cd86:	bf08      	it	eq
 800cd88:	68ec      	ldreq	r4, [r5, #12]
 800cd8a:	e7ca      	b.n	800cd22 <__swbuf_r+0x1a>
 800cd8c:	4621      	mov	r1, r4
 800cd8e:	4628      	mov	r0, r5
 800cd90:	f000 f81e 	bl	800cdd0 <__swsetup_r>
 800cd94:	2800      	cmp	r0, #0
 800cd96:	d0cb      	beq.n	800cd30 <__swbuf_r+0x28>
 800cd98:	f04f 37ff 	mov.w	r7, #4294967295
 800cd9c:	e7ea      	b.n	800cd74 <__swbuf_r+0x6c>
 800cd9e:	bf00      	nop
 800cda0:	0800e62c 	.word	0x0800e62c
 800cda4:	0800e64c 	.word	0x0800e64c
 800cda8:	0800e60c 	.word	0x0800e60c

0800cdac <_write_r>:
 800cdac:	b538      	push	{r3, r4, r5, lr}
 800cdae:	4d07      	ldr	r5, [pc, #28]	; (800cdcc <_write_r+0x20>)
 800cdb0:	4604      	mov	r4, r0
 800cdb2:	4608      	mov	r0, r1
 800cdb4:	4611      	mov	r1, r2
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	602a      	str	r2, [r5, #0]
 800cdba:	461a      	mov	r2, r3
 800cdbc:	f7f7 fe97 	bl	8004aee <_write>
 800cdc0:	1c43      	adds	r3, r0, #1
 800cdc2:	d102      	bne.n	800cdca <_write_r+0x1e>
 800cdc4:	682b      	ldr	r3, [r5, #0]
 800cdc6:	b103      	cbz	r3, 800cdca <_write_r+0x1e>
 800cdc8:	6023      	str	r3, [r4, #0]
 800cdca:	bd38      	pop	{r3, r4, r5, pc}
 800cdcc:	20000bb0 	.word	0x20000bb0

0800cdd0 <__swsetup_r>:
 800cdd0:	4b32      	ldr	r3, [pc, #200]	; (800ce9c <__swsetup_r+0xcc>)
 800cdd2:	b570      	push	{r4, r5, r6, lr}
 800cdd4:	681d      	ldr	r5, [r3, #0]
 800cdd6:	4606      	mov	r6, r0
 800cdd8:	460c      	mov	r4, r1
 800cdda:	b125      	cbz	r5, 800cde6 <__swsetup_r+0x16>
 800cddc:	69ab      	ldr	r3, [r5, #24]
 800cdde:	b913      	cbnz	r3, 800cde6 <__swsetup_r+0x16>
 800cde0:	4628      	mov	r0, r5
 800cde2:	f7ff f895 	bl	800bf10 <__sinit>
 800cde6:	4b2e      	ldr	r3, [pc, #184]	; (800cea0 <__swsetup_r+0xd0>)
 800cde8:	429c      	cmp	r4, r3
 800cdea:	d10f      	bne.n	800ce0c <__swsetup_r+0x3c>
 800cdec:	686c      	ldr	r4, [r5, #4]
 800cdee:	89a3      	ldrh	r3, [r4, #12]
 800cdf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cdf4:	0719      	lsls	r1, r3, #28
 800cdf6:	d42c      	bmi.n	800ce52 <__swsetup_r+0x82>
 800cdf8:	06dd      	lsls	r5, r3, #27
 800cdfa:	d411      	bmi.n	800ce20 <__swsetup_r+0x50>
 800cdfc:	2309      	movs	r3, #9
 800cdfe:	6033      	str	r3, [r6, #0]
 800ce00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ce04:	81a3      	strh	r3, [r4, #12]
 800ce06:	f04f 30ff 	mov.w	r0, #4294967295
 800ce0a:	e03e      	b.n	800ce8a <__swsetup_r+0xba>
 800ce0c:	4b25      	ldr	r3, [pc, #148]	; (800cea4 <__swsetup_r+0xd4>)
 800ce0e:	429c      	cmp	r4, r3
 800ce10:	d101      	bne.n	800ce16 <__swsetup_r+0x46>
 800ce12:	68ac      	ldr	r4, [r5, #8]
 800ce14:	e7eb      	b.n	800cdee <__swsetup_r+0x1e>
 800ce16:	4b24      	ldr	r3, [pc, #144]	; (800cea8 <__swsetup_r+0xd8>)
 800ce18:	429c      	cmp	r4, r3
 800ce1a:	bf08      	it	eq
 800ce1c:	68ec      	ldreq	r4, [r5, #12]
 800ce1e:	e7e6      	b.n	800cdee <__swsetup_r+0x1e>
 800ce20:	0758      	lsls	r0, r3, #29
 800ce22:	d512      	bpl.n	800ce4a <__swsetup_r+0x7a>
 800ce24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce26:	b141      	cbz	r1, 800ce3a <__swsetup_r+0x6a>
 800ce28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce2c:	4299      	cmp	r1, r3
 800ce2e:	d002      	beq.n	800ce36 <__swsetup_r+0x66>
 800ce30:	4630      	mov	r0, r6
 800ce32:	f7ff fcd3 	bl	800c7dc <_free_r>
 800ce36:	2300      	movs	r3, #0
 800ce38:	6363      	str	r3, [r4, #52]	; 0x34
 800ce3a:	89a3      	ldrh	r3, [r4, #12]
 800ce3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ce40:	81a3      	strh	r3, [r4, #12]
 800ce42:	2300      	movs	r3, #0
 800ce44:	6063      	str	r3, [r4, #4]
 800ce46:	6923      	ldr	r3, [r4, #16]
 800ce48:	6023      	str	r3, [r4, #0]
 800ce4a:	89a3      	ldrh	r3, [r4, #12]
 800ce4c:	f043 0308 	orr.w	r3, r3, #8
 800ce50:	81a3      	strh	r3, [r4, #12]
 800ce52:	6923      	ldr	r3, [r4, #16]
 800ce54:	b94b      	cbnz	r3, 800ce6a <__swsetup_r+0x9a>
 800ce56:	89a3      	ldrh	r3, [r4, #12]
 800ce58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ce5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce60:	d003      	beq.n	800ce6a <__swsetup_r+0x9a>
 800ce62:	4621      	mov	r1, r4
 800ce64:	4630      	mov	r0, r6
 800ce66:	f000 f95b 	bl	800d120 <__smakebuf_r>
 800ce6a:	89a0      	ldrh	r0, [r4, #12]
 800ce6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce70:	f010 0301 	ands.w	r3, r0, #1
 800ce74:	d00a      	beq.n	800ce8c <__swsetup_r+0xbc>
 800ce76:	2300      	movs	r3, #0
 800ce78:	60a3      	str	r3, [r4, #8]
 800ce7a:	6963      	ldr	r3, [r4, #20]
 800ce7c:	425b      	negs	r3, r3
 800ce7e:	61a3      	str	r3, [r4, #24]
 800ce80:	6923      	ldr	r3, [r4, #16]
 800ce82:	b943      	cbnz	r3, 800ce96 <__swsetup_r+0xc6>
 800ce84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ce88:	d1ba      	bne.n	800ce00 <__swsetup_r+0x30>
 800ce8a:	bd70      	pop	{r4, r5, r6, pc}
 800ce8c:	0781      	lsls	r1, r0, #30
 800ce8e:	bf58      	it	pl
 800ce90:	6963      	ldrpl	r3, [r4, #20]
 800ce92:	60a3      	str	r3, [r4, #8]
 800ce94:	e7f4      	b.n	800ce80 <__swsetup_r+0xb0>
 800ce96:	2000      	movs	r0, #0
 800ce98:	e7f7      	b.n	800ce8a <__swsetup_r+0xba>
 800ce9a:	bf00      	nop
 800ce9c:	20000054 	.word	0x20000054
 800cea0:	0800e62c 	.word	0x0800e62c
 800cea4:	0800e64c 	.word	0x0800e64c
 800cea8:	0800e60c 	.word	0x0800e60c

0800ceac <__assert_func>:
 800ceac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ceae:	4614      	mov	r4, r2
 800ceb0:	461a      	mov	r2, r3
 800ceb2:	4b09      	ldr	r3, [pc, #36]	; (800ced8 <__assert_func+0x2c>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4605      	mov	r5, r0
 800ceb8:	68d8      	ldr	r0, [r3, #12]
 800ceba:	b14c      	cbz	r4, 800ced0 <__assert_func+0x24>
 800cebc:	4b07      	ldr	r3, [pc, #28]	; (800cedc <__assert_func+0x30>)
 800cebe:	9100      	str	r1, [sp, #0]
 800cec0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cec4:	4906      	ldr	r1, [pc, #24]	; (800cee0 <__assert_func+0x34>)
 800cec6:	462b      	mov	r3, r5
 800cec8:	f000 f8e0 	bl	800d08c <fiprintf>
 800cecc:	f000 f9a5 	bl	800d21a <abort>
 800ced0:	4b04      	ldr	r3, [pc, #16]	; (800cee4 <__assert_func+0x38>)
 800ced2:	461c      	mov	r4, r3
 800ced4:	e7f3      	b.n	800cebe <__assert_func+0x12>
 800ced6:	bf00      	nop
 800ced8:	20000054 	.word	0x20000054
 800cedc:	0800e7d5 	.word	0x0800e7d5
 800cee0:	0800e7e2 	.word	0x0800e7e2
 800cee4:	0800e810 	.word	0x0800e810

0800cee8 <_close_r>:
 800cee8:	b538      	push	{r3, r4, r5, lr}
 800ceea:	4d06      	ldr	r5, [pc, #24]	; (800cf04 <_close_r+0x1c>)
 800ceec:	2300      	movs	r3, #0
 800ceee:	4604      	mov	r4, r0
 800cef0:	4608      	mov	r0, r1
 800cef2:	602b      	str	r3, [r5, #0]
 800cef4:	f7f7 fe17 	bl	8004b26 <_close>
 800cef8:	1c43      	adds	r3, r0, #1
 800cefa:	d102      	bne.n	800cf02 <_close_r+0x1a>
 800cefc:	682b      	ldr	r3, [r5, #0]
 800cefe:	b103      	cbz	r3, 800cf02 <_close_r+0x1a>
 800cf00:	6023      	str	r3, [r4, #0]
 800cf02:	bd38      	pop	{r3, r4, r5, pc}
 800cf04:	20000bb0 	.word	0x20000bb0

0800cf08 <__sflush_r>:
 800cf08:	898a      	ldrh	r2, [r1, #12]
 800cf0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf0e:	4605      	mov	r5, r0
 800cf10:	0710      	lsls	r0, r2, #28
 800cf12:	460c      	mov	r4, r1
 800cf14:	d458      	bmi.n	800cfc8 <__sflush_r+0xc0>
 800cf16:	684b      	ldr	r3, [r1, #4]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	dc05      	bgt.n	800cf28 <__sflush_r+0x20>
 800cf1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	dc02      	bgt.n	800cf28 <__sflush_r+0x20>
 800cf22:	2000      	movs	r0, #0
 800cf24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf2a:	2e00      	cmp	r6, #0
 800cf2c:	d0f9      	beq.n	800cf22 <__sflush_r+0x1a>
 800cf2e:	2300      	movs	r3, #0
 800cf30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf34:	682f      	ldr	r7, [r5, #0]
 800cf36:	602b      	str	r3, [r5, #0]
 800cf38:	d032      	beq.n	800cfa0 <__sflush_r+0x98>
 800cf3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf3c:	89a3      	ldrh	r3, [r4, #12]
 800cf3e:	075a      	lsls	r2, r3, #29
 800cf40:	d505      	bpl.n	800cf4e <__sflush_r+0x46>
 800cf42:	6863      	ldr	r3, [r4, #4]
 800cf44:	1ac0      	subs	r0, r0, r3
 800cf46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf48:	b10b      	cbz	r3, 800cf4e <__sflush_r+0x46>
 800cf4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf4c:	1ac0      	subs	r0, r0, r3
 800cf4e:	2300      	movs	r3, #0
 800cf50:	4602      	mov	r2, r0
 800cf52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf54:	6a21      	ldr	r1, [r4, #32]
 800cf56:	4628      	mov	r0, r5
 800cf58:	47b0      	blx	r6
 800cf5a:	1c43      	adds	r3, r0, #1
 800cf5c:	89a3      	ldrh	r3, [r4, #12]
 800cf5e:	d106      	bne.n	800cf6e <__sflush_r+0x66>
 800cf60:	6829      	ldr	r1, [r5, #0]
 800cf62:	291d      	cmp	r1, #29
 800cf64:	d82c      	bhi.n	800cfc0 <__sflush_r+0xb8>
 800cf66:	4a2a      	ldr	r2, [pc, #168]	; (800d010 <__sflush_r+0x108>)
 800cf68:	40ca      	lsrs	r2, r1
 800cf6a:	07d6      	lsls	r6, r2, #31
 800cf6c:	d528      	bpl.n	800cfc0 <__sflush_r+0xb8>
 800cf6e:	2200      	movs	r2, #0
 800cf70:	6062      	str	r2, [r4, #4]
 800cf72:	04d9      	lsls	r1, r3, #19
 800cf74:	6922      	ldr	r2, [r4, #16]
 800cf76:	6022      	str	r2, [r4, #0]
 800cf78:	d504      	bpl.n	800cf84 <__sflush_r+0x7c>
 800cf7a:	1c42      	adds	r2, r0, #1
 800cf7c:	d101      	bne.n	800cf82 <__sflush_r+0x7a>
 800cf7e:	682b      	ldr	r3, [r5, #0]
 800cf80:	b903      	cbnz	r3, 800cf84 <__sflush_r+0x7c>
 800cf82:	6560      	str	r0, [r4, #84]	; 0x54
 800cf84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf86:	602f      	str	r7, [r5, #0]
 800cf88:	2900      	cmp	r1, #0
 800cf8a:	d0ca      	beq.n	800cf22 <__sflush_r+0x1a>
 800cf8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf90:	4299      	cmp	r1, r3
 800cf92:	d002      	beq.n	800cf9a <__sflush_r+0x92>
 800cf94:	4628      	mov	r0, r5
 800cf96:	f7ff fc21 	bl	800c7dc <_free_r>
 800cf9a:	2000      	movs	r0, #0
 800cf9c:	6360      	str	r0, [r4, #52]	; 0x34
 800cf9e:	e7c1      	b.n	800cf24 <__sflush_r+0x1c>
 800cfa0:	6a21      	ldr	r1, [r4, #32]
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	4628      	mov	r0, r5
 800cfa6:	47b0      	blx	r6
 800cfa8:	1c41      	adds	r1, r0, #1
 800cfaa:	d1c7      	bne.n	800cf3c <__sflush_r+0x34>
 800cfac:	682b      	ldr	r3, [r5, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d0c4      	beq.n	800cf3c <__sflush_r+0x34>
 800cfb2:	2b1d      	cmp	r3, #29
 800cfb4:	d001      	beq.n	800cfba <__sflush_r+0xb2>
 800cfb6:	2b16      	cmp	r3, #22
 800cfb8:	d101      	bne.n	800cfbe <__sflush_r+0xb6>
 800cfba:	602f      	str	r7, [r5, #0]
 800cfbc:	e7b1      	b.n	800cf22 <__sflush_r+0x1a>
 800cfbe:	89a3      	ldrh	r3, [r4, #12]
 800cfc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfc4:	81a3      	strh	r3, [r4, #12]
 800cfc6:	e7ad      	b.n	800cf24 <__sflush_r+0x1c>
 800cfc8:	690f      	ldr	r7, [r1, #16]
 800cfca:	2f00      	cmp	r7, #0
 800cfcc:	d0a9      	beq.n	800cf22 <__sflush_r+0x1a>
 800cfce:	0793      	lsls	r3, r2, #30
 800cfd0:	680e      	ldr	r6, [r1, #0]
 800cfd2:	bf08      	it	eq
 800cfd4:	694b      	ldreq	r3, [r1, #20]
 800cfd6:	600f      	str	r7, [r1, #0]
 800cfd8:	bf18      	it	ne
 800cfda:	2300      	movne	r3, #0
 800cfdc:	eba6 0807 	sub.w	r8, r6, r7
 800cfe0:	608b      	str	r3, [r1, #8]
 800cfe2:	f1b8 0f00 	cmp.w	r8, #0
 800cfe6:	dd9c      	ble.n	800cf22 <__sflush_r+0x1a>
 800cfe8:	6a21      	ldr	r1, [r4, #32]
 800cfea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cfec:	4643      	mov	r3, r8
 800cfee:	463a      	mov	r2, r7
 800cff0:	4628      	mov	r0, r5
 800cff2:	47b0      	blx	r6
 800cff4:	2800      	cmp	r0, #0
 800cff6:	dc06      	bgt.n	800d006 <__sflush_r+0xfe>
 800cff8:	89a3      	ldrh	r3, [r4, #12]
 800cffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cffe:	81a3      	strh	r3, [r4, #12]
 800d000:	f04f 30ff 	mov.w	r0, #4294967295
 800d004:	e78e      	b.n	800cf24 <__sflush_r+0x1c>
 800d006:	4407      	add	r7, r0
 800d008:	eba8 0800 	sub.w	r8, r8, r0
 800d00c:	e7e9      	b.n	800cfe2 <__sflush_r+0xda>
 800d00e:	bf00      	nop
 800d010:	20400001 	.word	0x20400001

0800d014 <_fflush_r>:
 800d014:	b538      	push	{r3, r4, r5, lr}
 800d016:	690b      	ldr	r3, [r1, #16]
 800d018:	4605      	mov	r5, r0
 800d01a:	460c      	mov	r4, r1
 800d01c:	b913      	cbnz	r3, 800d024 <_fflush_r+0x10>
 800d01e:	2500      	movs	r5, #0
 800d020:	4628      	mov	r0, r5
 800d022:	bd38      	pop	{r3, r4, r5, pc}
 800d024:	b118      	cbz	r0, 800d02e <_fflush_r+0x1a>
 800d026:	6983      	ldr	r3, [r0, #24]
 800d028:	b90b      	cbnz	r3, 800d02e <_fflush_r+0x1a>
 800d02a:	f7fe ff71 	bl	800bf10 <__sinit>
 800d02e:	4b14      	ldr	r3, [pc, #80]	; (800d080 <_fflush_r+0x6c>)
 800d030:	429c      	cmp	r4, r3
 800d032:	d11b      	bne.n	800d06c <_fflush_r+0x58>
 800d034:	686c      	ldr	r4, [r5, #4]
 800d036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d0ef      	beq.n	800d01e <_fflush_r+0xa>
 800d03e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d040:	07d0      	lsls	r0, r2, #31
 800d042:	d404      	bmi.n	800d04e <_fflush_r+0x3a>
 800d044:	0599      	lsls	r1, r3, #22
 800d046:	d402      	bmi.n	800d04e <_fflush_r+0x3a>
 800d048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d04a:	f7ff f804 	bl	800c056 <__retarget_lock_acquire_recursive>
 800d04e:	4628      	mov	r0, r5
 800d050:	4621      	mov	r1, r4
 800d052:	f7ff ff59 	bl	800cf08 <__sflush_r>
 800d056:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d058:	07da      	lsls	r2, r3, #31
 800d05a:	4605      	mov	r5, r0
 800d05c:	d4e0      	bmi.n	800d020 <_fflush_r+0xc>
 800d05e:	89a3      	ldrh	r3, [r4, #12]
 800d060:	059b      	lsls	r3, r3, #22
 800d062:	d4dd      	bmi.n	800d020 <_fflush_r+0xc>
 800d064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d066:	f7fe fff7 	bl	800c058 <__retarget_lock_release_recursive>
 800d06a:	e7d9      	b.n	800d020 <_fflush_r+0xc>
 800d06c:	4b05      	ldr	r3, [pc, #20]	; (800d084 <_fflush_r+0x70>)
 800d06e:	429c      	cmp	r4, r3
 800d070:	d101      	bne.n	800d076 <_fflush_r+0x62>
 800d072:	68ac      	ldr	r4, [r5, #8]
 800d074:	e7df      	b.n	800d036 <_fflush_r+0x22>
 800d076:	4b04      	ldr	r3, [pc, #16]	; (800d088 <_fflush_r+0x74>)
 800d078:	429c      	cmp	r4, r3
 800d07a:	bf08      	it	eq
 800d07c:	68ec      	ldreq	r4, [r5, #12]
 800d07e:	e7da      	b.n	800d036 <_fflush_r+0x22>
 800d080:	0800e62c 	.word	0x0800e62c
 800d084:	0800e64c 	.word	0x0800e64c
 800d088:	0800e60c 	.word	0x0800e60c

0800d08c <fiprintf>:
 800d08c:	b40e      	push	{r1, r2, r3}
 800d08e:	b503      	push	{r0, r1, lr}
 800d090:	4601      	mov	r1, r0
 800d092:	ab03      	add	r3, sp, #12
 800d094:	4805      	ldr	r0, [pc, #20]	; (800d0ac <fiprintf+0x20>)
 800d096:	f853 2b04 	ldr.w	r2, [r3], #4
 800d09a:	6800      	ldr	r0, [r0, #0]
 800d09c:	9301      	str	r3, [sp, #4]
 800d09e:	f7ff fca7 	bl	800c9f0 <_vfiprintf_r>
 800d0a2:	b002      	add	sp, #8
 800d0a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0a8:	b003      	add	sp, #12
 800d0aa:	4770      	bx	lr
 800d0ac:	20000054 	.word	0x20000054

0800d0b0 <_lseek_r>:
 800d0b0:	b538      	push	{r3, r4, r5, lr}
 800d0b2:	4d07      	ldr	r5, [pc, #28]	; (800d0d0 <_lseek_r+0x20>)
 800d0b4:	4604      	mov	r4, r0
 800d0b6:	4608      	mov	r0, r1
 800d0b8:	4611      	mov	r1, r2
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	602a      	str	r2, [r5, #0]
 800d0be:	461a      	mov	r2, r3
 800d0c0:	f7f7 fd58 	bl	8004b74 <_lseek>
 800d0c4:	1c43      	adds	r3, r0, #1
 800d0c6:	d102      	bne.n	800d0ce <_lseek_r+0x1e>
 800d0c8:	682b      	ldr	r3, [r5, #0]
 800d0ca:	b103      	cbz	r3, 800d0ce <_lseek_r+0x1e>
 800d0cc:	6023      	str	r3, [r4, #0]
 800d0ce:	bd38      	pop	{r3, r4, r5, pc}
 800d0d0:	20000bb0 	.word	0x20000bb0

0800d0d4 <__swhatbuf_r>:
 800d0d4:	b570      	push	{r4, r5, r6, lr}
 800d0d6:	460e      	mov	r6, r1
 800d0d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0dc:	2900      	cmp	r1, #0
 800d0de:	b096      	sub	sp, #88	; 0x58
 800d0e0:	4614      	mov	r4, r2
 800d0e2:	461d      	mov	r5, r3
 800d0e4:	da08      	bge.n	800d0f8 <__swhatbuf_r+0x24>
 800d0e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	602a      	str	r2, [r5, #0]
 800d0ee:	061a      	lsls	r2, r3, #24
 800d0f0:	d410      	bmi.n	800d114 <__swhatbuf_r+0x40>
 800d0f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0f6:	e00e      	b.n	800d116 <__swhatbuf_r+0x42>
 800d0f8:	466a      	mov	r2, sp
 800d0fa:	f000 f895 	bl	800d228 <_fstat_r>
 800d0fe:	2800      	cmp	r0, #0
 800d100:	dbf1      	blt.n	800d0e6 <__swhatbuf_r+0x12>
 800d102:	9a01      	ldr	r2, [sp, #4]
 800d104:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d108:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d10c:	425a      	negs	r2, r3
 800d10e:	415a      	adcs	r2, r3
 800d110:	602a      	str	r2, [r5, #0]
 800d112:	e7ee      	b.n	800d0f2 <__swhatbuf_r+0x1e>
 800d114:	2340      	movs	r3, #64	; 0x40
 800d116:	2000      	movs	r0, #0
 800d118:	6023      	str	r3, [r4, #0]
 800d11a:	b016      	add	sp, #88	; 0x58
 800d11c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d120 <__smakebuf_r>:
 800d120:	898b      	ldrh	r3, [r1, #12]
 800d122:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d124:	079d      	lsls	r5, r3, #30
 800d126:	4606      	mov	r6, r0
 800d128:	460c      	mov	r4, r1
 800d12a:	d507      	bpl.n	800d13c <__smakebuf_r+0x1c>
 800d12c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d130:	6023      	str	r3, [r4, #0]
 800d132:	6123      	str	r3, [r4, #16]
 800d134:	2301      	movs	r3, #1
 800d136:	6163      	str	r3, [r4, #20]
 800d138:	b002      	add	sp, #8
 800d13a:	bd70      	pop	{r4, r5, r6, pc}
 800d13c:	ab01      	add	r3, sp, #4
 800d13e:	466a      	mov	r2, sp
 800d140:	f7ff ffc8 	bl	800d0d4 <__swhatbuf_r>
 800d144:	9900      	ldr	r1, [sp, #0]
 800d146:	4605      	mov	r5, r0
 800d148:	4630      	mov	r0, r6
 800d14a:	f7ff fbb3 	bl	800c8b4 <_malloc_r>
 800d14e:	b948      	cbnz	r0, 800d164 <__smakebuf_r+0x44>
 800d150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d154:	059a      	lsls	r2, r3, #22
 800d156:	d4ef      	bmi.n	800d138 <__smakebuf_r+0x18>
 800d158:	f023 0303 	bic.w	r3, r3, #3
 800d15c:	f043 0302 	orr.w	r3, r3, #2
 800d160:	81a3      	strh	r3, [r4, #12]
 800d162:	e7e3      	b.n	800d12c <__smakebuf_r+0xc>
 800d164:	4b0d      	ldr	r3, [pc, #52]	; (800d19c <__smakebuf_r+0x7c>)
 800d166:	62b3      	str	r3, [r6, #40]	; 0x28
 800d168:	89a3      	ldrh	r3, [r4, #12]
 800d16a:	6020      	str	r0, [r4, #0]
 800d16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d170:	81a3      	strh	r3, [r4, #12]
 800d172:	9b00      	ldr	r3, [sp, #0]
 800d174:	6163      	str	r3, [r4, #20]
 800d176:	9b01      	ldr	r3, [sp, #4]
 800d178:	6120      	str	r0, [r4, #16]
 800d17a:	b15b      	cbz	r3, 800d194 <__smakebuf_r+0x74>
 800d17c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d180:	4630      	mov	r0, r6
 800d182:	f000 f863 	bl	800d24c <_isatty_r>
 800d186:	b128      	cbz	r0, 800d194 <__smakebuf_r+0x74>
 800d188:	89a3      	ldrh	r3, [r4, #12]
 800d18a:	f023 0303 	bic.w	r3, r3, #3
 800d18e:	f043 0301 	orr.w	r3, r3, #1
 800d192:	81a3      	strh	r3, [r4, #12]
 800d194:	89a0      	ldrh	r0, [r4, #12]
 800d196:	4305      	orrs	r5, r0
 800d198:	81a5      	strh	r5, [r4, #12]
 800d19a:	e7cd      	b.n	800d138 <__smakebuf_r+0x18>
 800d19c:	0800bea9 	.word	0x0800bea9

0800d1a0 <__ascii_mbtowc>:
 800d1a0:	b082      	sub	sp, #8
 800d1a2:	b901      	cbnz	r1, 800d1a6 <__ascii_mbtowc+0x6>
 800d1a4:	a901      	add	r1, sp, #4
 800d1a6:	b142      	cbz	r2, 800d1ba <__ascii_mbtowc+0x1a>
 800d1a8:	b14b      	cbz	r3, 800d1be <__ascii_mbtowc+0x1e>
 800d1aa:	7813      	ldrb	r3, [r2, #0]
 800d1ac:	600b      	str	r3, [r1, #0]
 800d1ae:	7812      	ldrb	r2, [r2, #0]
 800d1b0:	1e10      	subs	r0, r2, #0
 800d1b2:	bf18      	it	ne
 800d1b4:	2001      	movne	r0, #1
 800d1b6:	b002      	add	sp, #8
 800d1b8:	4770      	bx	lr
 800d1ba:	4610      	mov	r0, r2
 800d1bc:	e7fb      	b.n	800d1b6 <__ascii_mbtowc+0x16>
 800d1be:	f06f 0001 	mvn.w	r0, #1
 800d1c2:	e7f8      	b.n	800d1b6 <__ascii_mbtowc+0x16>

0800d1c4 <__malloc_lock>:
 800d1c4:	4801      	ldr	r0, [pc, #4]	; (800d1cc <__malloc_lock+0x8>)
 800d1c6:	f7fe bf46 	b.w	800c056 <__retarget_lock_acquire_recursive>
 800d1ca:	bf00      	nop
 800d1cc:	20000ba4 	.word	0x20000ba4

0800d1d0 <__malloc_unlock>:
 800d1d0:	4801      	ldr	r0, [pc, #4]	; (800d1d8 <__malloc_unlock+0x8>)
 800d1d2:	f7fe bf41 	b.w	800c058 <__retarget_lock_release_recursive>
 800d1d6:	bf00      	nop
 800d1d8:	20000ba4 	.word	0x20000ba4

0800d1dc <_read_r>:
 800d1dc:	b538      	push	{r3, r4, r5, lr}
 800d1de:	4d07      	ldr	r5, [pc, #28]	; (800d1fc <_read_r+0x20>)
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	4608      	mov	r0, r1
 800d1e4:	4611      	mov	r1, r2
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	602a      	str	r2, [r5, #0]
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	f7f7 fc62 	bl	8004ab4 <_read>
 800d1f0:	1c43      	adds	r3, r0, #1
 800d1f2:	d102      	bne.n	800d1fa <_read_r+0x1e>
 800d1f4:	682b      	ldr	r3, [r5, #0]
 800d1f6:	b103      	cbz	r3, 800d1fa <_read_r+0x1e>
 800d1f8:	6023      	str	r3, [r4, #0]
 800d1fa:	bd38      	pop	{r3, r4, r5, pc}
 800d1fc:	20000bb0 	.word	0x20000bb0

0800d200 <__ascii_wctomb>:
 800d200:	b149      	cbz	r1, 800d216 <__ascii_wctomb+0x16>
 800d202:	2aff      	cmp	r2, #255	; 0xff
 800d204:	bf85      	ittet	hi
 800d206:	238a      	movhi	r3, #138	; 0x8a
 800d208:	6003      	strhi	r3, [r0, #0]
 800d20a:	700a      	strbls	r2, [r1, #0]
 800d20c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d210:	bf98      	it	ls
 800d212:	2001      	movls	r0, #1
 800d214:	4770      	bx	lr
 800d216:	4608      	mov	r0, r1
 800d218:	4770      	bx	lr

0800d21a <abort>:
 800d21a:	b508      	push	{r3, lr}
 800d21c:	2006      	movs	r0, #6
 800d21e:	f000 f84d 	bl	800d2bc <raise>
 800d222:	2001      	movs	r0, #1
 800d224:	f7f7 fc3c 	bl	8004aa0 <_exit>

0800d228 <_fstat_r>:
 800d228:	b538      	push	{r3, r4, r5, lr}
 800d22a:	4d07      	ldr	r5, [pc, #28]	; (800d248 <_fstat_r+0x20>)
 800d22c:	2300      	movs	r3, #0
 800d22e:	4604      	mov	r4, r0
 800d230:	4608      	mov	r0, r1
 800d232:	4611      	mov	r1, r2
 800d234:	602b      	str	r3, [r5, #0]
 800d236:	f7f7 fc82 	bl	8004b3e <_fstat>
 800d23a:	1c43      	adds	r3, r0, #1
 800d23c:	d102      	bne.n	800d244 <_fstat_r+0x1c>
 800d23e:	682b      	ldr	r3, [r5, #0]
 800d240:	b103      	cbz	r3, 800d244 <_fstat_r+0x1c>
 800d242:	6023      	str	r3, [r4, #0]
 800d244:	bd38      	pop	{r3, r4, r5, pc}
 800d246:	bf00      	nop
 800d248:	20000bb0 	.word	0x20000bb0

0800d24c <_isatty_r>:
 800d24c:	b538      	push	{r3, r4, r5, lr}
 800d24e:	4d06      	ldr	r5, [pc, #24]	; (800d268 <_isatty_r+0x1c>)
 800d250:	2300      	movs	r3, #0
 800d252:	4604      	mov	r4, r0
 800d254:	4608      	mov	r0, r1
 800d256:	602b      	str	r3, [r5, #0]
 800d258:	f7f7 fc81 	bl	8004b5e <_isatty>
 800d25c:	1c43      	adds	r3, r0, #1
 800d25e:	d102      	bne.n	800d266 <_isatty_r+0x1a>
 800d260:	682b      	ldr	r3, [r5, #0]
 800d262:	b103      	cbz	r3, 800d266 <_isatty_r+0x1a>
 800d264:	6023      	str	r3, [r4, #0]
 800d266:	bd38      	pop	{r3, r4, r5, pc}
 800d268:	20000bb0 	.word	0x20000bb0

0800d26c <_raise_r>:
 800d26c:	291f      	cmp	r1, #31
 800d26e:	b538      	push	{r3, r4, r5, lr}
 800d270:	4604      	mov	r4, r0
 800d272:	460d      	mov	r5, r1
 800d274:	d904      	bls.n	800d280 <_raise_r+0x14>
 800d276:	2316      	movs	r3, #22
 800d278:	6003      	str	r3, [r0, #0]
 800d27a:	f04f 30ff 	mov.w	r0, #4294967295
 800d27e:	bd38      	pop	{r3, r4, r5, pc}
 800d280:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d282:	b112      	cbz	r2, 800d28a <_raise_r+0x1e>
 800d284:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d288:	b94b      	cbnz	r3, 800d29e <_raise_r+0x32>
 800d28a:	4620      	mov	r0, r4
 800d28c:	f000 f830 	bl	800d2f0 <_getpid_r>
 800d290:	462a      	mov	r2, r5
 800d292:	4601      	mov	r1, r0
 800d294:	4620      	mov	r0, r4
 800d296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d29a:	f000 b817 	b.w	800d2cc <_kill_r>
 800d29e:	2b01      	cmp	r3, #1
 800d2a0:	d00a      	beq.n	800d2b8 <_raise_r+0x4c>
 800d2a2:	1c59      	adds	r1, r3, #1
 800d2a4:	d103      	bne.n	800d2ae <_raise_r+0x42>
 800d2a6:	2316      	movs	r3, #22
 800d2a8:	6003      	str	r3, [r0, #0]
 800d2aa:	2001      	movs	r0, #1
 800d2ac:	e7e7      	b.n	800d27e <_raise_r+0x12>
 800d2ae:	2400      	movs	r4, #0
 800d2b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d2b4:	4628      	mov	r0, r5
 800d2b6:	4798      	blx	r3
 800d2b8:	2000      	movs	r0, #0
 800d2ba:	e7e0      	b.n	800d27e <_raise_r+0x12>

0800d2bc <raise>:
 800d2bc:	4b02      	ldr	r3, [pc, #8]	; (800d2c8 <raise+0xc>)
 800d2be:	4601      	mov	r1, r0
 800d2c0:	6818      	ldr	r0, [r3, #0]
 800d2c2:	f7ff bfd3 	b.w	800d26c <_raise_r>
 800d2c6:	bf00      	nop
 800d2c8:	20000054 	.word	0x20000054

0800d2cc <_kill_r>:
 800d2cc:	b538      	push	{r3, r4, r5, lr}
 800d2ce:	4d07      	ldr	r5, [pc, #28]	; (800d2ec <_kill_r+0x20>)
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	4604      	mov	r4, r0
 800d2d4:	4608      	mov	r0, r1
 800d2d6:	4611      	mov	r1, r2
 800d2d8:	602b      	str	r3, [r5, #0]
 800d2da:	f7f7 fbd1 	bl	8004a80 <_kill>
 800d2de:	1c43      	adds	r3, r0, #1
 800d2e0:	d102      	bne.n	800d2e8 <_kill_r+0x1c>
 800d2e2:	682b      	ldr	r3, [r5, #0]
 800d2e4:	b103      	cbz	r3, 800d2e8 <_kill_r+0x1c>
 800d2e6:	6023      	str	r3, [r4, #0]
 800d2e8:	bd38      	pop	{r3, r4, r5, pc}
 800d2ea:	bf00      	nop
 800d2ec:	20000bb0 	.word	0x20000bb0

0800d2f0 <_getpid_r>:
 800d2f0:	f7f7 bbbe 	b.w	8004a70 <_getpid>
 800d2f4:	0000      	movs	r0, r0
	...

0800d2f8 <floor>:
 800d2f8:	ec51 0b10 	vmov	r0, r1, d0
 800d2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d300:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d304:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d308:	2e13      	cmp	r6, #19
 800d30a:	ee10 5a10 	vmov	r5, s0
 800d30e:	ee10 8a10 	vmov	r8, s0
 800d312:	460c      	mov	r4, r1
 800d314:	dc32      	bgt.n	800d37c <floor+0x84>
 800d316:	2e00      	cmp	r6, #0
 800d318:	da14      	bge.n	800d344 <floor+0x4c>
 800d31a:	a333      	add	r3, pc, #204	; (adr r3, 800d3e8 <floor+0xf0>)
 800d31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d320:	f7f2 ffcc 	bl	80002bc <__adddf3>
 800d324:	2200      	movs	r2, #0
 800d326:	2300      	movs	r3, #0
 800d328:	f7f3 fc0e 	bl	8000b48 <__aeabi_dcmpgt>
 800d32c:	b138      	cbz	r0, 800d33e <floor+0x46>
 800d32e:	2c00      	cmp	r4, #0
 800d330:	da57      	bge.n	800d3e2 <floor+0xea>
 800d332:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d336:	431d      	orrs	r5, r3
 800d338:	d001      	beq.n	800d33e <floor+0x46>
 800d33a:	4c2d      	ldr	r4, [pc, #180]	; (800d3f0 <floor+0xf8>)
 800d33c:	2500      	movs	r5, #0
 800d33e:	4621      	mov	r1, r4
 800d340:	4628      	mov	r0, r5
 800d342:	e025      	b.n	800d390 <floor+0x98>
 800d344:	4f2b      	ldr	r7, [pc, #172]	; (800d3f4 <floor+0xfc>)
 800d346:	4137      	asrs	r7, r6
 800d348:	ea01 0307 	and.w	r3, r1, r7
 800d34c:	4303      	orrs	r3, r0
 800d34e:	d01f      	beq.n	800d390 <floor+0x98>
 800d350:	a325      	add	r3, pc, #148	; (adr r3, 800d3e8 <floor+0xf0>)
 800d352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d356:	f7f2 ffb1 	bl	80002bc <__adddf3>
 800d35a:	2200      	movs	r2, #0
 800d35c:	2300      	movs	r3, #0
 800d35e:	f7f3 fbf3 	bl	8000b48 <__aeabi_dcmpgt>
 800d362:	2800      	cmp	r0, #0
 800d364:	d0eb      	beq.n	800d33e <floor+0x46>
 800d366:	2c00      	cmp	r4, #0
 800d368:	bfbe      	ittt	lt
 800d36a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d36e:	fa43 f606 	asrlt.w	r6, r3, r6
 800d372:	19a4      	addlt	r4, r4, r6
 800d374:	ea24 0407 	bic.w	r4, r4, r7
 800d378:	2500      	movs	r5, #0
 800d37a:	e7e0      	b.n	800d33e <floor+0x46>
 800d37c:	2e33      	cmp	r6, #51	; 0x33
 800d37e:	dd0b      	ble.n	800d398 <floor+0xa0>
 800d380:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d384:	d104      	bne.n	800d390 <floor+0x98>
 800d386:	ee10 2a10 	vmov	r2, s0
 800d38a:	460b      	mov	r3, r1
 800d38c:	f7f2 ff96 	bl	80002bc <__adddf3>
 800d390:	ec41 0b10 	vmov	d0, r0, r1
 800d394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d398:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d39c:	f04f 33ff 	mov.w	r3, #4294967295
 800d3a0:	fa23 f707 	lsr.w	r7, r3, r7
 800d3a4:	4207      	tst	r7, r0
 800d3a6:	d0f3      	beq.n	800d390 <floor+0x98>
 800d3a8:	a30f      	add	r3, pc, #60	; (adr r3, 800d3e8 <floor+0xf0>)
 800d3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ae:	f7f2 ff85 	bl	80002bc <__adddf3>
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	f7f3 fbc7 	bl	8000b48 <__aeabi_dcmpgt>
 800d3ba:	2800      	cmp	r0, #0
 800d3bc:	d0bf      	beq.n	800d33e <floor+0x46>
 800d3be:	2c00      	cmp	r4, #0
 800d3c0:	da02      	bge.n	800d3c8 <floor+0xd0>
 800d3c2:	2e14      	cmp	r6, #20
 800d3c4:	d103      	bne.n	800d3ce <floor+0xd6>
 800d3c6:	3401      	adds	r4, #1
 800d3c8:	ea25 0507 	bic.w	r5, r5, r7
 800d3cc:	e7b7      	b.n	800d33e <floor+0x46>
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d3d4:	fa03 f606 	lsl.w	r6, r3, r6
 800d3d8:	4435      	add	r5, r6
 800d3da:	4545      	cmp	r5, r8
 800d3dc:	bf38      	it	cc
 800d3de:	18e4      	addcc	r4, r4, r3
 800d3e0:	e7f2      	b.n	800d3c8 <floor+0xd0>
 800d3e2:	2500      	movs	r5, #0
 800d3e4:	462c      	mov	r4, r5
 800d3e6:	e7aa      	b.n	800d33e <floor+0x46>
 800d3e8:	8800759c 	.word	0x8800759c
 800d3ec:	7e37e43c 	.word	0x7e37e43c
 800d3f0:	bff00000 	.word	0xbff00000
 800d3f4:	000fffff 	.word	0x000fffff

0800d3f8 <_init>:
 800d3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3fa:	bf00      	nop
 800d3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3fe:	bc08      	pop	{r3}
 800d400:	469e      	mov	lr, r3
 800d402:	4770      	bx	lr

0800d404 <_fini>:
 800d404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d406:	bf00      	nop
 800d408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d40a:	bc08      	pop	{r3}
 800d40c:	469e      	mov	lr, r3
 800d40e:	4770      	bx	lr
